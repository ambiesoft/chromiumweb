version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530325173
host=192.168.3.2
name=デザイン.Auraグラフィックアーキテクチャ
rev=6
targets=
text=https://www.chromium.org/developers/design-documents/aura/graphics-architecture%0a%0a!外観%0a%0ahttps://www.chromium.org/developers/design-documents/aura/graphics-architecture/ChromeGraphicsArchitecture.png%0a%0aAuraウインドウは対応する合成機レイヤを持つ。レイヤツリーは大体ウインドウツリーに対応する。ビューもレイヤをサポートするから、１つのAuraウインドウはビューによって作成されたネストされたレイヤを持つ。%0a%0aレイヤがテクスチャを持つ場合、合成機により描画される。AuraはChromium合成機(CC)の利用へと遷移する。CCを書いているときはそれはWebKitの一部だったが、それを抜き出してChromiumのライブラリにする試みもある。%0a%0a合成機は２つのレイヤツリーをもつ、１つはUIスレッドにあり、オプリョンのもう１つは合成機スレッドにある。これにより、アニメーションのパフォーマンスが上がり、スクロールの反応も良くなる。詳しくはCCドキュメントを参照。CCライブラリはコマンドバッファ経由でGPUプロセスと会話し、最終的なレンダリングを行う。%0a%0a!Pre-Layer Tree Unification World%0a以前の２つのレイヤツリーは１つはUI用でもう１つはレンダープロセスのコンテント用でる。レンダラプロセスは直接WebLayerをつかい、一方UIはそれを''ui/compositor''の''ui::Layer''でラップして、Auraやビューの追加機能に役立つ機能を提供する。%0a%0aCCが抽出されてスタンドアロンなライブラリになれば、''ui::Layer''はCCLayer''に置き換わる。%0a%0a!Paint Scheduling/Draw Flow%0a%0aThroughout these documents and in the source code you will see references to paint and draw. Paint is an operation performed mostly by the Views system to update the contents of the windows... this is a typically a software operation to update the contents of a Skia canvas. Draw is an operation performed by the compositor to draw the contents of layers' textures to the screen, including potentially compositing some of them against each other.%0a%0aA draw can be triggered by two sources: the underlying native window owned by the RootWindowHost can be sent a redraw notification from the system (e.g. WM_PAINT or Expose), or an application event can trigger a redraw by calling ScheduleDraw() on any number of framework objects (Compositor, RootWindow, etc). In the latter case a task is posted that calls Draw().%0a%0aLayer also supports a method SchedulePaint(), which is exposed through Window and also NativeWidgetAura and used by Views when some sub-region of the layer is to be marked invalid. The layer stores the current invalid rect which is a union of all invalid rects specified since the last validation.%0a%0aWhen the compositor draws, it performs a depth-first walk of the layer tree, and if any of the layers it encounters has an invalid rectangle, it is asked to repaint its contents. The compositor does this via WebKit::WebContentLayerClient, implemented by ui::Layer. The layer asks its delegate to repaint via a call of OnPaintLayer() which takes a Skia canvas sized to the invalid rect. In Aura, the delegate is the Window, and the Window asks its delegate to repaint. In production this is often a NativeWidgetAura, a Views type. As mentioned earlier, Views can also have layers directly, and as such a View can also be a layer's delegate.%0a%0aOnce the draw is complete the invalid region is validated so no further paint notifications are sent until explicitly requested by a subsequent invalidation.%0a
time=1530326763
author:1530326763=
diff:1530326763:1530326437:=
host:1530326763=192.168.3.2
author:1530326437=
diff:1530326437:1530326384:=17,28d16%0a%3c %0a%3c !Paint Scheduling/Draw Flow%0a%3c %0a%3c Throughout these documents and in the source code you will see references to paint and draw. Paint is an operation performed mostly by the Views system to update the contents of the windows... this is a typically a software operation to update the contents of a Skia canvas. Draw is an operation performed by the compositor to draw the contents of layers' textures to the screen, including potentially compositing some of them against each other.%0a%3c %0a%3c A draw can be triggered by two sources: the underlying native window owned by the RootWindowHost can be sent a redraw notification from the system (e.g. WM_PAINT or Expose), or an application event can trigger a redraw by calling ScheduleDraw() on any number of framework objects (Compositor, RootWindow, etc). In the latter case a task is posted that calls Draw().%0a%3c %0a%3c Layer also supports a method SchedulePaint(), which is exposed through Window and also NativeWidgetAura and used by Views when some sub-region of the layer is to be marked invalid. The layer stores the current invalid rect which is a union of all invalid rects specified since the last validation.%0a%3c %0a%3c When the compositor draws, it performs a depth-first walk of the layer tree, and if any of the layers it encounters has an invalid rectangle, it is asked to repaint its contents. The compositor does this via WebKit::WebContentLayerClient, implemented by ui::Layer. The layer asks its delegate to repaint via a call of OnPaintLayer() which takes a Skia canvas sized to the invalid rect. In Aura, the delegate is the Window, and the Window asks its delegate to repaint. In production this is often a NativeWidgetAura, a Views type. As mentioned earlier, Views can also have layers directly, and as such a View can also be a layer's delegate.%0a%3c %0a%3c Once the draw is complete the invalid region is validated so no further paint notifications are sent until explicitly requested by a subsequent invalidation.%0a
host:1530326437=192.168.3.2
author:1530326384=
diff:1530326384:1530326027:=13,16d12%0a%3c !Pre-Layer Tree Unification World%0a%3c 以前の２つのレイヤツリーは１つはUI用でもう１つはレンダープロセスのコンテント用でる。レンダラプロセスは直接WebLayerをつかい、一方UIはそれを''ui/compositor''の''ui::Layer''でラップして、Auraやビューの追加機能に役立つ機能を提供する。%0a%3c %0a%3c CCが抽出されてスタンドアロンなライブラリになれば、''ui::Layer''はCCLayer''に置き換わる。%0a
host:1530326384=192.168.3.2
author:1530326027=
diff:1530326027:1530325196:=1,12c1%0a%3c https://www.chromium.org/developers/design-documents/aura/graphics-architecture%0a%3c %0a%3c !外観%0a%3c %0a%3c https://www.chromium.org/developers/design-documents/aura/graphics-architecture/ChromeGraphicsArchitecture.png%0a%3c %0a%3c Auraウインドウは対応する合成機レイヤを持つ。レイヤツリーは大体ウインドウツリーに対応する。ビューもレイヤをサポートするから、１つのAuraウインドウはビューによって作成されたネストされたレイヤを持つ。%0a%3c %0a%3c レイヤがテクスチャを持つ場合、合成機により描画される。AuraはChromium合成機(CC)の利用へと遷移する。CCを書いているときはそれはWebKitの一部だったが、それを抜き出してChromiumのライブラリにする試みもある。%0a%3c %0a%3c 合成機は２つのレイヤツリーをもつ、１つはUIスレッドにあり、オプリョンのもう１つは合成機スレッドにある。これにより、アニメーションのパフォーマンスが上がり、スクロールの反応も良くなる。詳しくはCCドキュメントを参照。CCライブラリはコマンドバッファ経由でGPUプロセスと会話し、最終的なレンダリングを行う。%0a%3c %0a---%0a> https://www.chromium.org/developers/design-documents/aura/graphics-architecture%0a\ No newline at end of file%0a
host:1530326027=192.168.3.2
author:1530325196=
diff:1530325196:1530325173:=1c1%0a%3c https://www.chromium.org/developers/design-documents/aura/graphics-architecture%0a\ No newline at end of file%0a---%0a> a%0a\ No newline at end of file%0a
host:1530325196=192.168.3.2
author:1530325173=
diff:1530325173:1530325173:=1d0%0a%3c a%0a\ No newline at end of file%0a
host:1530325173=192.168.3.2
