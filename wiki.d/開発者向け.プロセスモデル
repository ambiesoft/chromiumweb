version=pmwiki-2.2.109 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502864535
host=192.168.3.2
name=開発者向け.プロセスモデル
rev=8
targets=
text=https://www.chromium.org/developers/design-documents/process-models%0a%0a'''Chromium'''がサポートするレンダラのプロセスモデル%0a%0a!全体像%0aブラウザで実行されるウェブコンテントは膨大な量に進化していて、ウェブサイトはもはや単なるドキュメントではなくアプリのようになっている。この進化がブラウザをOSのように変形させた。'''Chromium'''はこれらのアプリを動かすOSのような位置づけであり、OSがプロセスでアプリを分離するように'''Chromium'''でもサイトごとにプロセスを分離している。'''Chromium'''のタスクマネージャでリソース使用状況を見ることもできる。%0a%0a!サポートされるモデル%0a４つのモデルをサポートしている。デフォルトではサイトのインスタンスごとにOSプロセスを持つモデル。ユーザはコマンドラインからどのモデルを使うか選択できる。ウェブサイトのすべてのインスタンスを１つのプロセスで持つモデル。関連タブグループで１つのプロセスのモデル。完全に１つのプロセスのモデル。以下ではこれらの詳細を説明。%0a%0a!サイトインスタンスごとにプロセスを持つモデル。%0aデフォルトのモデル。ユーザが訪れたサイトのインスタンスごとにプロセスを作成する。違うサイトは別々にレンダリングされることを保証する。同じサイトへの別々の訪問でもプロセス分離される。１つのレンダラの失敗（クラッシュなど）が他のレンダラに影響しない。このモデルは以下の両方を基礎にしている、すわなちスクリプトでつながっているコンテントの起源とタブ間の関連。結果として２つのタブは同じプロセスでレンダリングされることがあり得し、そのタブが他のサイトへ行けばタブのレンダリングプロセスに切り替わることもあり得る。（現在の実装には但し書きが必要で、詳しくは下の但し書き参照）%0a%0a具体的にするため、サイトを登録されたドメイン名と定義する（例：'''google.com bbc.co.uk'''）それに加えてスキーム（例：[@https://@]）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：'''mail.google.com docs.google.com'''）とポート（例：'''http://foo.com:8080'''）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a%0aサイトインスタンスとは同じサイトで連結されたページの集合である。２つのページがjavascriptで参照されていれば、連結とみなす。（例：１つのページがjavascriptで新しいウインドウを開いた場合）%0a%0a!!強み%0a*別々のサイトはコンテントが分離される。%0a*同じサイトでも連結されていなければ分離される。%0a%0a!!弱み%0a*メモリを使う。がその分安定する。%0a*実装が複雑になる。%0a%0a!サイトごとにプロセスをもつ%0aコマンドラインで''--process-per-site''を指定する。%0a%0a!!強み%0a*違うサイトではコンテントを分離する。%0a*メモリが少なくて済む。%0a%0a!!弱み%0a*レンダープロセスが大きくなりえる。'''google.com'''のようなサイトではいろいろなアプリがあるので、これを１つのプロセスで扱うとそのプロセスが肥大化するし、レンダリングの失敗がすべての'''google.com'''を開いているタブに影響する。%0a*さらに実装が複雑。%0a%0a!タブごとにプロセスを持つ%0a上記2つはコンテントのオリジンで判断していたが、これはそれよりも単純なスクリプトでつながっているもので１つのプロセスをもつ。''--process-per-tab''を指定して選択。%0a%0aスクリプトでつながっているサイトを''ブラウジングインスタンス''と呼ぶ。これはHTML5では"関連するブラウジングコンテキストの単位"ともいう。%0a%0a!!強み%0a*理解しやすい。%0a!!弱み%0a*ブラウジングインスタンスは一度決まったら分離しないので、１つのタブが他のタブに影響することがあり得る。%0a%0a!シングルプロセス%0aコマンドライン''--single-process''で選択。ブラウザとレンダリングが１つのプロセス内にある。%0a%0aこれはマルチプロセスのオーバヘッドを測るために提供される。レンダープロセスがブラウザプロセスにまで影響するので安全でない。テストや開発支援目的である。バグがある可能性もある。%0a%0a%0a
time=1538303183
author:1538303183=
diff:1538303183:1530686195:=1,2d0%0a%3c https://www.chromium.org/developers/design-documents/process-models%0a%3c %0a52a51%0a> [[https://www.chromium.org/developers/design-documents/process-models|オリジナル]]%0a\ No newline at end of file%0a
host:1538303183=192.168.3.2
author:1530686195=
diff:1530686195:1530686119:=12,13c12,13%0a%3c 具体的にするため、サイトを登録されたドメイン名と定義する（例：'''google.com bbc.co.uk'''）それに加えてスキーム（例：[@https://@]）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：'''mail.google.com docs.google.com'''）とポート（例：'''http://foo.com:8080'''）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a%3c %0a---%0a> 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：[@https://@]）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a> %0a32c32%0a%3c *レンダープロセスが大きくなりえる。'''google.com'''のようなサイトではいろいろなアプリがあるので、これを１つのプロセスで扱うとそのプロセスが肥大化するし、レンダリングの失敗がすべての'''google.com'''を開いているタブに影響する。%0a---%0a> *レンダープロセスが大きくなりえる。google.comのようなサイトではいろいろなアプリがあるので、これを１つのプロセスで扱うとそのプロセスが肥大化するし、レンダリングの失敗がすべてのgoogle.comを開いているタブに影響する。%0a
host:1530686195=192.168.3.3
author:1530686119=
diff:1530686119:1503354400:=1,2c1,2%0a%3c '''Chromium'''がサポートするレンダラのプロセスモデル%0a%3c %0a---%0a> Chromiumがサポートするレンダラのプロセスモデル%0a> %0a4c4%0a%3c ブラウザで実行されるウェブコンテントは膨大な量に進化していて、ウェブサイトはもはや単なるドキュメントではなくアプリのようになっている。この進化がブラウザをOSのように変形させた。'''Chromium'''はこれらのアプリを動かすOSのような位置づけであり、OSがプロセスでアプリを分離するように'''Chromium'''でもサイトごとにプロセスを分離している。'''Chromium'''のタスクマネージャでリソース使用状況を見ることもできる。%0a---%0a> ブラウザで実行されるウェブコンテントは膨大な量に進化していて、ウェブサイトはもはや単なるドキュメントではなくアプリのようになっている。この進化がブラウザをOSのように変形させた。Chromiumはこれらのアプリを動かすOSのような位置づけであり、OSがプロセスでアプリを分離するようにChromiumでもサイトごとにプロセスを分離している。Chromiumのタスクマネージャでリソース使用状況を見ることもできる。%0a
host:1530686119=192.168.3.3
author:1503354400=
diff:1503354400:1503354309:=12c12%0a%3c 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：[@https://@]）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a---%0a> 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：@@https://）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a
host:1503354400=192.168.0.2
author:1503354309=
diff:1503354309:1502865501:=12c12%0a%3c 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：@@https://）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a---%0a> 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：https://）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a
host:1503354309=192.168.0.2
author:1502865501=
diff:1502865501:1502865362:=
host:1502865501=192.168.0.2
author:1502865362=
diff:1502865362:1502864535:=16c16%0a%3c !!強み%0a---%0a> !強み%0a20c20%0a%3c !!弱み%0a---%0a> !弱み%0a22,51c22%0a%3c *実装が複雑になる。%0a%3c %0a%3c !サイトごとにプロセスをもつ%0a%3c コマンドラインで''--process-per-site''を指定する。%0a%3c %0a%3c !!強み%0a%3c *違うサイトではコンテントを分離する。%0a%3c *メモリが少なくて済む。%0a%3c %0a%3c !!弱み%0a%3c *レンダープロセスが大きくなりえる。google.comのようなサイトではいろいろなアプリがあるので、これを１つのプロセスで扱うとそのプロセスが肥大化するし、レンダリングの失敗がすべてのgoogle.comを開いているタブに影響する。%0a%3c *さらに実装が複雑。%0a%3c %0a%3c !タブごとにプロセスを持つ%0a%3c 上記2つはコンテントのオリジンで判断していたが、これはそれよりも単純なスクリプトでつながっているもので１つのプロセスをもつ。''--process-per-tab''を指定して選択。%0a%3c %0a%3c スクリプトでつながっているサイトを''ブラウジングインスタンス''と呼ぶ。これはHTML5では"関連するブラウジングコンテキストの単位"ともいう。%0a%3c %0a%3c !!強み%0a%3c *理解しやすい。%0a%3c !!弱み%0a%3c *ブラウジングインスタンスは一度決まったら分離しないので、１つのタブが他のタブに影響することがあり得る。%0a%3c %0a%3c !シングルプロセス%0a%3c コマンドライン''--single-process''で選択。ブラウザとレンダリングが１つのプロセス内にある。%0a%3c %0a%3c これはマルチプロセスのオーバヘッドを測るために提供される。レンダープロセスがブラウザプロセスにまで影響するので安全でない。テストや開発支援目的である。バグがある可能性もある。%0a%3c %0a%3c %0a%3c [[https://www.chromium.org/developers/design-documents/process-models|オリジナル]]%0a\ No newline at end of file%0a---%0a> *実装が複雑になる。%0a\ No newline at end of file%0a
host:1502865362=192.168.0.2
author:1502864535=
diff:1502864535:1502864535:=1,22d0%0a%3c Chromiumがサポートするレンダラのプロセスモデル%0a%3c %0a%3c !全体像%0a%3c ブラウザで実行されるウェブコンテントは膨大な量に進化していて、ウェブサイトはもはや単なるドキュメントではなくアプリのようになっている。この進化がブラウザをOSのように変形させた。Chromiumはこれらのアプリを動かすOSのような位置づけであり、OSがプロセスでアプリを分離するようにChromiumでもサイトごとにプロセスを分離している。Chromiumのタスクマネージャでリソース使用状況を見ることもできる。%0a%3c %0a%3c !サポートされるモデル%0a%3c ４つのモデルをサポートしている。デフォルトではサイトのインスタンスごとにOSプロセスを持つモデル。ユーザはコマンドラインからどのモデルを使うか選択できる。ウェブサイトのすべてのインスタンスを１つのプロセスで持つモデル。関連タブグループで１つのプロセスのモデル。完全に１つのプロセスのモデル。以下ではこれらの詳細を説明。%0a%3c %0a%3c !サイトインスタンスごとにプロセスを持つモデル。%0a%3c デフォルトのモデル。ユーザが訪れたサイトのインスタンスごとにプロセスを作成する。違うサイトは別々にレンダリングされることを保証する。同じサイトへの別々の訪問でもプロセス分離される。１つのレンダラの失敗（クラッシュなど）が他のレンダラに影響しない。このモデルは以下の両方を基礎にしている、すわなちスクリプトでつながっているコンテントの起源とタブ間の関連。結果として２つのタブは同じプロセスでレンダリングされることがあり得し、そのタブが他のサイトへ行けばタブのレンダリングプロセスに切り替わることもあり得る。（現在の実装には但し書きが必要で、詳しくは下の但し書き参照）%0a%3c %0a%3c 具体的にするため、サイトを登録されたドメイン名と定義する（例：google.com bbc.co.uk）それに加えてスキーム（例：https://）も加わる。これはSame Origine Policyの定義と同じ。ただしそれはサブドメイン（例：mail.google.com docs.google.com）とポート（例：http://foo.com:8080）も同じサイトになる。これはjavascriptがアクセスできる範囲。%0a%3c %0a%3c サイトインスタンスとは同じサイトで連結されたページの集合である。２つのページがjavascriptで参照されていれば、連結とみなす。（例：１つのページがjavascriptで新しいウインドウを開いた場合）%0a%3c %0a%3c !強み%0a%3c *別々のサイトはコンテントが分離される。%0a%3c *同じサイトでも連結されていなければ分離される。%0a%3c %0a%3c !弱み%0a%3c *メモリを使う。がその分安定する。%0a%3c *実装が複雑になる。%0a\ No newline at end of file%0a
host:1502864535=192.168.0.2
