version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502855638
host=192.168.3.2
name=開発者向け.コンテントAPI
rev=9
targets=
text=http://www.chromium.org/developers/content-module/content-api%0a%0a!動機%0a*Chromeとコンテントを分離%0a*境界をつくり開発者や組み込み者に明確にする%0a%0a!ゴール%0a*組み込み用APIは''src/content/public''にある。%0a%0a!デザイン%0a一般的にはWebKitに倣う。%0a%0a*''content/public''はインターフェースや構造体、そしてわずかの静的関数を含む%0a**例外は''content/public/test''。ここでは具体クラスを許す。%0a%0a*古いスタイルのChrome IPC_messages.hは許さない。.mojomファイルを許す（[[https://groups.google.com/a/chromium.org/forum/#!searchin/chromium-mojo/cross-module/chromium-mojo/ZR2YlRV7Uxs/Ce-h_AaWCgAJ|議論参照]]）。mojomがコンテント内だけで使われるなら、content/commonに置くべき。組み込み者から利用されるなら、content/public/commonに置くべき。%0a%0a*それぞれのインターフェース、構造体、列挙は別々のファイルに置くべき。%0a%0a*コンテントは名前空間content内にあるべき。%0a%0a*コンテントが実装するインターフェースは純粋仮想であるべき。なぜなら普通１つしか実装が存在しないから。これらはコンテント外で実装されるべきでない。（コンテントはこれらを自由に実装にキャストすることができるべき）。%0a%0a*組み込み者が実装するインターフェースは、それはテストやオブザーバスタイルで実装され、多くの実装を持つものだが、デフォルト（空）の実装を持つべき。%0a%0a*列挙値は型の名前で始めるべき。例：''PAGE_TRANSITION_LINK''はcontent::PageTransition列挙の値。%0a%0a*コンテントが実装するコードをコンテントから呼ぶときはインターフェース経由じゃなく直接呼ぶべき。content/rendererはRenderViewImplを使うべきでcontent/RenderViewじゃない。%0a%0a* メンバ変数をもつインタフェースや構造体のコンストラクタとデストラクタの実装は許容できる。構造体については、メンバの初期化をする。インタフェースについては（RenderViewObserverのような）自動登録/登録解除をカバーするかもしれない。通常これらの小さなコードはヘッダに置くが、clangはそのことをチェックするので、.ccに置くことを強制される。（例外を追加すると混乱のもとなのでしたくない）%0a%0a*chromeのコードがコンテントのインタフェースを実装するときは頭にChromeをつけたクラスでやるべき。（例：content::ContentBrowserClientを実装するときはChromeContentBrowserClient）。%0a%0a* 組込者が必要とするAPIのみ公開すること。メソッドがコンテントのコードのみから利用される場合は、foo_impl.hに属するべきで、foo.hではない。%0a%0a* 組込者とコンテントは相互にCallし合うので、APIのメソッドはそこに存在すべきである。組込者どうしのCallは存在すべきではない。%0a%0a* 公開APIのすべてのクラス・構造体・列挙は組込者とコンテントによって使用されるべきである。Chrome層が構造体を使っていてコンテントがそのことを知らないい場合は、それはcontent/publicに属するべきではなくもっと高いレベルに属するべきである。%0a%0a* ひとつのメソッドだけをもつデリゲートインタフェースは避ける。その場合はコールバックを使う。%0a%0a* コンストな識別子をインタフェースに追加しない。組込者によってインターフェースが実装される場合、それが必要とされるか知ることはできない。コンテントによって実装される場合は、実装の詳細を公開すべきではない。%0a%0a* オブザーバインタフェース（WebContentsObserver, RenderFrameObserver, RenderViewObserver)はvoidメンバのみもつべきである。そうしないとオブザーバ登録の順番が問題になる。唯一の例外はOnMessageReceivedで、この場合は１つのオブザーバクラスだけがそれに特化したIPCを扱うので順番は違いを生じさせない。%0a%0a%0a-----%0aDone:2018/07/17 (火) 11:40:14
time=1531761776
author:1531761776=
diff:1531761776:1531760943:=32,48c32%0a%3c *chromeのコードがコンテントのインタフェースを実装するときは頭にChromeをつけたクラスでやるべき。（例：content::ContentBrowserClientを実装するときはChromeContentBrowserClient）。%0a%3c %0a%3c * 組込者が必要とするAPIのみ公開すること。メソッドがコンテントのコードのみから利用される場合は、foo_impl.hに属するべきで、foo.hではない。%0a%3c %0a%3c * 組込者とコンテントは相互にCallし合うので、APIのメソッドはそこに存在すべきである。組込者どうしのCallは存在すべきではない。%0a%3c %0a%3c * 公開APIのすべてのクラス・構造体・列挙は組込者とコンテントによって使用されるべきである。Chrome層が構造体を使っていてコンテントがそのことを知らないい場合は、それはcontent/publicに属するべきではなくもっと高いレベルに属するべきである。%0a%3c %0a%3c * ひとつのメソッドだけをもつデリゲートインタフェースは避ける。その場合はコールバックを使う。%0a%3c %0a%3c * コンストな識別子をインタフェースに追加しない。組込者によってインターフェースが実装される場合、それが必要とされるか知ることはできない。コンテントによって実装される場合は、実装の詳細を公開すべきではない。%0a%3c %0a%3c * オブザーバインタフェース（WebContentsObserver, RenderFrameObserver, RenderViewObserver)はvoidメンバのみもつべきである。そうしないとオブザーバ登録の順番が問題になる。唯一の例外はOnMessageReceivedで、この場合は１つのオブザーバクラスだけがそれに特化したIPCを扱うので順番は違いを生じさせない。%0a%3c %0a%3c %0a%3c -----%0a%3c Done:2018/07/17 (火) 11:40:14%0a\ No newline at end of file%0a---%0a> *chromeのコードがコンテントのインタフェースを実装するときは頭にChromeをつけたクラスでやるべき。（例：content::ContentBrowserClientを実装するときはChromeContentBrowserClient）。%0a\ No newline at end of file%0a
host:1531761776=192.168.3.2
author:1531760943=
diff:1531760943:1531760912:=15d14%0a%3c %0a17d15%0a%3c %0a19d16%0a%3c %0a21d17%0a%3c %0a23d18%0a%3c %0a25d19%0a%3c %0a27d20%0a%3c %0a29d21%0a%3c %0a
host:1531760943=192.168.3.2
author:1531760912=
diff:1531760912:1531760457:=22,23c22%0a%3c * メンバ変数をもつインタフェースや構造体のコンストラクタとデストラクタの実装は許容できる。構造体については、メンバの初期化をする。インタフェースについては（RenderViewObserverのような）自動登録/登録解除をカバーするかもしれない。通常これらの小さなコードはヘッダに置くが、clangはそのことをチェックするので、.ccに置くことを強制される。（例外を追加すると混乱のもとなのでしたくない）%0a%3c %0a---%0a> *（途中）%0a
host:1531760912=192.168.3.2
author:1531760457=
diff:1531760457:1502857060:=1,2d0%0a%3c http://www.chromium.org/developers/content-module/content-api%0a%3c %0a
host:1531760457=192.168.3.2
author:1502857060=
diff:1502857060:1502856963:=
host:1502857060=192.168.0.2
author:1502856963=
diff:1502856963:1502856851:=19,21c19%0a%3c *コンテントが実装するコードをコンテントから呼ぶときはインターフェース経由じゃなく直接呼ぶべき。content/rendererはRenderViewImplを使うべきでcontent/RenderViewじゃない。%0a%3c *（途中）%0a%3c *chromeのコードがコンテントのインタフェースを実装するときは頭にChromeをつけたクラスでやるべき。（例：content::ContentBrowserClientを実装するときはChromeContentBrowserClient）。%0a\ No newline at end of file%0a---%0a> *コンテントが実装するコードをコンテントから呼ぶときはインターフェース経由じゃなく直接呼ぶべき。content/rendererはRenderViewImplを使うべきでcontent/RenderViewじゃない。%0a\ No newline at end of file%0a
host:1502856963=192.168.0.2
author:1502856851=
diff:1502856851:1502856389:=18,19c18%0a%3c *列挙値は型の名前で始めるべき。例：''PAGE_TRANSITION_LINK''はcontent::PageTransition列挙の値。%0a%3c *コンテントが実装するコードをコンテントから呼ぶときはインターフェース経由じゃなく直接呼ぶべき。content/rendererはRenderViewImplを使うべきでcontent/RenderViewじゃない。%0a\ No newline at end of file%0a---%0a> *列挙値は型の名前で始めるべき。例：''PAGE_TRANSITION_LINK''はcontent::PageTransition列挙の値。%0a\ No newline at end of file%0a
host:1502856851=192.168.0.2
author:1502856389=
diff:1502856389:1502855638:=7,18d6%0a%3c %0a%3c !デザイン%0a%3c 一般的にはWebKitに倣う。%0a%3c %0a%3c *''content/public''はインターフェースや構造体、そしてわずかの静的関数を含む%0a%3c **例外は''content/public/test''。ここでは具体クラスを許す。%0a%3c *古いスタイルのChrome IPC_messages.hは許さない。.mojomファイルを許す（[[https://groups.google.com/a/chromium.org/forum/#!searchin/chromium-mojo/cross-module/chromium-mojo/ZR2YlRV7Uxs/Ce-h_AaWCgAJ|議論参照]]）。mojomがコンテント内だけで使われるなら、content/commonに置くべき。組み込み者から利用されるなら、content/public/commonに置くべき。%0a%3c *それぞれのインターフェース、構造体、列挙は別々のファイルに置くべき。%0a%3c *コンテントは名前空間content内にあるべき。%0a%3c *コンテントが実装するインターフェースは純粋仮想であるべき。なぜなら普通１つしか実装が存在しないから。これらはコンテント外で実装されるべきでない。（コンテントはこれらを自由に実装にキャストすることができるべき）。%0a%3c *組み込み者が実装するインターフェースは、それはテストやオブザーバスタイルで実装され、多くの実装を持つものだが、デフォルト（空）の実装を持つべき。%0a%3c *列挙値は型の名前で始めるべき。例：''PAGE_TRANSITION_LINK''はcontent::PageTransition列挙の値。%0a\ No newline at end of file%0a
host:1502856389=192.168.0.2
author:1502855638=
diff:1502855638:1502855638:=1,6d0%0a%3c !動機%0a%3c *Chromeとコンテントを分離%0a%3c *境界をつくり開発者や組み込み者に明確にする%0a%3c %0a%3c !ゴール%0a%3c *組み込み用APIは''src/content/public''にある。%0a
host:1502855638=192.168.0.2
