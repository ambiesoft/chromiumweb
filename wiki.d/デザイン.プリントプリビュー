version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1531775803
host=192.168.3.2
name=デザイン.プリントプリビュー
rev=13
targets=
text=https://www.chromium.org/developers/design-documents/print-preview%0a%0a!目的%0a実際にプリントする前にプリンタの出力を知る%0a%0a!背景%0aウェブページは必ずしもプリントしやすいようには出来ていない。ブラウザがプリントするときにはページをプリントできるように再フォーマットする必要がある。実際プリントアウトされた紙は画面で見ているものとは異なっていることがある。よってユーザが実際にプリントアウトする前に出力されるものを知っておく必要がある。%0a%0a２０１０年１０月時点で、すべての主要ブラウザがプリビュー機能を搭載しているがChromeだけが例外である。Chromeはプリントと指示されるとプリントダイアグを表示してプリントするだけである。%0a%0a!概観%0a計画としてはDOMのUIページをプリビューに使う。左ペインにプリンタ選択を表示し、右ペインにプリビューを表示する。%0a%0aMocks: TODO(thestig) [insert pictures here]%0a%0aプリビューを実際のプリントアウトに近づけるために、Chromeはプリンタに送信するためのPDFを作成しそれをプリビューに使う。PDFを表示するための既存のプラグインを利用する。%0a%0a!ユーザ体感%0aユーザは今でもそうなってるようにレンチメニューからまたはレンダラのコンテキストメニューからまたはショートカットキーから印刷し、それがプリビューを表示するようにすべきである。プレビュータブでは、左ペインは上部に利用可能なプリンタを表示する。その下部にはよく使うプリンタオプション（印刷するーページ、部数、縦横）を表示する。「詳細オプション」を表示しそれがクリックされるとオプションを拡張する。%0a%0aユーザがオプションを調整すると、オプションに合わせて右側のプリビューが更新される。ネイティブのプリントダイアグを表示するおプヨンも設ける。%0a%0a!関連作業%0aSkiaのためのPDFバックエンド実装作業もすすめている。このバックエンドにより一貫性がありサイズ効率も良いPDFをウェブページから作成できる。WindowsやLinuxではPDF作成機能がないか貧弱なのでこうする。Mac OS Xはすでに高機能のPDFバックエンドがビルドインされている。%0a%0aページサムネイル機能などの追加機能をもったPDFプラグインの改善作業も進んでいる。%0a%0a!実装%0aプリビュー機能の実装はUIを提供するフロントエンドとPDFを作成しプリンタと会話するバックエンドがある。ディスクへの永続化も考慮する必要がある。%0a%0a!!フロントエンド%0aフロントエンドはプリントコマンドをフックし、'''chrome://print'''をロードするタブを作成することから始まる。プリビューのための'''TabContents'''マネージャが必要で、プリント可能タブは最大でも１つのプリビュータブをもつ。すでにプリビュータブがある状態で印刷をクリックするとそのタブにフォーカスする。ユーザが印刷するかキャンセルするとプリビューは閉じられる。プリビュータブそれ自体はプリント可能ではない。%0a%0a'''PrintPreviewManager'''は'''DevToolsManager'''と似ている。ブラウザプロセス内に１つのインスタンスが存在しそれが共有される。'''TabContents'''とそれが関連する'''PrintPreviewUI'''がマップされる。プリントのイベントハンドラは与えられた現存のタブのための'''PrintPreviewUI'''を'''PrintPreviewManager'''に求める。'''PrintPreviewManager'''は新しくプリビュータブを作成するか、既存のプレビュータブを返す。'''PrintPreviewManager'''はどのタブがプリビュータブかを知っているので、'''PrintPreviewUI'''のための'''PrintPreviewUI'''を作成しない。%0a%0aプレビュータブはDOM UIを使いブラウザプロセスと通信する特権をもったウェブページを構築する。IPCを使ってブラウザプロセスと通信し、プリンタの一覧を取得し、デフォルトのプリンタをセットする。%0aIt also needs to get the html snippet for the options for the selected printer from the browser, and send updates as the user selects options that affects the print output.%0a%0ahttps://lh6.googleusercontent.com/o6Bxn-bQokkswehLoGiZbhn9UfjyNCsyYDOg8hmGIh5sOm2bftvqQM33zZFj4zYR4s04ULbSJPNIP5YX_wUw0r7LaEHrIWXxbti6__vI6U-V1ObMIw#.png%0a%0aフロントエンドはPDFプラグインを組み込んでプリビューを表示する。ブラウザはPDFを作成し特別なURLであるchrome://print/fooを使って利用可能にする。なのでUIは%3cembed>タグにsrcパラメータを付け足したものを作成すれば良い。フロントエンドはプラグインと通信してサムネイル表示を最新の状態に保たなければならない。DOM UIとプラグインはPepperAPIで通信する。TODO(thestig) PDFプラグインの人たちとプラグインのインターフェースについて話しておくこと%0a%0a!!バックエンド%0aバックエンドコードはフロントエンドからの要求に対して重労働をしなければならない。%0a%0a最初にブラウザプロセスはプリンタのプラットフォーム固有の方法で一覧とオプションを取得する必要がある。クラウドプリントはすでにPPD/XPSからHTMLオプションを生成するコードを持っているのでそれが使える。ただしXPの場合はXPSをサポートしていないので、プリンタへ共通のオプションを尋ねることが出来なければならない。%0a%0a仕事の大部分はプレビューをサポートするためのややこしいプリントパイプラインの再構築を含んでいる。現状ではLinuxのプリントパイプラインはWindowsやMacと違っている。すべてのプラットフォームが一列になったら、プリントパイプラインは２つに分割する：PDF作成とプリントに。現在のプリントパイプラインはユーザがプリンタを選択するのを待ってプリント出力を生成（プラットフォーム固有のコードで）し出力をプリンタへ送る。実際のプリント処理はパイプラインを使う：レンダラは一度に一ページのプリントメタデータを生成する。一方でブラウザプロセスの'''PrintJobWorker'''はそれらをプリンタへ送る。%0a%0ahttps://lh5.googleusercontent.com/2z3HNh9XZnXodPVnCvwAPxo0t2XNuvA1WMR9btDaOPVnE7mnTHAAlcE_qgZeDvVqjBVEoBZGVwlEaW4T-nok5C8ifNomKSZcjMh3SXoUu3LDP88OcA#.png%0a%0a%0aプリビューのために、レンダラは現在のプリンタ設定を取得し、PDFを作成し、それをブラウザへ送らなくてはならない。ブラウザではPDFを表示し、ユーザのプリンタ設定を待ち、それがあれば、レンダラにPDF作成を再要求しなければならない。この作業はユーザがプリビューを終えるまで続きその後ChromeはPDFをプリンタへ送る。これを直接行うかプラグインが行うかは今後決定する。%0a%0ahttps://lh4.googleusercontent.com/AztOs3lb0beuoYTs6GRn-y-xpnJaCTL_GoJXE9Z3C_hxaLq5SrQB5qx9mqkrmwSbnHbxZqkMvbXHZLahm8EXTBPoXrbuNuknU62-VawahlHMvNP3Rw#.png%0a%0a%0a考慮すべき点は：%0a* プリントパイプラインは古いモデルと新しいモデル両方サポートすべきか。一方でプリビュー開発はコマンドラインフラグをもとにして進んでいる。%0a* PDF作成は一定時間内に行うべきか（ユーザ体感の反応を上げるために）%0a* または別の方法として、１ページ毎にPDFを作成してそれを集めるか。しかしPDFビューアプラグインはPDFが１つにまとまってる必要がある。%0a* プリントのためにFrame/DOM/Renderのコピーを作成すべきか。http://crbug.com/21555%0a%0a%0a!設定をディスクに保存%0aユーザが毎回プリントオプションを設定し直すのは大変なので保存するようにする。%0a%0a保存は新しいデータベースに行うべきである。設定ファイルに直接保存するよりも良い方法である。ユーザが多くのプリンタを持っている場合、保存する設定も大きくなる。Chromeがスタートアップに読み込む設定ファイルに書くとスタートアップが遅くなる可能性がある。%0a%0aデータベースのテーブルにはグローバルなプリビュー設定（最近使ったプリンタなど）が含まれる。コラムがプリンタ名、設定名、設定値のテーブルももつ。プリンタ名と設定名でユニークキーとする。メモリ上では、cloud_print::PrinterBasicInfoのオプション値で表される。%0a%0a%0a%0a!国際化%0a%0aTODO / 左ペインは右から左の言語に対応すべき？他の問題は？%0a%0a%0a!機能強化%0a%0a!!クラウドプリントと統合%0a最初のバージョンのプリビューはOSによって公開されているプリンタのみを対象をした。Cloud Printingと統合するには、ChromeはクラウドプリントAPIを使ってクラウドプリンタにも照会しないとならない。プリビューがPPD/XPSのパースにクラウドプリンタサーバと同じコードを使うとすると、Chromeはプリンタ情報（PPDファイル）と利用可能そしてデフォルトの紙サイズを取得する必要がある。これら２つのデータで、Chromeはオプションダイアログとプレビューを自分自身でできる。ユーザが印刷ボタンを押したら、ChromeはPDFをプリンタへ送る代わりにクラウドプリントサーバに送る。%0a%0a!他の機能強化%0a* ヘッダとフッタの調整%0a* マージンの調整%0a* 拡大・縮小の調整%0a* Google Docsとの統合%0a* 名前でプリンタを検索する機能。大企業の場合多くのネットワークプリンタがあり一覧から選ぶのは大変。%0a* 位置情報からのプリンタ選択%0a* プレビュー設定とネイティブのダイアログの設定の同期%0a%0a!プライバシーとセキュリティ%0aプレビューとPDFプラグインはどちらもサンドボックス化されたレンダラプロセスで動く。ページはブラウザプロセスと通信するしプリンタ情報を取得したりプリントジョブを送ったりする権限をもっていない。レンダラとブラウザ間のインタフェースが注意深く制御されたとして、プリビューはレンダラプロセスと同等にセキュアであるべき。%0a%0a----%0aDone: 2018/07/17 (火) 17:45:14%0a%0a%0a%0a%0a
time=1531783670
author:1531783670=
diff:1531783670:1531781478:=63,98d62%0a%3c %0a%3c %0a%3c !設定をディスクに保存%0a%3c ユーザが毎回プリントオプションを設定し直すのは大変なので保存するようにする。%0a%3c %0a%3c 保存は新しいデータベースに行うべきである。設定ファイルに直接保存するよりも良い方法である。ユーザが多くのプリンタを持っている場合、保存する設定も大きくなる。Chromeがスタートアップに読み込む設定ファイルに書くとスタートアップが遅くなる可能性がある。%0a%3c %0a%3c データベースのテーブルにはグローバルなプリビュー設定（最近使ったプリンタなど）が含まれる。コラムがプリンタ名、設定名、設定値のテーブルももつ。プリンタ名と設定名でユニークキーとする。メモリ上では、cloud_print::PrinterBasicInfoのオプション値で表される。%0a%3c %0a%3c %0a%3c %0a%3c !国際化%0a%3c %0a%3c TODO / 左ペインは右から左の言語に対応すべき？他の問題は？%0a%3c %0a%3c %0a%3c !機能強化%0a%3c %0a%3c !!クラウドプリントと統合%0a%3c 最初のバージョンのプリビューはOSによって公開されているプリンタのみを対象をした。Cloud Printingと統合するには、ChromeはクラウドプリントAPIを使ってクラウドプリンタにも照会しないとならない。プリビューがPPD/XPSのパースにクラウドプリンタサーバと同じコードを使うとすると、Chromeはプリンタ情報（PPDファイル）と利用可能そしてデフォルトの紙サイズを取得する必要がある。これら２つのデータで、Chromeはオプションダイアログとプレビューを自分自身でできる。ユーザが印刷ボタンを押したら、ChromeはPDFをプリンタへ送る代わりにクラウドプリントサーバに送る。%0a%3c %0a%3c !他の機能強化%0a%3c * ヘッダとフッタの調整%0a%3c * マージンの調整%0a%3c * 拡大・縮小の調整%0a%3c * Google Docsとの統合%0a%3c * 名前でプリンタを検索する機能。大企業の場合多くのネットワークプリンタがあり一覧から選ぶのは大変。%0a%3c * 位置情報からのプリンタ選択%0a%3c * プレビュー設定とネイティブのダイアログの設定の同期%0a%3c %0a%3c !プライバシーとセキュリティ%0a%3c プレビューとPDFプラグインはどちらもサンドボックス化されたレンダラプロセスで動く。ページはブラウザプロセスと通信するしプリンタ情報を取得したりプリントジョブを送ったりする権限をもっていない。レンダラとブラウザ間のインタフェースが注意深く制御されたとして、プリビューはレンダラプロセスと同等にセキュアであるべき。%0a%3c %0a%3c ----%0a%3c Done: 2018/07/17 (火) 17:45:14%0a%3c %0a
host:1531783670=192.168.3.2
author:1531781478=
diff:1531781478:1531780840:=53,65c53%0a%3c プリビューのために、レンダラは現在のプリンタ設定を取得し、PDFを作成し、それをブラウザへ送らなくてはならない。ブラウザではPDFを表示し、ユーザのプリンタ設定を待ち、それがあれば、レンダラにPDF作成を再要求しなければならない。この作業はユーザがプリビューを終えるまで続きその後ChromeはPDFをプリンタへ送る。これを直接行うかプラグインが行うかは今後決定する。%0a%3c %0a%3c https://lh4.googleusercontent.com/AztOs3lb0beuoYTs6GRn-y-xpnJaCTL_GoJXE9Z3C_hxaLq5SrQB5qx9mqkrmwSbnHbxZqkMvbXHZLahm8EXTBPoXrbuNuknU62-VawahlHMvNP3Rw#.png%0a%3c %0a%3c %0a%3c 考慮すべき点は：%0a%3c * プリントパイプラインは古いモデルと新しいモデル両方サポートすべきか。一方でプリビュー開発はコマンドラインフラグをもとにして進んでいる。%0a%3c * PDF作成は一定時間内に行うべきか（ユーザ体感の反応を上げるために）%0a%3c * または別の方法として、１ページ毎にPDFを作成してそれを集めるか。しかしPDFビューアプラグインはPDFが１つにまとまってる必要がある。%0a%3c * プリントのためにFrame/DOM/Renderのコピーを作成すべきか。http://crbug.com/21555%0a%3c %0a%3c %0a%3c %0a---%0a> In the printing work flow for print preview, the renderer needs to retrieve the current printer settings, generate a PDF, and send the PDF to the browser. On the browser side, it just displays the PDF and wait for users to tweak the printer settings, after which the browser would ask the renderer to generate a new PDF for previewing. This process repeats until the user finishes with preview, after which Chrome sends the final revision of the PDF to the printer. Whether this should be done directly or by ask the plugin to do it through parts of the existing printing pipeline remains TBD.%0a
host:1531781478=192.168.3.2
author:1531780840=
diff:1531780840:1531779217:=44,53c44,46%0a%3c バックエンドコードはフロントエンドからの要求に対して重労働をしなければならない。%0a%3c %0a%3c 最初にブラウザプロセスはプリンタのプラットフォーム固有の方法で一覧とオプションを取得する必要がある。クラウドプリントはすでにPPD/XPSからHTMLオプションを生成するコードを持っているのでそれが使える。ただしXPの場合はXPSをサポートしていないので、プリンタへ共通のオプションを尋ねることが出来なければならない。%0a%3c %0a%3c 仕事の大部分はプレビューをサポートするためのややこしいプリントパイプラインの再構築を含んでいる。現状ではLinuxのプリントパイプラインはWindowsやMacと違っている。すべてのプラットフォームが一列になったら、プリントパイプラインは２つに分割する：PDF作成とプリントに。現在のプリントパイプラインはユーザがプリンタを選択するのを待ってプリント出力を生成（プラットフォーム固有のコードで）し出力をプリンタへ送る。実際のプリント処理はパイプラインを使う：レンダラは一度に一ページのプリントメタデータを生成する。一方でブラウザプロセスの'''PrintJobWorker'''はそれらをプリンタへ送る。%0a%3c %0a%3c https://lh5.googleusercontent.com/2z3HNh9XZnXodPVnCvwAPxo0t2XNuvA1WMR9btDaOPVnE7mnTHAAlcE_qgZeDvVqjBVEoBZGVwlEaW4T-nok5C8ifNomKSZcjMh3SXoUu3LDP88OcA#.png%0a%3c %0a%3c %0a%3c In the printing work flow for print preview, the renderer needs to retrieve the current printer settings, generate a PDF, and send the PDF to the browser. On the browser side, it just displays the PDF and wait for users to tweak the printer settings, after which the browser would ask the renderer to generate a new PDF for previewing. This process repeats until the user finishes with preview, after which Chrome sends the final revision of the PDF to the printer. Whether this should be done directly or by ask the plugin to do it through parts of the existing printing pipeline remains TBD.%0a---%0a> The backend code in the browser process needs to do the heavy lifting to support all the requests coming from the front end.%0a> %0a> %0a
host:1531780840=192.168.3.2
author:1531779217=
diff:1531779217:1531779192:=43,45c43%0a%3c !!バックエンド%0a%3c The backend code in the browser process needs to do the heavy lifting to support all the requests coming from the front end.%0a%3c %0a---%0a> !バックエンド%0a
host:1531779217=192.168.3.2
author:1531779192=
diff:1531779192:1531778478:=40,43d39%0a%3c %0a%3c フロントエンドはPDFプラグインを組み込んでプリビューを表示する。ブラウザはPDFを作成し特別なURLであるchrome://print/fooを使って利用可能にする。なのでUIは%3cembed>タグにsrcパラメータを付け足したものを作成すれば良い。フロントエンドはプラグインと通信してサムネイル表示を最新の状態に保たなければならない。DOM UIとプラグインはPepperAPIで通信する。TODO(thestig) PDFプラグインの人たちとプラグインのインターフェースについて話しておくこと%0a%3c %0a%3c !バックエンド%0a
host:1531779192=192.168.3.2
author:1531778478=
diff:1531778478:1531778279:=39c39%0a%3c https://lh6.googleusercontent.com/o6Bxn-bQokkswehLoGiZbhn9UfjyNCsyYDOg8hmGIh5sOm2bftvqQM33zZFj4zYR4s04ULbSJPNIP5YX_wUw0r7LaEHrIWXxbti6__vI6U-V1ObMIw#.png%0a---%0a> https://lh6.googleusercontent.com/o6Bxn-bQokkswehLoGiZbhn9UfjyNCsyYDOg8hmGIh5sOm2bftvqQM33zZFj4zYR4s04ULbSJPNIP5YX_wUw0r7LaEHrIWXxbti6__vI6U-V1ObMIw%0a
host:1531778478=192.168.3.2
author:1531778279=
diff:1531778279:1531778055:=36,39c36%0a%3c プレビュータブはDOM UIを使いブラウザプロセスと通信する特権をもったウェブページを構築する。IPCを使ってブラウザプロセスと通信し、プリンタの一覧を取得し、デフォルトのプリンタをセットする。%0a%3c It also needs to get the html snippet for the options for the selected printer from the browser, and send updates as the user selects options that affects the print output.%0a%3c %0a%3c https://lh6.googleusercontent.com/o6Bxn-bQokkswehLoGiZbhn9UfjyNCsyYDOg8hmGIh5sOm2bftvqQM33zZFj4zYR4s04ULbSJPNIP5YX_wUw0r7LaEHrIWXxbti6__vI6U-V1ObMIw%0a---%0a> %0a
host:1531778279=192.168.3.2
author:1531778055=
diff:1531778055:1531777729:=33,34d32%0a%3c %0a%3c '''PrintPreviewManager'''は'''DevToolsManager'''と似ている。ブラウザプロセス内に１つのインスタンスが存在しそれが共有される。'''TabContents'''とそれが関連する'''PrintPreviewUI'''がマップされる。プリントのイベントハンドラは与えられた現存のタブのための'''PrintPreviewUI'''を'''PrintPreviewManager'''に求める。'''PrintPreviewManager'''は新しくプリビュータブを作成するか、既存のプレビュータブを返す。'''PrintPreviewManager'''はどのタブがプリビュータブかを知っているので、'''PrintPreviewUI'''のための'''PrintPreviewUI'''を作成しない。%0a
host:1531778055=192.168.3.2
author:1531777729=
diff:1531777729:1531777287:=28,32c28%0a%3c !実装%0a%3c プリビュー機能の実装はUIを提供するフロントエンドとPDFを作成しプリンタと会話するバックエンドがある。ディスクへの永続化も考慮する必要がある。%0a%3c %0a%3c !!フロントエンド%0a%3c フロントエンドはプリントコマンドをフックし、'''chrome://print'''をロードするタブを作成することから始まる。プリビューのための'''TabContents'''マネージャが必要で、プリント可能タブは最大でも１つのプリビュータブをもつ。すでにプリビュータブがある状態で印刷をクリックするとそのタブにフォーカスする。ユーザが印刷するかキャンセルするとプリビューは閉じられる。プリビュータブそれ自体はプリント可能ではない。%0a---%0a> %0a
host:1531777729=192.168.3.2
author:1531777287=
diff:1531777287:1531777243:=25,27d24%0a%3c %0a%3c ページサムネイル機能などの追加機能をもったPDFプラグインの改善作業も進んでいる。%0a%3c %0a
host:1531777287=192.168.3.2
author:1531777243=
diff:1531777243:1531776314:=20,26d19%0a%3c %0a%3c ユーザがオプションを調整すると、オプションに合わせて右側のプリビューが更新される。ネイティブのプリントダイアグを表示するおプヨンも設ける。%0a%3c %0a%3c !関連作業%0a%3c SkiaのためのPDFバックエンド実装作業もすすめている。このバックエンドにより一貫性がありサイズ効率も良いPDFをウェブページから作成できる。WindowsやLinuxではPDF作成機能がないか貧弱なのでこうする。Mac OS Xはすでに高機能のPDFバックエンドがビルドインされている。%0a%3c %0a%3c %0a
host:1531777243=192.168.3.2
author:1531776314=
diff:1531776314:1531775803:=18,19c18%0a%3c !ユーザ体感%0a%3c ユーザは今でもそうなってるようにレンチメニューからまたはレンダラのコンテキストメニューからまたはショートカットキーから印刷し、それがプリビューを表示するようにすべきである。プレビュータブでは、左ペインは上部に利用可能なプリンタを表示する。その下部にはよく使うプリンタオプション（印刷するーページ、部数、縦横）を表示する。「詳細オプション」を表示しそれがクリックされるとオプションを拡張する。%0a---%0a> !ユーザ実感%0a
host:1531776314=192.168.3.2
author:1531775803=
diff:1531775803:1531775803:=1,20d0%0a%3c https://www.chromium.org/developers/design-documents/print-preview%0a%3c %0a%3c !目的%0a%3c 実際にプリントする前にプリンタの出力を知る%0a%3c %0a%3c !背景%0a%3c ウェブページは必ずしもプリントしやすいようには出来ていない。ブラウザがプリントするときにはページをプリントできるように再フォーマットする必要がある。実際プリントアウトされた紙は画面で見ているものとは異なっていることがある。よってユーザが実際にプリントアウトする前に出力されるものを知っておく必要がある。%0a%3c %0a%3c ２０１０年１０月時点で、すべての主要ブラウザがプリビュー機能を搭載しているがChromeだけが例外である。Chromeはプリントと指示されるとプリントダイアグを表示してプリントするだけである。%0a%3c %0a%3c !概観%0a%3c 計画としてはDOMのUIページをプリビューに使う。左ペインにプリンタ選択を表示し、右ペインにプリビューを表示する。%0a%3c %0a%3c Mocks: TODO(thestig) [insert pictures here]%0a%3c %0a%3c プリビューを実際のプリントアウトに近づけるために、Chromeはプリンタに送信するためのPDFを作成しそれをプリビューに使う。PDFを表示するための既存のプラグインを利用する。%0a%3c %0a%3c !ユーザ実感%0a%3c %0a%3c %0a
host:1531775803=192.168.3.2
