version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530427776
host=192.168.3.2
name=HowTo.Chromiumソースコードへの取り掛かり
rev=13
targets=デザイン.マルチプロセスアーキテクチャ,デザイン.ウェブページ表示の仕組み
text=https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code%0a%0a!!全体像%0a%0aChromiumは３つのパーツに別れる。ブラウザ、レンダラ、Webkitである。ブラウザはメインプロセスであり、UIやI/Oを代表する。レンダラは大体の場合タブごとにもつサブプロセスで構成されブラウザにより制御される。レンダラはWebkitを組み込み、レイアウトやレンダリングを実行する。%0a%0a詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[デザイン/ウェブページ表示の仕組み]]を参照。%0a%0a!!ソルーションファイルの簡単な紹介%0aソルーションファイルは''chrome/chrome.sln''のこと。%0a%0a* スタートアップコードは''App/chrome_dll'と'App/chrome''プロジェクトにある。%0a%0a* 共通のシェアードライブラリのコードは''Libraries/base''プロジェクトにある。ここのコードはすべてのプロジェクトでシェアされ、なるべく小さくなるように保たれている。%0a%0a* ブラウザ専用のコードは''Browser/common''プロジェクトにある。個々のコードはブラウザとレンダラでシェアされる。%0a%0a* Webkitのコードは''Webkit''プロジェクト（リードオンリー）にある。これに加えてGoogleの''Webkit/port''がありWindowsでのインターフェースを提供する。''WebKit(ours)/glue''はそれを組み込むためのものである。%0a%0a* glueはタブごとの''Browser/renderer''と会話する。%0a%0a* ''Browser/browser''プロジェクトはユーザインタフェース、ストレージ、ネットワークリクエストを提供する。%0a%0a!!トップレベルプロジェクト%0a%0a*'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供。%0a*'''apps''': ChromeをパッケージしたApp%0a*'''base''': 下位のプロジェクトで使う共通コード。文字列操作や、汎用ユーティリティ、トップレベルプロジェクトで共通に使うコードはここに置く。%0a*'''breakpad''': Googleのオープンソースクラッシュレポートプロジェクト。Google Codeのsubversionから持ってきている。%0a*'''build''': すべてのプロジェクトで使うビルド関連の設定。%0a*'''cc''': Chromium compositor実装。%0a*'''chrome''': Chromiumブラウザ（下記参照）。%0a*'''chrome/test/data''': 一部テストのためのデータファイル。%0a*'''components''':  Content Moduleをもつcomponentのためのディレクトリ。 directory for components that have the Content Module as the uppermost layer they depend on.%0a*'''content''': マルチプロセスサンドボックスブラウザ（下記参照）の中核コード。%0a*'''device''': 共通な下位レベルハードウェアAPIのクロスプラットフォーム抽象。%0a*'''net''': ネットワーキングライブラリ。See also chrome/common/net.%0a*'''sandbox''': サンドボックスプロジェクト。ハックされたレンダラからのシステム保護を志向。%0a*'''skia''': アンドロイド向けに開発されたSkiaグラフィックライブラリ。アンドロイドツリーからのコピー。 追加のクラスは ui/gfxでSkiaをラップ。%0a*'''sql''': sqliteのラップ。%0a*'''testing''': GoogleのオープンソースGTestのコード。ユニットテストで使う。%0a*'''third_party''': 多くの外部ライブラリ、イメージデコーダや圧縮ライブラリ。Chrome特定のライブラリはchrome/third_party。%0a*'''tools''': %0a*'''ui/gfx''': 共用グラフィッククラス。ChromiumのUIを形成する。%0a*'''ui/views''': UI開発のフレームワーク。レンダリング、レイアウト、イベントハンドリングを提供する。ブラウザのUIはこのシステムで実装する。このディレクトリはベースオブジェクトを含みブラウザ特定のオブジェクトはchrome/browser/ui/viewsにある。%0a*'''url''': GoogleのオープンソースURLパーサ＆正規化ライブラリ%0a*'''v8''': The V8 Javascript library. Google CodeのSubversionからpullしてきた。%0a*'''webkit''': ChromiumのWebkit関連物%0a**'''appcache''':%0a**'''base''':%0a**'''blob''':%0a**'''build''': 残りのプロジェクトのためのプロジェクトファイルや構成。%0a**'''data''': Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a**'''glue''': glueレイヤは埋め込みレイヤ。Webcoreのタイプと我々のタイプの（大体STL）の変換、Webcoreを使うための便利なメソッドの提供。%0a**'''tools'''%0a***'''layout_tests''': WebCoreレイアウトテストのためのスクリプト。%0a***'''merge''': WebKitツリーにマージするのと助けるスクリプト。%0a***'''npapi_layout_test_plugin''': プラグインレイヤテストのための特別なプラグイン。%0a***'''test_shell''': とてもシンプルなスタンドアロンブラウザ。guleやport codeのテストで使う。%0a%0a%0a %0a以下は依存関係の図。下位モジュールは上位モジュールのコードを直接includeできない。（例：contentはchromeのヘッダをインクルードできない）、が、embedder APIでしゃべることはできる。%0a%0ahttps://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code/Content.png%0a%0a%0a!!contentディレクトリ配下の簡単な説明%0a*'''browser''': アプリがIOやサブプロセスと通信するバックエンド、レンダラとも会話する。%0a*'''common''': マルチプロセス共通で使うファイル（ブラウザとレンダラ、レンダラとプラグインなど）。これはChromiumの特別コードでbaseには当てはまらない。%0a*'''gpu''': GPUプロセスのコード。3D関連。%0a*'''plugin''': 他プロセスでプラグインを実行するコード。%0a*'''ppapi_plugin''': Pepperプラグインプロセスのコード%0a*'''renderer''': １つ１つのタブでのサブプロセスのコード。WebKitを取り込み、IOのためにbrowserと通信。%0a*'''utility''': サンドボックス化されたプロセスでランダムなオペレーションを実行するコード。browserは信頼できないデータのオペレーションに使う。%0a*'''worker''': HTML5 Web Workersを実行するコード。%0a%0a!!chromeディレクトリ配下の簡単な説明%0a*'''app''': プログラムのもっとも基本的レベル。スタートアップで実行され、browserやrendererに処理を投げる。chrome.exeやchrome.dllのプロジェクトを含む。リソース以外には基本的に触る必要はない。%0a**'''locales''': ローカライズされたDLLのビルドする。%0a**'''resources''': アイコンやカーソル。%0a**'''theme''': ウインドウのテーマイメージ。%0a*'''browser''': メインウインドウを含むフロントエンドUI。アプリにとってはIOやstorageのバックエンド。rendererと会話しウェブページを管理。%0a**'''ui''': モデル、ビュー、コントローラのコード、UI機能。%0a*'''common''': chromeモジュールでbrowserとrendererでつかう共通ファイル。%0a**'''net''': トップレベルモジュールnetへのChromium特定物。browser/netとマージされるべき。%0a*'''installer''': MSIパッケージをつくる。%0a*'''renderer''': レンダラプロセスで走るChrome特定のコード。autofillや翻訳機能をcontentモジュールに追加。%0a*'''third_party''': Chromium特定のサードパーティライブラリ。他のサードパーティライブラリはトップレベルのthird_partyにある。%0a*'''tools''': %0a**'''build''': ビルド関連%0a***'''buildbot''': ビルドボット構成。ビルドボットは自動ビルドシステム。third_party/buildbot参照%0a***'''win''': Windowsビルド関連。.vspropsなどのプロジェクトプロパティやスクリプト。%0a**'''memory''': メモリ関連。ページヒープオプション設定のgflagsを含む。%0a**'''perf/dashboard''': パフォーマンスログ（例：test/startup_test）をデータやグラフに変換。%0a**'''profiles''': ランダムヒストリーデータのジェネレータ。テストプロファイル作成。%0a%0a!!個人的学習計画%0aようやくビルドセットアップが終わり仕事に取り掛かりたい。完全な世界ではコードを書く前にのすべてを読み理解するのだが、無理なのでいくつかの開始のためのアドバイス。%0a幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。若干古いが、コードの連関と理解するのに役立つ。%0a%0a!!もっとも重要な開発文書を読む%0a[[https://www.chromium.org/developers/design-documents/multi-process-architecture|マルチプロセスアーキテクチャ]]%0a%0a[[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|chromeでウェブページを表示]]%0a%0a[[https://www.chromium.org/developers/design-documents/inter-process-communication|プロセス間通信]]%0a%0a[[https://www.chromium.org/developers/design-documents/threading|スレッド]]%0a%0a!!コードイディオムを学ぶ%0a[[https://www.chromium.org/developers/coding-style/important-abstractions-and-data-structures|抽象化とデータ構造]]%0a%0a[[https://www.chromium.org/developers/smart-pointer-guidelines|スマートポインタガイドライン]]%0a%0a[[https://www.chromium.org/developers/chromium-string-usage|chromiumでの文字列]]%0a%0a%0a!!コードの実行順序%0a追加情報と具体例は[[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|ここ]]。%0a%0a!!!アプリケーションスタートアップ%0a#WinMainがchrome/app/main.ccにある。%0a%0a#WinMainはGoogle Update Clientを起動、これは自動アップデータ。次にサブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a%0a#新しくロードされたライブラリがChromeMainをコール、これはchrome_dllプロジェクトのchrome_main.ccにある。%0a%0a#ChromeMainは共通コンポーネントを初期化し、RenderMainへ進むか、BrowserMainに進む。これはコマンドラインオプションによる。%0a%0a#''BrowserMain''は共通のブラウザ初期化を実行する。インストールされているwebappの実行モードやテスト時の自動化システムへの接続モードなど幾つかのモードをもつ。%0a%0a# ''browser_init.cc''内の''LaunchWithProfile''を呼ぶ、ここで新規''Browser''オブジェクトがつくられる（''chrome/browser/ui/browser.cc''). このオブジェクトはアプリケーションのトップレベルウインドウをカプセル化する。最初のタブがこの時追加される。%0a%0a!!!タブのスタートアップ＆最初のナビゲーション%0a# @@chrome/browser/ui/browser.cc@@内の@@Browser::AddTab@@が呼ばれ新規タブがつくられる。%0a%0a# 新規@@TabContents@@オブジェクトがつくられる。(@@browser/tab_contents/tab_contents.cc@@)%0a%0a# @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@に依存して、@@RenderViewHost@@ は新しいレンダラプロセスを起動する%0aか、既存の@@RenderProcessHost@@を再利用する。@@RenderProcessHost@@ブラウザ内のオブジェクトであり１つのレンダラサブプロセスである。%0a%0a# @@NavigationController@@(@@chrome/browser/tab_contents/navigation_controller.cc@@)はタブコンテンツによって所有され、ナビゲートURLを指示される(@@NavigationControllder::LoadURL**@@)。次の”URLバーからのナビゲート”のステップ３からこの先のことが起こる。%0a%0a!!!URLバーからのナビゲート%0a%0a# ユーザがURLバーに何かを入力すると、オートコンプリートがターゲットURLを決め、AutocompleteEdit::OpenURLを呼ぶ（この入力がユーザが入力したそのままの文字列ではない場合がある。例えば検索クエリーの場合）。%0a%0a# ナビゲーションコントローラはURLへナビゲートするよう支持される（NavigationController::LoadURL）%0a%0a# NavigationControllerはページ変遷を記述したNavigationEntryとともにTabContents::Navigateを呼ぶ。必要ならRenderViewHostを作成する。これはレンダープロセスのRenderViewを作成する。これが最初のナビゲーションならRenderViewはまだ存在していない。RenderViewがクラッシュしていた場合も同様。%0a %0a# RenderViewHost::NavigateToEntryを呼ぶ。NavigationControllerはナビゲーションエントリを保存するが、"pending"としてマークされる。なぜならページ遷移がまだ起こるかどうかわからないため（あるいはホストがまだ決められないため）。%0a%0a# RenderViewHost::NavigateToEntryはViewMsg_NavigateをレンダプロセスのRenderViewに送る。%0a%0a# ナビゲートを指示されたら、RenderViewはナビゲートをするかもしれないし、失敗するかもしれないし、他の場所へナビゲートするかもしれない（例えばユーザがリンクをクリックした場合）。RenderViewHostはRenderViewからのViewHostMsg_FrameNavigateを待つ。%0a%0a# ロードがWebKitによって"committed"されたら（サーバがレスポンスを返す）RenderViewはこのメッセージを送りこれはホストのRenderViewHost::OnMsgNavigateで処理される。%0a%0a# NavigationEntryはロード時の情報で更新される。リンクをクリックした場合は、ブラウザはこのURLをまだ見たことがない。ナビゲーションがブラウザによって始められた場合は（スタートアップ時のような）URLを返るリダイレクトが起こるかもしれない。%0a%0a# NavigationControllerはこの新情報でナビゲーションのリストを更新する。%0a%0a!!!Navigations and session history%0a＜途中＞
time=1532579101
author:1532579101=
diff:1532579101:1532579087:=140c140%0a%3c # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@に依存して、@@RenderViewHost@@ は新しいレンダラプロセスを起動する%0a---%0a> # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@ に依存して、 @@RenderViewHost@@ は新しいレンダラプロセスを起動する%0a
host:1532579101=192.168.3.2
author:1532579087=
diff:1532579087:1532579068:=140c140%0a%3c # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@ に依存して、 @@RenderViewHost@@ は新しいレンダラプロセスを起動する%0a---%0a> # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@ に依存して、 @@RenderViewHost@@ は新しいレンダラプロセスを起動する%0a
host:1532579087=192.168.3.2
author:1532579068=
diff:1532579068:1532579035:=140c140%0a%3c # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。 @@SiteInstance@@ に依存して、 @@RenderViewHost@@ は新しいレンダラプロセスを起動する%0a---%0a> # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。@@SiteInstance@@に依存して、@@RenderViewHost@@は新しいレンダラプロセスを起動する%0a
host:1532579068=192.168.3.2
author:1532579035=
diff:1532579035:1532578992:=143c143%0a%3c # @@NavigationController@@(@@chrome/browser/tab_contents/navigation_controller.cc@@)はタブコンテンツによって所有され、ナビゲートURLを指示される(@@NavigationControllder::LoadURL**@@)。次の”URLバーからのナビゲート”のステップ３からこの先のことが起こる。%0a---%0a> # @@NavigationController@@(@@chrome/browser/tab_contents/navigation_controller.cc@@)はタブコンテンツによって所有され、ナビゲートURLを指示される(@NavigationControllder::LoadURL**)。次の”URLバーからのナビゲート”のステップ３からこの先のことが起こる。%0a
host:1532579035=192.168.3.2
author:1532578992=
diff:1532578992:1532578923:=13d12%0a%3c %0a15d13%0a%3c %0a17d14%0a%3c %0a19d15%0a%3c %0a21d16%0a%3c %0a124d118%0a%3c %0a126d119%0a%3c %0a128d120%0a%3c %0a130d121%0a%3c %0a132d122%0a%3c %0a137d126%0a%3c %0a139,142c128%0a%3c %0a%3c # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。@@SiteInstance@@に依存して、@@RenderViewHost@@は新しいレンダラプロセスを起動する%0a%3c か、既存の@@RenderProcessHost@@を再利用する。@@RenderProcessHost@@ブラウザ内のオブジェクトであり１つのレンダラサブプロセスである。%0a%3c %0a---%0a> # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。@@SiteInstance@@に依存して、@@RenderViewHost@@は新しいレンダラプロセスを起動するか、既存の@@RenderProcessHost@@を再利用する。@@RenderProcessHost@@ブラウザ内のオブジェクトであり１つのレンダラサブプロセスである。%0a
host:1532578992=192.168.3.2
author:1532578923=
diff:1532578923:1532578877:=132a133,134%0a> Navigating from the URL bar%0a> %0a151,152d152%0a%3c !!!Navigations and session history%0a%3c ＜途中＞%0a\ No newline at end of file%0a
host:1532578923=192.168.3.2
author:1532578877=
diff:1532578877:1530598391:=133,152c133%0a%3c Navigating from the URL bar%0a%3c %0a%3c # ユーザがURLバーに何かを入力すると、オートコンプリートがターゲットURLを決め、AutocompleteEdit::OpenURLを呼ぶ（この入力がユーザが入力したそのままの文字列ではない場合がある。例えば検索クエリーの場合）。%0a%3c %0a%3c # ナビゲーションコントローラはURLへナビゲートするよう支持される（NavigationController::LoadURL）%0a%3c %0a%3c # NavigationControllerはページ変遷を記述したNavigationEntryとともにTabContents::Navigateを呼ぶ。必要ならRenderViewHostを作成する。これはレンダープロセスのRenderViewを作成する。これが最初のナビゲーションならRenderViewはまだ存在していない。RenderViewがクラッシュしていた場合も同様。%0a%3c  %0a%3c # RenderViewHost::NavigateToEntryを呼ぶ。NavigationControllerはナビゲーションエントリを保存するが、"pending"としてマークされる。なぜならページ遷移がまだ起こるかどうかわからないため（あるいはホストがまだ決められないため）。%0a%3c %0a%3c # RenderViewHost::NavigateToEntryはViewMsg_NavigateをレンダプロセスのRenderViewに送る。%0a%3c %0a%3c # ナビゲートを指示されたら、RenderViewはナビゲートをするかもしれないし、失敗するかもしれないし、他の場所へナビゲートするかもしれない（例えばユーザがリンクをクリックした場合）。RenderViewHostはRenderViewからのViewHostMsg_FrameNavigateを待つ。%0a%3c %0a%3c # ロードがWebKitによって"committed"されたら（サーバがレスポンスを返す）RenderViewはこのメッセージを送りこれはホストのRenderViewHost::OnMsgNavigateで処理される。%0a%3c %0a%3c # NavigationEntryはロード時の情報で更新される。リンクをクリックした場合は、ブラウザはこのURLをまだ見たことがない。ナビゲーションがブラウザによって始められた場合は（スタートアップ時のような）URLを返るリダイレクトが起こるかもしれない。%0a%3c %0a%3c # NavigationControllerはこの新情報でナビゲーションのリストを更新する。%0a%3c %0a---%0a> # 長い%0a
host:1532578877=192.168.3.2
author:1530598391=
diff:1530598391:1530598374:=61a62%0a>  [[Page|Attach:content.png]]%0a
host:1530598391=192.168.3.2
author:1530598374=
diff:1530598374:1530598205:=59,60d58%0a%3c %0a%3c https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code/Content.png%0a
host:1530598374=192.168.3.2
author:1530598205=
diff:1530598205:1530598175:=7c7%0a%3c 詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[デザイン/ウェブページ表示の仕組み]]を参照。%0a---%0a> 詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[デザイン.ウェブページ表示の仕組み]]を参照。%0a
host:1530598205=192.168.3.2
author:1530598175=
diff:1530598175:1530598143:=7c7%0a%3c 詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[デザイン.ウェブページ表示の仕組み]]を参照。%0a---%0a> 詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[どのようにをウェブページ表示するか]]を参照。%0a
host:1530598175=192.168.3.2
author:1530598143=
diff:1530598143:1530427776:=7c7%0a%3c 詳細は[[デザイン/マルチプロセスアーキテクチャ]]や[[どのようにをウェブページ表示するか]]を参照。%0a---%0a> 詳細は[[マルチプロセスアーキテクチャ]]や[[どのようにをウェブページ表示するか]]を参照。%0a
host:1530598143=192.168.3.2
author:1530427776=
diff:1530427776:1530427776:=1,132d0%0a%3c https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code%0a%3c %0a%3c !!全体像%0a%3c %0a%3c Chromiumは３つのパーツに別れる。ブラウザ、レンダラ、Webkitである。ブラウザはメインプロセスであり、UIやI/Oを代表する。レンダラは大体の場合タブごとにもつサブプロセスで構成されブラウザにより制御される。レンダラはWebkitを組み込み、レイアウトやレンダリングを実行する。%0a%3c %0a%3c 詳細は[[マルチプロセスアーキテクチャ]]や[[どのようにをウェブページ表示するか]]を参照。%0a%3c %0a%3c !!ソルーションファイルの簡単な紹介%0a%3c ソルーションファイルは''chrome/chrome.sln''のこと。%0a%3c %0a%3c * スタートアップコードは''App/chrome_dll'と'App/chrome''プロジェクトにある。%0a%3c * 共通のシェアードライブラリのコードは''Libraries/base''プロジェクトにある。ここのコードはすべてのプロジェクトでシェアされ、なるべく小さくなるように保たれている。%0a%3c * ブラウザ専用のコードは''Browser/common''プロジェクトにある。個々のコードはブラウザとレンダラでシェアされる。%0a%3c * Webkitのコードは''Webkit''プロジェクト（リードオンリー）にある。これに加えてGoogleの''Webkit/port''がありWindowsでのインターフェースを提供する。''WebKit(ours)/glue''はそれを組み込むためのものである。%0a%3c * glueはタブごとの''Browser/renderer''と会話する。%0a%3c * ''Browser/browser''プロジェクトはユーザインタフェース、ストレージ、ネットワークリクエストを提供する。%0a%3c %0a%3c !!トップレベルプロジェクト%0a%3c %0a%3c *'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供。%0a%3c *'''apps''': ChromeをパッケージしたApp%0a%3c *'''base''': 下位のプロジェクトで使う共通コード。文字列操作や、汎用ユーティリティ、トップレベルプロジェクトで共通に使うコードはここに置く。%0a%3c *'''breakpad''': Googleのオープンソースクラッシュレポートプロジェクト。Google Codeのsubversionから持ってきている。%0a%3c *'''build''': すべてのプロジェクトで使うビルド関連の設定。%0a%3c *'''cc''': Chromium compositor実装。%0a%3c *'''chrome''': Chromiumブラウザ（下記参照）。%0a%3c *'''chrome/test/data''': 一部テストのためのデータファイル。%0a%3c *'''components''':  Content Moduleをもつcomponentのためのディレクトリ。 directory for components that have the Content Module as the uppermost layer they depend on.%0a%3c *'''content''': マルチプロセスサンドボックスブラウザ（下記参照）の中核コード。%0a%3c *'''device''': 共通な下位レベルハードウェアAPIのクロスプラットフォーム抽象。%0a%3c *'''net''': ネットワーキングライブラリ。See also chrome/common/net.%0a%3c *'''sandbox''': サンドボックスプロジェクト。ハックされたレンダラからのシステム保護を志向。%0a%3c *'''skia''': アンドロイド向けに開発されたSkiaグラフィックライブラリ。アンドロイドツリーからのコピー。 追加のクラスは ui/gfxでSkiaをラップ。%0a%3c *'''sql''': sqliteのラップ。%0a%3c *'''testing''': GoogleのオープンソースGTestのコード。ユニットテストで使う。%0a%3c *'''third_party''': 多くの外部ライブラリ、イメージデコーダや圧縮ライブラリ。Chrome特定のライブラリはchrome/third_party。%0a%3c *'''tools''': %0a%3c *'''ui/gfx''': 共用グラフィッククラス。ChromiumのUIを形成する。%0a%3c *'''ui/views''': UI開発のフレームワーク。レンダリング、レイアウト、イベントハンドリングを提供する。ブラウザのUIはこのシステムで実装する。このディレクトリはベースオブジェクトを含みブラウザ特定のオブジェクトはchrome/browser/ui/viewsにある。%0a%3c *'''url''': GoogleのオープンソースURLパーサ＆正規化ライブラリ%0a%3c *'''v8''': The V8 Javascript library. Google CodeのSubversionからpullしてきた。%0a%3c *'''webkit''': ChromiumのWebkit関連物%0a%3c **'''appcache''':%0a%3c **'''base''':%0a%3c **'''blob''':%0a%3c **'''build''': 残りのプロジェクトのためのプロジェクトファイルや構成。%0a%3c **'''data''': Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a%3c **'''glue''': glueレイヤは埋め込みレイヤ。Webcoreのタイプと我々のタイプの（大体STL）の変換、Webcoreを使うための便利なメソッドの提供。%0a%3c **'''tools'''%0a%3c ***'''layout_tests''': WebCoreレイアウトテストのためのスクリプト。%0a%3c ***'''merge''': WebKitツリーにマージするのと助けるスクリプト。%0a%3c ***'''npapi_layout_test_plugin''': プラグインレイヤテストのための特別なプラグイン。%0a%3c ***'''test_shell''': とてもシンプルなスタンドアロンブラウザ。guleやport codeのテストで使う。%0a%3c %0a%3c %0a%3c  %0a%3c 以下は依存関係の図。下位モジュールは上位モジュールのコードを直接includeできない。（例：contentはchromeのヘッダをインクルードできない）、が、embedder APIでしゃべることはできる。%0a%3c %0a%3c  [[Page|Attach:content.png]]%0a%3c %0a%3c !!contentディレクトリ配下の簡単な説明%0a%3c *'''browser''': アプリがIOやサブプロセスと通信するバックエンド、レンダラとも会話する。%0a%3c *'''common''': マルチプロセス共通で使うファイル（ブラウザとレンダラ、レンダラとプラグインなど）。これはChromiumの特別コードでbaseには当てはまらない。%0a%3c *'''gpu''': GPUプロセスのコード。3D関連。%0a%3c *'''plugin''': 他プロセスでプラグインを実行するコード。%0a%3c *'''ppapi_plugin''': Pepperプラグインプロセスのコード%0a%3c *'''renderer''': １つ１つのタブでのサブプロセスのコード。WebKitを取り込み、IOのためにbrowserと通信。%0a%3c *'''utility''': サンドボックス化されたプロセスでランダムなオペレーションを実行するコード。browserは信頼できないデータのオペレーションに使う。%0a%3c *'''worker''': HTML5 Web Workersを実行するコード。%0a%3c %0a%3c !!chromeディレクトリ配下の簡単な説明%0a%3c *'''app''': プログラムのもっとも基本的レベル。スタートアップで実行され、browserやrendererに処理を投げる。chrome.exeやchrome.dllのプロジェクトを含む。リソース以外には基本的に触る必要はない。%0a%3c **'''locales''': ローカライズされたDLLのビルドする。%0a%3c **'''resources''': アイコンやカーソル。%0a%3c **'''theme''': ウインドウのテーマイメージ。%0a%3c *'''browser''': メインウインドウを含むフロントエンドUI。アプリにとってはIOやstorageのバックエンド。rendererと会話しウェブページを管理。%0a%3c **'''ui''': モデル、ビュー、コントローラのコード、UI機能。%0a%3c *'''common''': chromeモジュールでbrowserとrendererでつかう共通ファイル。%0a%3c **'''net''': トップレベルモジュールnetへのChromium特定物。browser/netとマージされるべき。%0a%3c *'''installer''': MSIパッケージをつくる。%0a%3c *'''renderer''': レンダラプロセスで走るChrome特定のコード。autofillや翻訳機能をcontentモジュールに追加。%0a%3c *'''third_party''': Chromium特定のサードパーティライブラリ。他のサードパーティライブラリはトップレベルのthird_partyにある。%0a%3c *'''tools''': %0a%3c **'''build''': ビルド関連%0a%3c ***'''buildbot''': ビルドボット構成。ビルドボットは自動ビルドシステム。third_party/buildbot参照%0a%3c ***'''win''': Windowsビルド関連。.vspropsなどのプロジェクトプロパティやスクリプト。%0a%3c **'''memory''': メモリ関連。ページヒープオプション設定のgflagsを含む。%0a%3c **'''perf/dashboard''': パフォーマンスログ（例：test/startup_test）をデータやグラフに変換。%0a%3c **'''profiles''': ランダムヒストリーデータのジェネレータ。テストプロファイル作成。%0a%3c %0a%3c !!個人的学習計画%0a%3c ようやくビルドセットアップが終わり仕事に取り掛かりたい。完全な世界ではコードを書く前にのすべてを読み理解するのだが、無理なのでいくつかの開始のためのアドバイス。%0a%3c 幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。若干古いが、コードの連関と理解するのに役立つ。%0a%3c %0a%3c !!もっとも重要な開発文書を読む%0a%3c [[https://www.chromium.org/developers/design-documents/multi-process-architecture|マルチプロセスアーキテクチャ]]%0a%3c %0a%3c [[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|chromeでウェブページを表示]]%0a%3c %0a%3c [[https://www.chromium.org/developers/design-documents/inter-process-communication|プロセス間通信]]%0a%3c %0a%3c [[https://www.chromium.org/developers/design-documents/threading|スレッド]]%0a%3c %0a%3c !!コードイディオムを学ぶ%0a%3c [[https://www.chromium.org/developers/coding-style/important-abstractions-and-data-structures|抽象化とデータ構造]]%0a%3c %0a%3c [[https://www.chromium.org/developers/smart-pointer-guidelines|スマートポインタガイドライン]]%0a%3c %0a%3c [[https://www.chromium.org/developers/chromium-string-usage|chromiumでの文字列]]%0a%3c %0a%3c %0a%3c !!コードの実行順序%0a%3c 追加情報と具体例は[[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|ここ]]。%0a%3c %0a%3c !!!アプリケーションスタートアップ%0a%3c #WinMainがchrome/app/main.ccにある。%0a%3c #WinMainはGoogle Update Clientを起動、これは自動アップデータ。次にサブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a%3c #新しくロードされたライブラリがChromeMainをコール、これはchrome_dllプロジェクトのchrome_main.ccにある。%0a%3c #ChromeMainは共通コンポーネントを初期化し、RenderMainへ進むか、BrowserMainに進む。これはコマンドラインオプションによる。%0a%3c #''BrowserMain''は共通のブラウザ初期化を実行する。インストールされているwebappの実行モードやテスト時の自動化システムへの接続モードなど幾つかのモードをもつ。%0a%3c # ''browser_init.cc''内の''LaunchWithProfile''を呼ぶ、ここで新規''Browser''オブジェクトがつくられる（''chrome/browser/ui/browser.cc''). このオブジェクトはアプリケーションのトップレベルウインドウをカプセル化する。最初のタブがこの時追加される。%0a%3c %0a%3c !!!タブのスタートアップ＆最初のナビゲーション%0a%3c # @@chrome/browser/ui/browser.cc@@内の@@Browser::AddTab@@が呼ばれ新規タブがつくられる。%0a%3c # 新規@@TabContents@@オブジェクトがつくられる。(@@browser/tab_contents/tab_contents.cc@@)%0a%3c # @@TabContents@@は@@RenderViewHostManager@@の初期化関数経由で@@RenderViewHost@@をつくる@@(@@chrome/browser/renderer_host/render_view_host.cc@@)。@@SiteInstance@@に依存して、@@RenderViewHost@@は新しいレンダラプロセスを起動するか、既存の@@RenderProcessHost@@を再利用する。@@RenderProcessHost@@ブラウザ内のオブジェクトであり１つのレンダラサブプロセスである。%0a%3c # @@NavigationController@@(@@chrome/browser/tab_contents/navigation_controller.cc@@)はタブコンテンツによって所有され、ナビゲートURLを指示される(@NavigationControllder::LoadURL**)。次の”URLバーからのナビゲート”のステップ３からこの先のことが起こる。%0a%3c %0a%3c !!!URLバーからのナビゲート%0a%3c %0a%3c # 長い%0a
host:1530427776=192.168.3.2
