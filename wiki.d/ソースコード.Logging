version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko
author=
charset=UTF-8
csum=
ctime=1529823581
host=192.168.3.2
name=ソースコード.Logging
rev=11
targets=
text=!\base\logging.h%0a%0ahttps://cs.chromium.org/chromium/src/base/logging.h%0a%0a!!CHECKマクロ%0aデバッグモードとリリースモードの両方で動く。CHECKが失敗したときはLOG(FATAL)が実行され、クラッシュダンプが作成されプロセスが強制終了される（デバッガがいないとき）。%0a%0a!!VLOG%0aVervoseレベルを指定したログ。起動時に--v=2とした場合、VLOG(2)がロギングされる。%0a=cpp [=%0aVLOG(2) %3c%3c "I'm printed when you run the program with --v=2 or more";%0a=]%0a%0a%0a%0a!オプションのメッセージ能力%0aAssertionの失敗メッセージや致命エラーはアプリが終了する前にダイアログボックスで表示される。しかしこのUIはメッセージループを作成し、それによりメッセージが処理され、生存しているウインドウにメッセージが配信されるかもしれない。アサートダイアログが表示されているときはアプリケーションは悪い状態にあるので、これらのメッセージは処理されずにダイアログが固まるかもしれないしアプリが暴走するかもしれない。%0a%0aそれゆえに、エラーダイアログは別プロセスで表示したほうが良い。ロギングシステムが致命エラーダイアログを表示するとき、実行ファイルと同じディレクトリから"DebugMessage.exe"を探すし、コマンドラインにメッセージを渡して起動する。パースを簡単にするためにアプリ名は含まれない。%0a%0aDebugMessage.exeのコードは１行で、WinMainで以下を行う。 %0a%0a=cpp [=%0aMessageBox(NULL, GetCommandLineW(), L"Fatal Error", 0);%0a=]%0a%0aもしDebugMessage.exeが見つからなければ、ロギングコードは通常のMessageBoxを表示する。これは上述のような問題を起こすかもしれない。%0a%0a%0a!手順%0aログのための多くのマクロ。ログを取るにはLOG(%3cある重要度レベル>)にストリームを流し込む。例えば以下：%0a%0a=cpp [=%0aLOG(INFO) %3c%3c "Found " %3c%3c num_cookies %3c%3c " cookies";%0a=]%0a%0a条件ログもできる：%0a%0a=cpp [=%0aLOG_IF(INFO, num_cookies > 10) %3c%3c "Got lots of cookies";%0a=]%0a%0aCHECK(condition)マクロはデバッグビルドとリリースビルドで有効で、デバッガが存在しないときはLOG(FATAL)を実行し、これはプロセスを強制終了し、クラッシュダンプを作成する。%0a%0aデバッグモードのログマクロもある。上記のやつと似ている：%0a%0a=cpp [=%0aDLOG(INFO) %3c%3c "Found cookies";%0a%0aDLOG_IF(INFO, num_cookies > 10) %3c%3c "Got lots of cookies";%0a=]%0a%0aすべてのデバッグモードログは非デバッグモードでは消えてなくなる。LOG_IFと開発フラグは同時に使える。なぜならコードはcan be compiled away sometimes.%0a%0a以下のマクロもある。%0a%0a=cpp [=%0aLOG_ASSERT(assertion);%0aDLOG_ASSERT(assertion);%0a=]%0a%0aこれは @@{,D}LOG_IF(FATAL, assert fails) %3c%3c assertion@@ の糖衣構文である。%0a%0a「冗長レベル」のロギングマクロもある。以下のようなもの：%0a=cpp [=%0aVLOG(1) %3c%3c "I'm printed when you run the program with --v=1 or more";%0aVLOG(2) %3c%3c "I'm printed when you run the program with --v=2 or more";%0a=]%0a%0aこれらはINFOログレベルでログをとる。%0a冗長ログはモジュールごとに有効にすることもできる。例えば以下：%0a%0a=cpp [=%0a--vmodule=profile=2,icon_loader=1,browser_*=3,*/chromeos/*=4 --v=0%0a=]%0a%0aこれは以下をもたらす。%0a*a. @@VLOG(2)@@とより低いメッセージは@@profile.{h,cc}@@から取られる。%0a*b. @@VLOG(1)@@とより低いメッセージは@@icon_loader.{h,cc}から取られる。%0a*c. @@VLOG(3)@@とより低いメッセージはプリフィクス@@browser@@から取られる。%0a*d. @@VLOG(4)@@とより低いメッセージは'''chromeos'''ディレクトリから取られる。%0a*e. @@VLOG(0)@@とより低いメッセージはどこからでも取られる。%0a%0a// The wildcarding functionality shown by (c) supports both '*' (match%0a// 0 or more characters) and '?' (match any single character)%0a// wildcards.  Any pattern containing a forward or backward slash will%0a// be tested against the whole pathname and not just the module.%0a// E.g., "*/foo/bar/*=2" would change the logging level for all code%0a// in source files under a "foo/bar" directory.%0a//%0a// There's also VLOG_IS_ON(n) "verbose level" condition macro. To be used as%0a//%0a//   if (VLOG_IS_ON(2)) {%0a//     // do some logging preparation and logging%0a//     // that can't be accomplished with just VLOG(2) %3c%3c ...;%0a//   }%0a//%0a// There is also a VLOG_IF "verbose level" condition macro for sample%0a// cases, when some extra computation and preparation for logs is not%0a// needed.%0a//%0a//   VLOG_IF(1, (size > 1024))%0a//      %3c%3c "I'm printed when size is more than 1024 and when you run the "%0a//         "program with --v=1 or more";%0a//%0a// We also override the standard 'assert' to use 'DLOG_ASSERT'.%0a//%0a// Lastly, there is:%0a//%0a//   PLOG(ERROR) %3c%3c "Couldn't do foo";%0a//   DPLOG(ERROR) %3c%3c "Couldn't do foo";%0a//   PLOG_IF(ERROR, cond) %3c%3c "Couldn't do foo";%0a//   DPLOG_IF(ERROR, cond) %3c%3c "Couldn't do foo";%0a//   PCHECK(condition) %3c%3c "Couldn't do foo";%0a//   DPCHECK(condition) %3c%3c "Couldn't do foo";%0a//%0a// which append the last system error to the message in string form (taken from%0a// GetLastError() on Windows and errno on POSIX).%0a//%0a// The supported severity levels for macros that allow you to specify one%0a// are (in increasing order of severity) INFO, WARNING, ERROR, and FATAL.%0a//%0a// Very important: logging a message at the FATAL severity level causes%0a// the program to terminate (after the message is logged).%0a//%0a// There is the special severity of DFATAL, which logs FATAL in debug mode,%0a// ERROR in normal mode.
time=1532549524
author:1532549524=
diff:1532549524:1532549472:=78,82c78,82%0a%3c *a. @@VLOG(2)@@とより低いメッセージは@@profile.{h,cc}@@から取られる。%0a%3c *b. @@VLOG(1)@@とより低いメッセージは@@icon_loader.{h,cc}から取られる。%0a%3c *c. @@VLOG(3)@@とより低いメッセージはプリフィクス@@browser@@から取られる。%0a%3c *d. @@VLOG(4)@@とより低いメッセージは'''chromeos'''ディレクトリから取られる。%0a%3c *e. @@VLOG(0)@@とより低いメッセージはどこからでも取られる。%0a---%0a> a. @@VLOG(2)@@とより低いメッセージは@@profile.{h,cc}@@から取られる。%0a> b. @@VLOG(1)@@とより低いメッセージは@@icon_loader.{h,cc}から取られる。%0a> c. @@VLOG(3)@@とより低いメッセージはプリフィクス@@browser@@から取られる。%0a> d. @@VLOG(4)@@とより低いメッセージは'''chromeos'''ディレクトリから取られる。%0a> e. @@VLOG(0)@@とより低いメッセージはどこからでも取られる。%0a
host:1532549524=192.168.3.2
author:1532549472=
diff:1532549472:1532549413:=22d21%0a%3c %0a26d24%0a%3c %0a32d29%0a%3c %0a38d34%0a%3c %0a56d51%0a%3c %0a61d55%0a%3c %0a72d65%0a%3c %0a76d68%0a%3c %0a
host:1532549472=192.168.3.2
author:1532549413=
diff:1532549413:1532549386:=22,24c22,23%0a%3c =cpp [=%0a%3c MessageBox(NULL, GetCommandLineW(), L"Fatal Error", 0);%0a%3c =]%0a---%0a> //   MessageBox(NULL, GetCommandLineW(), L"Fatal Error", 0);%0a> %0a
host:1532549413=192.168.3.2
author:1532549386=
diff:1532549386:1532549361:=16a17%0a> // -----------------------------%0a
host:1532549386=192.168.3.2
author:1532549361=
diff:1532549361:1532549347:=12,119c12%0a%3c =]%0a%3c %0a%3c %0a%3c %0a%3c !オプションのメッセージ能力%0a%3c // -----------------------------%0a%3c Assertionの失敗メッセージや致命エラーはアプリが終了する前にダイアログボックスで表示される。しかしこのUIはメッセージループを作成し、それによりメッセージが処理され、生存しているウインドウにメッセージが配信されるかもしれない。アサートダイアログが表示されているときはアプリケーションは悪い状態にあるので、これらのメッセージは処理されずにダイアログが固まるかもしれないしアプリが暴走するかもしれない。%0a%3c %0a%3c それゆえに、エラーダイアログは別プロセスで表示したほうが良い。ロギングシステムが致命エラーダイアログを表示するとき、実行ファイルと同じディレクトリから"DebugMessage.exe"を探すし、コマンドラインにメッセージを渡して起動する。パースを簡単にするためにアプリ名は含まれない。%0a%3c %0a%3c DebugMessage.exeのコードは１行で、WinMainで以下を行う。 %0a%3c //   MessageBox(NULL, GetCommandLineW(), L"Fatal Error", 0);%0a%3c %0a%3c もしDebugMessage.exeが見つからなければ、ロギングコードは通常のMessageBoxを表示する。これは上述のような問題を起こすかもしれない。%0a%3c %0a%3c %0a%3c !手順%0a%3c ログのための多くのマクロ。ログを取るにはLOG(%3cある重要度レベル>)にストリームを流し込む。例えば以下：%0a%3c =cpp [=%0a%3c LOG(INFO) %3c%3c "Found " %3c%3c num_cookies %3c%3c " cookies";%0a%3c =]%0a%3c %0a%3c 条件ログもできる：%0a%3c =cpp [=%0a%3c LOG_IF(INFO, num_cookies > 10) %3c%3c "Got lots of cookies";%0a%3c =]%0a%3c %0a%3c CHECK(condition)マクロはデバッグビルドとリリースビルドで有効で、デバッガが存在しないときはLOG(FATAL)を実行し、これはプロセスを強制終了し、クラッシュダンプを作成する。%0a%3c %0a%3c デバッグモードのログマクロもある。上記のやつと似ている：%0a%3c %0a%3c =cpp [=%0a%3c DLOG(INFO) %3c%3c "Found cookies";%0a%3c %0a%3c DLOG_IF(INFO, num_cookies > 10) %3c%3c "Got lots of cookies";%0a%3c =]%0a%3c %0a%3c すべてのデバッグモードログは非デバッグモードでは消えてなくなる。LOG_IFと開発フラグは同時に使える。なぜならコードはcan be compiled away sometimes.%0a%3c %0a%3c 以下のマクロもある。%0a%3c =cpp [=%0a%3c LOG_ASSERT(assertion);%0a%3c DLOG_ASSERT(assertion);%0a%3c =]%0a%3c これは @@{,D}LOG_IF(FATAL, assert fails) %3c%3c assertion@@ の糖衣構文である。%0a%3c %0a%3c 「冗長レベル」のロギングマクロもある。以下のようなもの：%0a%3c =cpp [=%0a%3c VLOG(1) %3c%3c "I'm printed when you run the program with --v=1 or more";%0a%3c VLOG(2) %3c%3c "I'm printed when you run the program with --v=2 or more";%0a%3c =]%0a%3c %0a%3c これらはINFOログレベルでログをとる。%0a%3c 冗長ログはモジュールごとに有効にすることもできる。例えば以下：%0a%3c =cpp [=%0a%3c --vmodule=profile=2,icon_loader=1,browser_*=3,*/chromeos/*=4 --v=0%0a%3c =]%0a%3c これは以下をもたらす。%0a%3c a. @@VLOG(2)@@とより低いメッセージは@@profile.{h,cc}@@から取られる。%0a%3c b. @@VLOG(1)@@とより低いメッセージは@@icon_loader.{h,cc}から取られる。%0a%3c c. @@VLOG(3)@@とより低いメッセージはプリフィクス@@browser@@から取られる。%0a%3c d. @@VLOG(4)@@とより低いメッセージは'''chromeos'''ディレクトリから取られる。%0a%3c e. @@VLOG(0)@@とより低いメッセージはどこからでも取られる。%0a%3c %0a%3c // The wildcarding functionality shown by (c) supports both '*' (match%0a%3c // 0 or more characters) and '?' (match any single character)%0a%3c // wildcards.  Any pattern containing a forward or backward slash will%0a%3c // be tested against the whole pathname and not just the module.%0a%3c // E.g., "*/foo/bar/*=2" would change the logging level for all code%0a%3c // in source files under a "foo/bar" directory.%0a%3c //%0a%3c // There's also VLOG_IS_ON(n) "verbose level" condition macro. To be used as%0a%3c //%0a%3c //   if (VLOG_IS_ON(2)) {%0a%3c //     // do some logging preparation and logging%0a%3c //     // that can't be accomplished with just VLOG(2) %3c%3c ...;%0a%3c //   }%0a%3c //%0a%3c // There is also a VLOG_IF "verbose level" condition macro for sample%0a%3c // cases, when some extra computation and preparation for logs is not%0a%3c // needed.%0a%3c //%0a%3c //   VLOG_IF(1, (size > 1024))%0a%3c //      %3c%3c "I'm printed when size is more than 1024 and when you run the "%0a%3c //         "program with --v=1 or more";%0a%3c //%0a%3c // We also override the standard 'assert' to use 'DLOG_ASSERT'.%0a%3c //%0a%3c // Lastly, there is:%0a%3c //%0a%3c //   PLOG(ERROR) %3c%3c "Couldn't do foo";%0a%3c //   DPLOG(ERROR) %3c%3c "Couldn't do foo";%0a%3c //   PLOG_IF(ERROR, cond) %3c%3c "Couldn't do foo";%0a%3c //   DPLOG_IF(ERROR, cond) %3c%3c "Couldn't do foo";%0a%3c //   PCHECK(condition) %3c%3c "Couldn't do foo";%0a%3c //   DPCHECK(condition) %3c%3c "Couldn't do foo";%0a%3c //%0a%3c // which append the last system error to the message in string form (taken from%0a%3c // GetLastError() on Windows and errno on POSIX).%0a%3c //%0a%3c // The supported severity levels for macros that allow you to specify one%0a%3c // are (in increasing order of severity) INFO, WARNING, ERROR, and FATAL.%0a%3c //%0a%3c // Very important: logging a message at the FATAL severity level causes%0a%3c // the program to terminate (after the message is logged).%0a%3c //%0a%3c // There is the special severity of DFATAL, which logs FATAL in debug mode,%0a%3c // ERROR in normal mode.%0a\ No newline at end of file%0a---%0a> =]%0a\ No newline at end of file%0a
host:1532549361=192.168.3.2
author:1532549347=
diff:1532549347:1529823925:=2,3d1%0a%3c %0a%3c https://cs.chromium.org/chromium/src/base/logging.h%0a
host:1532549347=192.168.3.2
author:1529823925=
diff:1529823925:1529823732:=4,10c4%0a%3c デバッグモードとリリースモードの両方で動く。CHECKが失敗したときはLOG(FATAL)が実行され、クラッシュダンプが作成されプロセスが強制終了される（デバッガがいないとき）。%0a%3c %0a%3c !!VLOG%0a%3c Vervoseレベルを指定したログ。起動時に--v=2とした場合、VLOG(2)がロギングされる。%0a%3c =cpp [=%0a%3c VLOG(2) %3c%3c "I'm printed when you run the program with --v=2 or more";%0a%3c =]%0a\ No newline at end of file%0a---%0a> デバッグモードとリリースモードの両方で動く。CHECKが失敗したときはLOG(FATAL)が実行され、クラッシュダンプが作成されプロセスが強制終了される（デバッガがいないとき）。%0a\ No newline at end of file%0a
host:1529823925=192.168.3.2
author:1529823732=
diff:1529823732:1529823625:=3,4d2%0a%3c !!CHECKマクロ%0a%3c デバッグモードとリリースモードの両方で動く。CHECKが失敗したときはLOG(FATAL)が実行され、クラッシュダンプが作成されプロセスが強制終了される（デバッガがいないとき）。%0a\ No newline at end of file%0a
host:1529823732=192.168.3.2
author:1529823625=
diff:1529823625:1529823596:=1c1%0a%3c !\base\logging.h%0a---%0a> \base\logging.h%0a
host:1529823625=192.168.3.2
author:1529823596=
diff:1529823596:1529823581:=
host:1529823596=192.168.3.2
author:1529823581=
diff:1529823581:1529823581:=1,2d0%0a%3c \base\logging.h%0a%3c %0a
host:1529823581=192.168.3.2
