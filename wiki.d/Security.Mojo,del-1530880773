version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530627364
host=192.168.3.2
name=Security.Mojo
rev=10
targets=
text=https://chromium.googlesource.com/chromium/src/+/master/docs/security/mojo.md%0a%0a!Mojo "スタイル" ガイド%0aMojoはChromiumの新しいIPCシステムで多くの役に立つ抽象化を提供する。この抽象化によりプロセス間通信のコードが簡単にかけるし、複雑な仕組みも書くことができる。以下はMojoとIPCレビューアの推奨プラクティスである。%0a%0a質問や、気になったことや提案があれば mojo@chromium.org まで%0a%0a@@過去のIPCについては、[[https://www.chromium.org/Home/chromium-security/education/security-tips-for-ipc|security tips for IPC]]を参照@@%0a%0a!コンテンツ%0a%0a!単純性%0a簡単なインタフェースを書いてみよう。同期して維持されるプロセス状態を最小化する必要がある。%0a%0a''いい例''%0a=cpp [=%0ainterface TeleporterFactory {%0a  Create(Location start, Location end) => (Teleporter);%0a};%0a%0ainterface Teleporter {%0a  TeleportGoat(Goat) = ();%0a};%0a=]%0a%0a''悪い例''%0a=cpp [=%0ainterface Teleporter {%0a  // 悪い点：TeleportGoat()を呼ぶ前に２つのLocation関数をコールする必要があり、%0a  // コメントが必要になる。%0a  //%0a  // 加えて、信頼性のないプロセス同士が通信した場合、実装はLocationオブジェクトが%0a  // 拘束されていないときの対応を考えないとならない。%0a  SetStart(Location);%0a  SetEnd(Location);%0a  TeleportGoat(Goat) = ();%0a};%0a=]%0a%0a同様に、メソッドにフォーカスしてみよう。オプションの型を利用しすぎないように。%0a%0a''いい例''%0a=cpp [=%0astruct TeleporterStats {%0a  AnimalStats animal_stats;%0a  FungiStats fungi_stats;%0a  GoatStats goat_stats;%0a  PlantStats plant_stats;%0a};%0a%0ainterface Teleporter {%0a  TeleportAnimal(Animal) => ();%0a  TeleportFungi(Fungi) => ();%0a  TeleportGoat(Goat) = ();%0a  TeleportPlant(Plant) => ();%0a%0a  // TeleportStats is only non-null if success is true.%0a  GetStats() => (bool success, TeleporterStats?);%0a};%0a=]%0a%0a''悪い例''%0a=cpp [=%0ainterface Teleporter {%0a  // ４つのオプション引数の意図が不明：この関数はいくつもの違う方のオブジェクトをテレポートするのか%0a  // １つのnullでない引数をオブジェクトをテレポートするのか不明%0a  Teleport(Animal?, Fungi?, Goat?, Plant?) => ();%0a%0a  // successがtrueのとき、すべてのstatsを返すのか？またはteleporterがすでに持っているものだけ%0a  // を返すのか？意図が不明。異種の値を１つの構造にラップしたほうが明確になる。%0a  GetStats() =>%0a      (bool success, AnimalStats?, FungiStats?, PlantStats?, FungiStats?);%0a};%0a=]%0a%0a＜途中＞%0a
time=1530629260
author:1530629260=
diff:1530629260:1530629108:=8c8%0a%3c @@過去のIPCについては、[[https://www.chromium.org/Home/chromium-security/education/security-tips-for-ipc|security tips for IPC]]を参照@@%0a---%0a> @@過去のIPCについては、[[https://www.chromium.org/Home/chromium-security/education/security-tips-for-ipc|security tips for IPC]]を参照。%0a
host:1530629260=192.168.3.2
author:1530629108=
diff:1530629108:1530628861:=76d75%0a%3c ＜途中＞%0a
host:1530629108=192.168.3.2
author:1530628861=
diff:1530628861:1530628838:=41d40%0a%3c %0a61d59%0a%3c %0a
host:1530628861=192.168.3.2
author:1530628838=
diff:1530628838:1530628234:=39,73d38%0a%3c %0a%3c 同様に、メソッドにフォーカスしてみよう。オプションの型を利用しすぎないように。%0a%3c ''いい例''%0a%3c =cpp [=%0a%3c struct TeleporterStats {%0a%3c   AnimalStats animal_stats;%0a%3c   FungiStats fungi_stats;%0a%3c   GoatStats goat_stats;%0a%3c   PlantStats plant_stats;%0a%3c };%0a%3c %0a%3c interface Teleporter {%0a%3c   TeleportAnimal(Animal) => ();%0a%3c   TeleportFungi(Fungi) => ();%0a%3c   TeleportGoat(Goat) = ();%0a%3c   TeleportPlant(Plant) => ();%0a%3c %0a%3c   // TeleportStats is only non-null if success is true.%0a%3c   GetStats() => (bool success, TeleporterStats?);%0a%3c };%0a%3c =]%0a%3c ''悪い例''%0a%3c =cpp [=%0a%3c interface Teleporter {%0a%3c   // ４つのオプション引数の意図が不明：この関数はいくつもの違う方のオブジェクトをテレポートするのか%0a%3c   // １つのnullでない引数をオブジェクトをテレポートするのか不明%0a%3c   Teleport(Animal?, Fungi?, Goat?, Plant?) => ();%0a%3c %0a%3c   // successがtrueのとき、すべてのstatsを返すのか？またはteleporterがすでに持っているものだけ%0a%3c   // を返すのか？意図が不明。異種の値を１つの構造にラップしたほうが明確になる。%0a%3c   GetStats() =>%0a%3c       (bool success, AnimalStats?, FungiStats?, PlantStats?, FungiStats?);%0a%3c };%0a%3c =]%0a%3c %0a
host:1530628838=192.168.3.2
author:1530628234=
diff:1530628234:1530627932:=29,30c29,30%0a%3c   // 悪い点：TeleportGoat()を呼ぶ前に２つのLocation関数をコールする必要があり、%0a%3c   // コメントが必要になる。%0a---%0a>   // Bad: comments will need to explicitly call out that both locations need to%0a>   // be bound before calling TeleportGoat()!%0a32,33c32,34%0a%3c   // 加えて、信頼性のないプロセス同士が通信した場合、実装はLocationオブジェクトが%0a%3c   // 拘束されていないときの対応を考えないとならない。%0a---%0a>   // In addition, if untrustworthy processes can talk to trustworthy processes,%0a>   // the Teleporter implementation will need to also handle the case where the%0a>   // Location objects are not yet bound.%0a
host:1530628234=192.168.3.2
author:1530627932=
diff:1530627932:1530627921:=27c27%0a%3c =cpp [=%0a---%0a> =mojo [=%0a
host:1530627932=192.168.3.2
author:1530627921=
diff:1530627921:1530627869:=22,36d21%0a%3c   TeleportGoat(Goat) = ();%0a%3c };%0a%3c =]%0a%3c %0a%3c ''悪い例''%0a%3c =mojo [=%0a%3c interface Teleporter {%0a%3c   // Bad: comments will need to explicitly call out that both locations need to%0a%3c   // be bound before calling TeleportGoat()!%0a%3c   //%0a%3c   // In addition, if untrustworthy processes can talk to trustworthy processes,%0a%3c   // the Teleporter implementation will need to also handle the case where the%0a%3c   // Location objects are not yet bound.%0a%3c   SetStart(Location);%0a%3c   SetEnd(Location);%0a
host:1530627921=192.168.3.2
author:1530627869=
diff:1530627869:1530627575:=8,24d7%0a%3c @@過去のIPCについては、[[https://www.chromium.org/Home/chromium-security/education/security-tips-for-ipc|security tips for IPC]]を参照。%0a%3c %0a%3c !コンテンツ%0a%3c %0a%3c !単純性%0a%3c 簡単なインタフェースを書いてみよう。同期して維持されるプロセス状態を最小化する必要がある。%0a%3c %0a%3c ''いい例''%0a%3c =cpp [=%0a%3c interface TeleporterFactory {%0a%3c   Create(Location start, Location end) => (Teleporter);%0a%3c };%0a%3c %0a%3c interface Teleporter {%0a%3c   TeleportGoat(Goat) = ();%0a%3c };%0a%3c =]%0a
host:1530627869=192.168.3.2
author:1530627575=
diff:1530627575:1530627364:=2,7d1%0a%3c %0a%3c !Mojo "スタイル" ガイド%0a%3c MojoはChromiumの新しいIPCシステムで多くの役に立つ抽象化を提供する。この抽象化によりプロセス間通信のコードが簡単にかけるし、複雑な仕組みも書くことができる。以下はMojoとIPCレビューアの推奨プラクティスである。%0a%3c %0a%3c 質問や、気になったことや提案があれば mojo@chromium.org まで%0a%3c %0a
host:1530627575=192.168.3.2
author:1530627364=
diff:1530627364:1530627364:=1d0%0a%3c https://chromium.googlesource.com/chromium/src/+/master/docs/security/mojo.md%0a
host:1530627364=192.168.3.2
