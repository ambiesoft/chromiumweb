version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530597663
host=192.168.3.2
name=デザイン.マルチプロセスリソースローディング
rev=8
targets=デザイン.マルチプロセスアーキテクチャ
text=http://dev.chromium.org/developers/design-documents/multi-process-resource-loading%0a%0a%25block red%25[@ %0aここの情報は古い%0a@]%0a%0a!背景%0aすべてのネットワーク通信はメインのブラウザプロセスでハンドルされる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。'''HTTP/1.1'''で多くの接続を張りたく無いのもある。%0a%0a!全体像%0a[[デザイン/マルチプロセスアーキテクチャ|マルチプロセス]]構造は以下のような３つの層で考えられる。最下層はBlinkエンジンでレンダリングを行う。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a%0ahttps://www.chromium.org/_/rsrc/1220197833456/developers/design-documents/multi-process-resource-loading/Resource-loading.png%0a%0a!Blink%0a'''Blink'''は'''ResouceLoader'''オブジェクトを持ち、データ取得の責任を持つ。それぞれのローダはリクエストごとの'''WebURLLoader'''を持つ。%0a%0a'''ResourceLoader'''は'''WebURLLoaderClient'''インタフェースを実装、これはコールバックインターフェースで、レンダラが'''Blink'''にデータをディスパッチする。%0a%0a!レンダラ%0aレンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスで１つだけもつ'''ResourceDispatcher'''を使い一意のリクエストIDを作成し、リクエストを'''IPC'''でブラウザに転送する。ブラウザからの返答はこのリクエストIDを参照していて、リソースディスパッチャーによって'''RequestPeer'''オブジェクト（'''WebURLRequestImpl'''）に戻される。%0a%0a!ブラウザ%0a%0aブラウザ内の'''RenderProcessHost'''オブジェクトはレンダラからIPCリクエストを受けとり、グローバルな'''ResourceDispatcherHost'''へ転送する。using a pointer to the render process host (specifically, an implementation of ResourceDispatcherHost::Receiver) and the request ID generated by the renderer to uniquely identify the request.%0a%0aそれぞれのリクエストは'''URLRequest'''オブジェクトに変換され、内部の'''URLRequestJob'''へ転送され、プロトコルごとの処理が行われる。'''URLRequest'''が通知を生成したとき、それの'''ResourceDispatcherHost::Receiver''' と '''request ID'''によって'''RenderProcessHost'''が見つけされて、レンダラーに送り返される。レンダラによって生成されたIDは保存されているので、すべてのレスポンスを特定のリクエスト（最初はBlinkで生成された）と関連付けることができる。%0a%0a%0a!クッキー%0aすべてのクッキーは'''/net/base'''内の'''CookieMonster'''オブジェクトでハンドルされる。クッキーは他のブラウザのネットワークスタック（'''WinINET'''や'''Necko'''）と共有されない。クッキーモンスターはブラウザプロセス内にあり、すべてのネットワークリクエストをハンドルする。なぜならクッキーはすべてのタブ間で同じでないとならないから。%0a%0aページはドキュメントに対して'''document.cookie'''でクッキーを要求できる。これが起こったとき、レンダラからブラウザへのクッキーをリクエストする同期メッセージが送られる。ブラウザがクッキーを処理している間、'''Blink'''のスレッドは待機させられる。レンダラのIOスレッドがレスポンスを受け取ったとき、待機が終了し、受け取った結果を'''JavaScript'''エンジンに渡す。%0a%0a
time=1532414582
author:1532414582=
diff:1532414582:1532414474:=21,22c21,22%0a%3c レンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスで１つだけもつ'''ResourceDispatcher'''を使い一意のリクエストIDを作成し、リクエストを'''IPC'''でブラウザに転送する。ブラウザからの返答はこのリクエストIDを参照していて、リソースディスパッチャーによって'''RequestPeer'''オブジェクト（'''WebURLRequestImpl'''）に戻される。%0a%3c %0a---%0a> レンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスで１つだけもつResourceDispatcherを使い一意のリクエストIDを作成し、リクエストをIPCでブラウザに転送する。ブラウザからの返答はこのリクエストIDを参照していて、リソースディスパッチャーによってRequestPeerオブジェクト（WebURLRequestImpl）に戻される。%0a> %0a25,29c25,29%0a%3c ブラウザ内の'''RenderProcessHost'''オブジェクトはレンダラからIPCリクエストを受けとり、グローバルな'''ResourceDispatcherHost'''へ転送する。using a pointer to the render process host (specifically, an implementation of ResourceDispatcherHost::Receiver) and the request ID generated by the renderer to uniquely identify the request.%0a%3c %0a%3c それぞれのリクエストは'''URLRequest'''オブジェクトに変換され、内部の'''URLRequestJob'''へ転送され、プロトコルごとの処理が行われる。'''URLRequest'''が通知を生成したとき、それの'''ResourceDispatcherHost::Receiver''' と '''request ID'''によって'''RenderProcessHost'''が見つけされて、レンダラーに送り返される。レンダラによって生成されたIDは保存されているので、すべてのレスポンスを特定のリクエスト（最初はBlinkで生成された）と関連付けることができる。%0a%3c %0a%3c %0a---%0a> ブラウザ内のRenderProcessHostオブジェクトはレンダラからIPCリクエストを受けとり、グローバルなResourceDispatcherHostへ転送する。using a pointer to the render process host (specifically, an implementation of ResourceDispatcherHost::Receiver) and the request ID generated by the renderer to uniquely identify the request.%0a> %0a> それぞれのリクエストはURLRequestオブジェクトに変換され、内部のURLRequestJobへ転送され、プロトコルごとの処理が行われる。URLRequestが通知を生成したとき、それのResourceDispatcherHost::Receiver と request IDによってRenderProcessHostが見つけされて、レンダラーに送り返される。レンダラによって生成されたIDは保存されているので、すべてのレスポンスを特定のリクエスト（最初はBlinkで生成された）と関連付けることができる。%0a> %0a> %0a31,33c31,33%0a%3c すべてのクッキーは'''/net/base'''内の'''CookieMonster'''オブジェクトでハンドルされる。クッキーは他のブラウザのネットワークスタック（'''WinINET'''や'''Necko'''）と共有されない。クッキーモンスターはブラウザプロセス内にあり、すべてのネットワークリクエストをハンドルする。なぜならクッキーはすべてのタブ間で同じでないとならないから。%0a%3c %0a%3c ページはドキュメントに対して'''document.cookie'''でクッキーを要求できる。これが起こったとき、レンダラからブラウザへのクッキーをリクエストする同期メッセージが送られる。ブラウザがクッキーを処理している間、'''Blink'''のスレッドは待機させられる。レンダラのIOスレッドがレスポンスを受け取ったとき、待機が終了し、受け取った結果を'''JavaScript'''エンジンに渡す。%0a---%0a> すべてのクッキーは/net/base内のCookieMonsterオブジェクトでハンドルされる。クッキーは他のブラウザのネットワークスタック（WinINETやNecko）と共有されない。クッキーモンスターはブラウザプロセス内にあり、すべてのネットワークリクエストをハンドルする。なぜならクッキーはすべてのタブ間で同じでないとならないから。%0a> %0a> ページはドキュメントに対してdocument.cookieでクッキーを要求できる。これが起こったとき、レンダラからブラウザへのクッキーをリクエストする同期メッセージが送られる。ブラウザがクッキーを処理している間、Blinkのスレッドは待機させられる。レンダラのIOスレッドがレスポンスを受け取ったとき、待機が終了し、受け取った結果をJavaScriptエンジンに渡す。%0a
host:1532414582=192.168.3.2
author:1532414474=
diff:1532414474:1532413971:=30,33d29%0a%3c !クッキー%0a%3c すべてのクッキーは/net/base内のCookieMonsterオブジェクトでハンドルされる。クッキーは他のブラウザのネットワークスタック（WinINETやNecko）と共有されない。クッキーモンスターはブラウザプロセス内にあり、すべてのネットワークリクエストをハンドルする。なぜならクッキーはすべてのタブ間で同じでないとならないから。%0a%3c %0a%3c ページはドキュメントに対してdocument.cookieでクッキーを要求できる。これが起こったとき、レンダラからブラウザへのクッキーをリクエストする同期メッセージが送られる。ブラウザがクッキーを処理している間、Blinkのスレッドは待機させられる。レンダラのIOスレッドがレスポンスを受け取ったとき、待機が終了し、受け取った結果をJavaScriptエンジンに渡す。%0a
host:1532414474=192.168.3.2
author:1532413971=
diff:1532413971:1532412259:=21,28c21%0a%3c レンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスで１つだけもつResourceDispatcherを使い一意のリクエストIDを作成し、リクエストをIPCでブラウザに転送する。ブラウザからの返答はこのリクエストIDを参照していて、リソースディスパッチャーによってRequestPeerオブジェクト（WebURLRequestImpl）に戻される。%0a%3c %0a%3c !ブラウザ%0a%3c %0a%3c ブラウザ内のRenderProcessHostオブジェクトはレンダラからIPCリクエストを受けとり、グローバルなResourceDispatcherHostへ転送する。using a pointer to the render process host (specifically, an implementation of ResourceDispatcherHost::Receiver) and the request ID generated by the renderer to uniquely identify the request.%0a%3c %0a%3c それぞれのリクエストはURLRequestオブジェクトに変換され、内部のURLRequestJobへ転送され、プロトコルごとの処理が行われる。URLRequestが通知を生成したとき、それのResourceDispatcherHost::Receiver と request IDによってRenderProcessHostが見つけされて、レンダラーに送り返される。レンダラによって生成されたIDは保存されているので、すべてのレスポンスを特定のリクエスト（最初はBlinkで生成された）と関連付けることができる。%0a%3c %0a---%0a> レンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスユニークな'''ResourceDispatcher'''を使いブラウザに'''IPC'''経由でリクエストを送る。%0a
host:1532413971=192.168.3.2
author:1532412259=
diff:1532412259:1532412147:=11c11%0a%3c [[デザイン/マルチプロセスアーキテクチャ|マルチプロセス]]構造は以下のような３つの層で考えられる。最下層はBlinkエンジンでレンダリングを行う。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a---%0a> [[デザイン/マルチプロセスアーキテクチャ|マルチプロセス]]構造は以下のような３つの層で考えられる。最下層はBlinkエンジンでレンダリングする。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a
host:1532412259=192.168.3.2
author:1532412147=
diff:1532412147:1532411789:=8,9c8,9%0a%3c すべてのネットワーク通信はメインのブラウザプロセスでハンドルされる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。'''HTTP/1.1'''で多くの接続を張りたく無いのもある。%0a%3c %0a---%0a> すべてのネットワーク通信はメインのブラウザプロセスで行われる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。'''HTTP/1.1'''で多くの接続を張りたく無いのもある。%0a> %0a11c11%0a%3c [[デザイン/マルチプロセスアーキテクチャ|マルチプロセス]]構造は以下のような３つの層で考えられる。最下層はBlinkエンジンでレンダリングする。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a---%0a> 以下のような３つの層で考える。最下層はBlinkエンジンでレンダリングする。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a
host:1532412147=192.168.3.2
author:1532411789=
diff:1532411789:1531041353:=1,2d0%0a%3c http://dev.chromium.org/developers/design-documents/multi-process-resource-loading%0a%3c %0a
host:1532411789=192.168.3.2
author:1531041353=
diff:1531041353:1530597663:=6,7c6,7%0a%3c すべてのネットワーク通信はメインのブラウザプロセスで行われる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。'''HTTP/1.1'''で多くの接続を張りたく無いのもある。%0a%3c %0a---%0a> すべてのネットワーク通信はメインのブラウザプロセスで行われる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。HTTP/1.1で多くの接続を張りたく無いのもある。%0a> %0a14,17c14,17%0a%3c '''Blink'''は'''ResouceLoader'''オブジェクトを持ち、データ取得の責任を持つ。それぞれのローダはリクエストごとの'''WebURLLoader'''を持つ。%0a%3c %0a%3c '''ResourceLoader'''は'''WebURLLoaderClient'''インタフェースを実装、これはコールバックインターフェースで、レンダラが'''Blink'''にデータをディスパッチする。%0a%3c %0a---%0a> BlinkはResouceLoaderオブジェクトを持ち、データ取得の責任を持つ。それぞれのローダはリクエストごとのWebURLLoaderを持つ。%0a> %0a> ResourceLoaderはWebURLLoaderClientインタフェースを実装、これはコールバックインターフェースで、レンダラがBlinkにデータをディスパッチする。%0a> %0a19c19%0a%3c レンダラの'''WebURLLoader'''実装である'''WebURLLoaderImpl'''は'''content/child/'''に置かれる。プロセスユニークな'''ResourceDispatcher'''を使いブラウザに'''IPC'''経由でリクエストを送る。%0a---%0a> レンダラのWebURLLoader実装であるWebURLLoaderImplはcontent/child/に置かれる。プロセスユニークなResourceDispatcherを使いブラウザにIPC経由でリクエストを送る。%0a
host:1531041353=192.168.3.2
author:1530597663=
diff:1530597663:1530597663:=1,21d0%0a%3c %25block red%25[@ %0a%3c ここの情報は古い%0a%3c @]%0a%3c %0a%3c !背景%0a%3c すべてのネットワーク通信はメインのブラウザプロセスで行われる。レンダラのアクセス制限目的とセッションデータやキャッシュの一貫性を保つため。HTTP/1.1で多くの接続を張りたく無いのもある。%0a%3c %0a%3c !全体像%0a%3c 以下のような３つの層で考える。最下層はBlinkエンジンでレンダリングする。その上はレンダラプロセスで１つのBlinkインスタンスを持つ。これら２つを管理するのがブラウザプロセスでこれがネットワークアクセスを管理する。%0a%3c %0a%3c https://www.chromium.org/_/rsrc/1220197833456/developers/design-documents/multi-process-resource-loading/Resource-loading.png%0a%3c %0a%3c !Blink%0a%3c BlinkはResouceLoaderオブジェクトを持ち、データ取得の責任を持つ。それぞれのローダはリクエストごとのWebURLLoaderを持つ。%0a%3c %0a%3c ResourceLoaderはWebURLLoaderClientインタフェースを実装、これはコールバックインターフェースで、レンダラがBlinkにデータをディスパッチする。%0a%3c %0a%3c !レンダラ%0a%3c レンダラのWebURLLoader実装であるWebURLLoaderImplはcontent/child/に置かれる。プロセスユニークなResourceDispatcherを使いブラウザにIPC経由でリクエストを送る。%0a%3c %0a%3c %0a
host:1530597663=192.168.3.2
