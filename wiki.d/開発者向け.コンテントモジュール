version=pmwiki-2.2.109 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502855503
host=192.168.3.2
name=開発者向け.コンテントモジュール
rev=11
targets=開発者向け.どのように新機能を追加するか,開発者向け.コンテントAPI,開発者向け.RenderViewRenderViewHostWebContentsを肥大化させずにどのように新しい機能を追加するか
text=http://www.chromium.org/developers/content-module%0a%0a%0a!高レベル全体像%0aコンテントモジュールは''src/content''にある。マルチプロセスサンドボックスアーキテクチャでページをレンダリングする中核コードである。HTML5やGPU加速などすべてのウェブプラットフォームの機能をもつ。Chromeの機能はもっていない（例えばextensions/autofill/spellingなどの）。目的は誰が利用してもブラウザ機能を提供できることである。%0a%0a!動機%0aChromiumコードが大きくなるにつれ、ある種の機能は避けがたくあるべき場所でないところに釘付けにされてきた。その結果レイヤ構造は乱れ、あるべきでない依存性が存在した。開発者にとって何がベストな配置なのかを決定するのは難しいが、結局Chromeの中核コードはsrc/contentに置くことに決まった。[[https://blog.chromium.org/2008/10/content-not-chrome.html|コンテントはchromeじゃない]]%0a%0a!コンテント VS chrome%0a上述のように、コンテントはレンダリングのための中核コードのみ持つべきである。ChromeはAPIでコンテントを利用し、IPCでイベントを受け取る。[[どのように新機能を追加するか]]にやり方が書いてある。%0a%0a%0a以下がChromeだけが持つ機能（大雑把に）でコンテントにはない。つまりコンテントはこれらのことを知っていてはいけない。%0a*Extensions%0a*NaCl%0a*ChromeFrame%0a*SpellCheck%0a*Autofill%0a*Sync%0a*Prerendering%0a*Safe Browsing%0a*Translate%0a%0a!アーキテクチャダイアグラム%0ahttps://www.chromium.org/_/rsrc/1308680052371/developers/content-module/Content.png%0a%0a上図はモジュール間の構造。モジュールは下位のモジュールを含むことができるが上位のモジュールは含むことができない。これはDEPSルールで強制される。モジュールは組み込み用APIを提供でき、下位モジュールはこれらをコールできる。%0a%0a!コンテントAPI%0a[[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。Chromeの機能（feature）はIPCをフックすることで実現する。 （[[RenderView RenderViewHost WebContentsを肥大化させずにどのように新しい機能を追加するか]]）。コンテキストが充分でない場合（WebKitからのコールバックなど）やコールバックが一度しか呼ばれない場合(one-off）は、組み込み者（Chrome）が組み込んだContentClientインタフェース経由で行う。ContentClientはすべてのプロセスで利用できる。幾つかのプロセスは自分専用のコールバックAPIをもつ（ContentBrowserClient/ContentRendererClient/ContentPluginClientなど）。%0a%0a!現状と道筋%0a現状コンテントはChromeに全く依存していない（メタな[[http://crbug.com/76697|バグ]]とそれに依存するバグ参照）。コンテントは基本的にブラウザでありそれを簡潔に利用する（"content_shell"）はすべてのプラットフォームでページをレンダリングする機能を提供する。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a%0acontentのユニットテストのためにcontent_unittestsターゲットがある。統合されたテストとしてcontent_browsertestsもある。%0a%0acontentは分離されたdllとしてビルドされる。ビルド高速化のため。%0a%0aWebKit APIと同様にcontentのためのAPIがある。組み込み者が内部の作業を知ることなくcontentを利用できる。%0a
time=1538309071
author:1538309071=
diff:1538309071:1512185762:=
host:1538309071=192.168.3.2
author:1512185762=
diff:1512185762:1512185432:=34,40c34,35%0a%3c 現状コンテントはChromeに全く依存していない（メタな[[http://crbug.com/76697|バグ]]とそれに依存するバグ参照）。コンテントは基本的にブラウザでありそれを簡潔に利用する（"content_shell"）はすべてのプラットフォームでページをレンダリングする機能を提供する。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a%3c %0a%3c contentのユニットテストのためにcontent_unittestsターゲットがある。統合されたテストとしてcontent_browsertestsもある。%0a%3c %0a%3c contentは分離されたdllとしてビルドされる。ビルド高速化のため。%0a%3c %0a%3c WebKit APIと同様にcontentのためのAPIがある。組み込み者が内部の作業を知ることなくcontentを利用できる。%0a---%0a> 現状コンテントはChromeに全く依存していない（メタな[[http://crbug.com/76697|バグ]]とそれに依存するバグ参照）。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a> %0a
host:1512185762=192.168.3.2
author:1512185432=
diff:1512185432:1512185403:=34c34%0a%3c 現状コンテントはChromeに全く依存していない（メタな[[http://crbug.com/76697|バグ]]とそれに依存するバグ参照）。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a---%0a> 現状コンテントはChromeに全く依存していない（メタな[[バグ|http://crbug.com/76697]]とそれに依存するバグ参照）。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a
host:1512185432=192.168.3.2
author:1512185403=
diff:1512185403:1512185233:=34c34%0a%3c 現状コンテントはChromeに全く依存していない（メタな[[バグ|http://crbug.com/76697]]とそれに依存するバグ参照）。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a---%0a> 現状コンテントはChromeに全く依存していない。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a
host:1512185403=192.168.3.2
author:1512185233=
diff:1512185233:1512185206:=31c31%0a%3c [[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。Chromeの機能（feature）はIPCをフックすることで実現する。 （[[RenderView RenderViewHost WebContentsを肥大化させずにどのように新しい機能を追加するか]]）。コンテキストが充分でない場合（WebKitからのコールバックなど）やコールバックが一度しか呼ばれない場合(one-off）は、組み込み者（Chrome）が組み込んだContentClientインタフェース経由で行う。ContentClientはすべてのプロセスで利用できる。幾つかのプロセスは自分専用のコールバックAPIをもつ（ContentBrowserClient/ContentRendererClient/ContentPluginClientなど）。%0a---%0a> [[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。Chromeの機能（feature）はIPCをフックすることで実現する。 （[[RenderView/RenderViewHost/WebContentsを肥大化させずにどのように新しい機能を追加するか]]）。コンテキストが充分でない場合（WebKitからのコールバックなど）やコールバックが一度しか呼ばれない場合(one-off）は、組み込み者（Chrome）が組み込んだContentClientインタフェース経由で行う。ContentClientはすべてのプロセスで利用できる。幾つかのプロセスは自分専用のコールバックAPIをもつ（ContentBrowserClient/ContentRendererClient/ContentPluginClientなど）。%0a
host:1512185233=192.168.3.2
author:1512185206=
diff:1512185206:1512185156:=
host:1512185206=192.168.3.2
author:1512185156=
diff:1512185156:1512181997:=31c31%0a%3c [[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。Chromeの機能（feature）はIPCをフックすることで実現する。 （[[RenderView/RenderViewHost/WebContentsを肥大化させずにどのように新しい機能を追加するか]]）。コンテキストが充分でない場合（WebKitからのコールバックなど）やコールバックが一度しか呼ばれない場合(one-off）は、組み込み者（Chrome）が組み込んだContentClientインタフェース経由で行う。ContentClientはすべてのプロセスで利用できる。幾つかのプロセスは自分専用のコールバックAPIをもつ（ContentBrowserClient/ContentRendererClient/ContentPluginClientなど）。%0a---%0a> [[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。（途中）%0a
host:1512185156=192.168.3.2
author:1512181997=
diff:1512181997:1503355774:=1,3d0%0a%3c http://www.chromium.org/developers/content-module%0a%3c %0a%3c %0a
host:1512181997=192.168.3.2
author:1503355774=
diff:1503355774:1503355772:=
host:1503355774=192.168.0.2
author:1503355772=
diff:1503355772:1502855503:=25c25%0a%3c 上図はモジュール間の構造。モジュールは下位のモジュールを含むことができるが上位のモジュールは含むことができない。これはDEPSルールで強制される。モジュールは組み込み用APIを提供でき、下位モジュールはこれらをコールできる。%0a---%0a> 上手はモジュール間の構造。モジュールは下位のモジュールを含むことができるが上位のモジュールは含むことができない。これはDEPSルールで強制される。モジュールは組み込み用APIを提供でき、下位モジュールはこれらをコールできる。%0a
host:1503355772=192.168.0.2
author:1502855503=
diff:1502855503:1502855503:=1,32d0%0a%3c !高レベル全体像%0a%3c コンテントモジュールは''src/content''にある。マルチプロセスサンドボックスアーキテクチャでページをレンダリングする中核コードである。HTML5やGPU加速などすべてのウェブプラットフォームの機能をもつ。Chromeの機能はもっていない（例えばextensions/autofill/spellingなどの）。目的は誰が利用してもブラウザ機能を提供できることである。%0a%3c %0a%3c !動機%0a%3c Chromiumコードが大きくなるにつれ、ある種の機能は避けがたくあるべき場所でないところに釘付けにされてきた。その結果レイヤ構造は乱れ、あるべきでない依存性が存在した。開発者にとって何がベストな配置なのかを決定するのは難しいが、結局Chromeの中核コードはsrc/contentに置くことに決まった。[[https://blog.chromium.org/2008/10/content-not-chrome.html|コンテントはchromeじゃない]]%0a%3c %0a%3c !コンテント VS chrome%0a%3c 上述のように、コンテントはレンダリングのための中核コードのみ持つべきである。ChromeはAPIでコンテントを利用し、IPCでイベントを受け取る。[[どのように新機能を追加するか]]にやり方が書いてある。%0a%3c %0a%3c %0a%3c 以下がChromeだけが持つ機能（大雑把に）でコンテントにはない。つまりコンテントはこれらのことを知っていてはいけない。%0a%3c *Extensions%0a%3c *NaCl%0a%3c *ChromeFrame%0a%3c *SpellCheck%0a%3c *Autofill%0a%3c *Sync%0a%3c *Prerendering%0a%3c *Safe Browsing%0a%3c *Translate%0a%3c %0a%3c !アーキテクチャダイアグラム%0a%3c https://www.chromium.org/_/rsrc/1308680052371/developers/content-module/Content.png%0a%3c %0a%3c 上手はモジュール間の構造。モジュールは下位のモジュールを含むことができるが上位のモジュールは含むことができない。これはDEPSルールで強制される。モジュールは組み込み用APIを提供でき、下位モジュールはこれらをコールできる。%0a%3c %0a%3c !コンテントAPI%0a%3c [[コンテントAPI]]はコンテントコードがChromeを間接的にコールするための仕組み。（途中）%0a%3c %0a%3c !現状と道筋%0a%3c 現状コンテントはChromeに全く依存していない。コンテントは基本的にブラウザであり（"content_shell"）すべてのプラットフォームでページをレンダリングする。ウェブプラットフォームのテストするときもchromeを用いる必要はない。%0a%3c %0a
host:1502855503=192.168.0.2
