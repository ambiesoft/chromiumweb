version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502960322
host=192.168.3.2
name=開発者向け.コードに貢献
rev=22
targets=Masterdoc.コードレビュー
text=https://www.chromium.org/developers/contributing-code%0a%0aすでにチェックアウトしビルド済みであること。ChromiumはChromiumOSにもプルされる。%0a%0a!!関連リソース%0a*%25target=_blank%25[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a*%25target=_blank%25[[https://meowni.ca/posts/chromium-101/|チュートリアル]]%0a%0a!!会話%0a*新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[masterdoc/コードレビュー]]を参照）。%0a*動作変更や些細でない修正は[[https://bugs.chromium.org/p/chromium/issues/list|bug system]]で追跡される必要がある。[[https://bugs.chromium.org/p/chromium/issues/entry|バグを提出]]してあなたが何をやっているのかを示す。%0a*bug systemにバグが乗っているからといってパッチが受け入れられるとは限らない。%0a%0a!!法的関連%0a*[[https://cla.developers.google.com/about/google-individual?csw=1|Individual Contributor License Agreement]]を成就すること。オンラインでできる。企業として貢献するなら[[https://cla.developers.google.com/about/google-corporate?csw=1|Corporate Contributor License Agreement]]を記入して送る。%0a*初めてコードを送る場合は、AUTHORSファイルに名前（企業の場合は企業名）と連絡先を書き入れる。%0a*レビューは[[http://dev.chromium.org/developers/contributing-code/external-contributor-checklist|External Contributor Checklist]]に従う。%0a%0a!ローカルブランチを作成%0aブランチをきることから作業が始まる。以下はmychange（名前は任意）というブランチをつくり、上流レポジトリのorigin/masterブランチを追跡する。%0a%0a[@%0agit checkout -b mychange -t origin/master%0a@]%0a%0aここでコードを書いたりテストをする。%0a*[[http://dev.chromium.org/developers/coding-style|スタイルガイド]]に従うこと。%0a*適切なユニットテストを含めること。%0a*パッチはレビューしやすいサイズに収めること。大きいパッチのレビューには時間がかかる。quickly.%0a%0aローカルにコミット%0a[@%0agit commit -a%0a@]%0a%0a!変更をレビューのためにアップロード%0a!!gitの初期設定%0a[[https://chromium-review.googlesource.com/new-password]]からアップロードのための信任状を得て画面の支持に従う。%0a%0a名前やメールアドレスやその他の設定%0a[@%0agit config --global user.name "My Name"%0agit config --global user.email "myemail@chromium.org"%0agit config --global core.autocrlf false%0agit config --global core.filemode false%0agit config --global branch.autosetuprebase always%0agit config --local gerrit.host true%0a@]%0a%0a!!アップロードコマンド%0aレビューには[[https://chromium-review.googlesource.com]]で動いている[[https://gerrit.googlesource.com/gerrit|Gerrit]]を使っている。変更をGerritにアップロードするには、'''git-cl'''ツールを使う。このツールは'''depot_tools'''に入っている。%0a%0a[@%0agit cl upload%0a@]%0aこのコマンドはGerrit変更を作成する。書き込みの入力が促され、送信前に簡単なエラーチェックが行われる。それが終わったら、URLを出力する。WEBで変更を見るために使う。%0a%0aコマンドラインオプションでCLに対するレビューアとこの変更で修正したバグを指定することができる。%0a[@%0agit cl upload -r foo@example.com,bar@example.com -b 123456%0a@]%0a%0a%0a!!コード品質のガイドライン%0aベストなコードにするために、メンテナンスの容易性は重要である：%0a*基本原則に従う。%0a*コードは読みやすく書かれていること。%0a*プラットフォームに依存しないためのコードやより良いデザインのためのリファクタリングを躊躇しないこと。%0a*近道をしないこと。開発は１００ｍ走ではなくマラソン。%0a*[[http://pragmaticcraftsman.com/2011/03/the-boy-scout-rule/|始めてみたときよりもきれいなコード]]にすること。%0a%0a!!コミットの書き込み%0a以下の形式で書く。%0a[@%0aSummary of change%0a%0aLonger description of change addressing as appropriate: why the change is made,%0acontext if it is part of many changes, description of previous behavior and%0anewly introduced differences, etc.%0a%0aLong lines should be wrapped to 80 columns for easier log message viewing in%0aterminals.%0a%0aBug: 123456%0a@]%0a%0a短いサブジェクトと１行のブランクラインは必須。[[https://crbug.com/|問題トラッカー]]からのバグ番号を使う（バグフォーマット参照）。以前のCLのリンクを含めるなら、''https://chromium-review.googlesource.com/c/NUMBER''ではなく''crrev.com/c/NUMBER''を使うことを考慮。''crrev.com''のほうが短いし、CLが提出されたときの混乱を回避できる。提出されたCLにはコードレビューページへのリンクをもち、参照CLには''crrev.com''を使うと間違ったリンクをクリックせずに済む。%0a%0a良いgitコミットメッセージの書き方はここ。%0a%0aテスターに対して変更が正しいことを検証するやり方がある場合には以下を追加：%0a%0a@@%0aTest: Load example.com/page.html and click the foo-button; see%0acrbug.com/123456 for more details.%0a@@%0a%0a!コードレビュー%0aより詳細はコードレビューポリシーページを参照。%0a%0a!!レビューアを見つける%0a理想的にはレビューアは変更したコード近辺に親しい人がよい。わからなければgit blameでファイルやOWNERSファイルを調べる。%0a%0a* 誰もがコードレビューできるが、最低１人は変更したコードのディレクトリのオーナーでなければならない。%0a* 複数のレビューアがいる場合は、各々のレビューアに何を期待しているかを明確にしてレビューの要求をすること。そうしないとその人達は自分の入力が必要ないとみなすか、冗長なレビューをしてしまう。%0a* @@git cl owners@@コマンドでオーナーを見つける手助けができる。 %0a %0a!!レビューの要求%0a変更をウェブで開く（リンクが見つけられない場合は、git cl issueを実行して現在のブランチのissueをみるか、chromium-review.googlesource.comへ行って、ログインして、Outgoing Reviewsを見る。%0a%0aレビューアはコードがコンパイルできてテストにパスしていることを期待している。アクセスできるなら、このときに変更の自動テスト（下記参照）を実行するとよい。%0a%0a左上の'''Add Reviwers'''をクリックして（リンクが見えないなら、ログインする）、Reviwersフィールドで、選んだレビューアをコンマで区切って入力する。%0a%0a同じダイアログで、レビューアへの最初のメッセージをタイプして'''Send'''をクリック。これでレビューアにメールが送られレビュー要求があることを知る。レビューに疑問点ややり方がある場合は、メッセージボックスに入力する。しかし空白のままでもよい。%0a%0a!!レビュープロセス%0aすべての変更はレビューされなければならない。コードレビューポリシーを見ること。%0a%0a新しいパッチセットをアップロードするには、単に変更をローカルブランチにコミットして再びgit cl uploadを実行する。%0a%0a!!承認%0aレビューアがパッチに満足したら、彼らは"Code-Review +1"をセットする。%0a%0aコミットするには影響するすべてのファイルのオーナーから承認を得る必要がある。コードレビューポリシーのオーナーセクションを参照。%0a%0a!自動テストの実行%0a提出される前に、変更は大きい一連のコンパイルと多くのプラットフォームにまたがったテストにパスしなければならない。このプロセスを開始するには、コードレビューツール右上の'''CQ dry run'''（CQ = コミットキュー）を押す。これは"Commit-Queue +1"を同等である。このラベルは誰にも利用可能だが、CQはコードが安全でないと判断すると、テストを実行しない可能性もある。安全とみなされるには：%0a%0a* @chromium.orgのメールアドレスを持っているなら、自分でトライジョブをリクエストする。%0a* いくつかのパッチをつくったのなら、レビューアに自分をトライジョブにノミネートしることをリクエストする。%0a* それ以外の場合、コードレビュ要求メッセージ内に、これがはじめてのパッチでトライジョブを実行してほしいことをリクエストする。%0a%0a!コミッティング%0a変更は一般的にはコミットキュー経由でコミットされるべきである。これは右上の'''Submit to CQ'''ボタンをクリックすることで行われか、変更に"Commit-Queue +2"ラベルを設定することで行われる。そうするとコミットキューはパッチをトライボットに送る、そうするとコードレビューツールの内のチェックボックスの近くに色のついた泡が現れる（ドライランでも同じ）。すべてのテストがパスしたら、変更は自動コミットされる。失敗したら、赤い（失敗）泡の失敗リンクをクリックする。ときどきテストはflakyになる。変更と関係ない孤立した失敗だったら、少し待ってまたcommitをクリックする。%0a%0a他の方法として、コミットキューをスルーして変更を直接コミットすることも可能である。これはテストをスルーするので緊急時のみに使うべきである。%0a%0a!チップ%0aレビューの期間、マージの苦労を最小にするため、自分の変更を新規ソースリビジョンにリベースしたいかもしれない。レビューアに優しい方法はリベース（リベース以外の変更がない）それ自信をパッチセットとしてアップロードすることである（when there are no outstanding comments.）その後、変更のパッチをアップロードする。この方法によりレビューアはリベースとは独立して変更を見ることができる。%0a%0aコードの書き手とレビューアはChromiumはグローバルなプロジェクトであると常に心すること。貢献者とレビューアはしばしばタイムゾーンが大きく離れている。レビューラグを最小にするガイドラインを読んで、レビューを書くときもそれに応答するときもそれを考慮すること。%0a
time=1532131862
author:1532131862=
diff:1532131862:1532131764:=
host:1532131862=192.168.3.2
author:1532131764=
diff:1532131764:1532131644:=87c87%0a%3c 短いサブジェクトと１行のブランクラインは必須。[[https://crbug.com/|問題トラッカー]]からのバグ番号を使う（バグフォーマット参照）。以前のCLのリンクを含めるなら、''https://chromium-review.googlesource.com/c/NUMBER''ではなく''crrev.com/c/NUMBER''を使うことを考慮。''crrev.com''のほうが短いし、CLが提出されたときの混乱を回避できる。提出されたCLにはコードレビューページへのリンクをもち、参照CLには''crrev.com''を使うと間違ったリンクをクリックせずに済む。%0a---%0a> 短いサブジェクトと１行のブランクラインは必須。問題トラッカーからのバグ番号を使う（バグフォーマット参照）。以前のCLのリンクを含めるなら、https://chromium-review.googlesource.com/c/NUMBERではなくcrrev.com/c/NUMBERを使うことを考慮。crrev.comのほうが短いし、CLが提出されたときの混乱を回避できる。提出されたCLにはコードレビューページへのリンクをもち、参照CLにはcrrev.comを使うと間違ったリンクをクリックせずに済む。%0a
host:1532131764=192.168.3.2
author:1532131644=
diff:1532131644:1531054715:=87,142c87,92%0a%3c 短いサブジェクトと１行のブランクラインは必須。問題トラッカーからのバグ番号を使う（バグフォーマット参照）。以前のCLのリンクを含めるなら、https://chromium-review.googlesource.com/c/NUMBERではなくcrrev.com/c/NUMBERを使うことを考慮。crrev.comのほうが短いし、CLが提出されたときの混乱を回避できる。提出されたCLにはコードレビューページへのリンクをもち、参照CLにはcrrev.comを使うと間違ったリンクをクリックせずに済む。%0a%3c %0a%3c 良いgitコミットメッセージの書き方はここ。%0a%3c %0a%3c テスターに対して変更が正しいことを検証するやり方がある場合には以下を追加：%0a%3c %0a%3c @@%0a%3c Test: Load example.com/page.html and click the foo-button; see%0a%3c crbug.com/123456 for more details.%0a%3c @@%0a%3c %0a%3c !コードレビュー%0a%3c より詳細はコードレビューポリシーページを参照。%0a%3c %0a%3c !!レビューアを見つける%0a%3c 理想的にはレビューアは変更したコード近辺に親しい人がよい。わからなければgit blameでファイルやOWNERSファイルを調べる。%0a%3c %0a%3c * 誰もがコードレビューできるが、最低１人は変更したコードのディレクトリのオーナーでなければならない。%0a%3c * 複数のレビューアがいる場合は、各々のレビューアに何を期待しているかを明確にしてレビューの要求をすること。そうしないとその人達は自分の入力が必要ないとみなすか、冗長なレビューをしてしまう。%0a%3c * @@git cl owners@@コマンドでオーナーを見つける手助けができる。 %0a%3c  %0a%3c !!レビューの要求%0a%3c 変更をウェブで開く（リンクが見つけられない場合は、git cl issueを実行して現在のブランチのissueをみるか、chromium-review.googlesource.comへ行って、ログインして、Outgoing Reviewsを見る。%0a%3c %0a%3c レビューアはコードがコンパイルできてテストにパスしていることを期待している。アクセスできるなら、このときに変更の自動テスト（下記参照）を実行するとよい。%0a%3c %0a%3c 左上の'''Add Reviwers'''をクリックして（リンクが見えないなら、ログインする）、Reviwersフィールドで、選んだレビューアをコンマで区切って入力する。%0a%3c %0a%3c 同じダイアログで、レビューアへの最初のメッセージをタイプして'''Send'''をクリック。これでレビューアにメールが送られレビュー要求があることを知る。レビューに疑問点ややり方がある場合は、メッセージボックスに入力する。しかし空白のままでもよい。%0a%3c %0a%3c !!レビュープロセス%0a%3c すべての変更はレビューされなければならない。コードレビューポリシーを見ること。%0a%3c %0a%3c 新しいパッチセットをアップロードするには、単に変更をローカルブランチにコミットして再びgit cl uploadを実行する。%0a%3c %0a%3c !!承認%0a%3c レビューアがパッチに満足したら、彼らは"Code-Review +1"をセットする。%0a%3c %0a%3c コミットするには影響するすべてのファイルのオーナーから承認を得る必要がある。コードレビューポリシーのオーナーセクションを参照。%0a%3c %0a%3c !自動テストの実行%0a%3c 提出される前に、変更は大きい一連のコンパイルと多くのプラットフォームにまたがったテストにパスしなければならない。このプロセスを開始するには、コードレビューツール右上の'''CQ dry run'''（CQ = コミットキュー）を押す。これは"Commit-Queue +1"を同等である。このラベルは誰にも利用可能だが、CQはコードが安全でないと判断すると、テストを実行しない可能性もある。安全とみなされるには：%0a%3c %0a%3c * @chromium.orgのメールアドレスを持っているなら、自分でトライジョブをリクエストする。%0a%3c * いくつかのパッチをつくったのなら、レビューアに自分をトライジョブにノミネートしることをリクエストする。%0a%3c * それ以外の場合、コードレビュ要求メッセージ内に、これがはじめてのパッチでトライジョブを実行してほしいことをリクエストする。%0a%3c %0a%3c !コミッティング%0a%3c 変更は一般的にはコミットキュー経由でコミットされるべきである。これは右上の'''Submit to CQ'''ボタンをクリックすることで行われか、変更に"Commit-Queue +2"ラベルを設定することで行われる。そうするとコミットキューはパッチをトライボットに送る、そうするとコードレビューツールの内のチェックボックスの近くに色のついた泡が現れる（ドライランでも同じ）。すべてのテストがパスしたら、変更は自動コミットされる。失敗したら、赤い（失敗）泡の失敗リンクをクリックする。ときどきテストはflakyになる。変更と関係ない孤立した失敗だったら、少し待ってまたcommitをクリックする。%0a%3c %0a%3c 他の方法として、コミットキューをスルーして変更を直接コミットすることも可能である。これはテストをスルーするので緊急時のみに使うべきである。%0a%3c %0a%3c !チップ%0a%3c レビューの期間、マージの苦労を最小にするため、自分の変更を新規ソースリビジョンにリベースしたいかもしれない。レビューアに優しい方法はリベース（リベース以外の変更がない）それ自信をパッチセットとしてアップロードすることである（when there are no outstanding comments.）その後、変更のパッチをアップロードする。この方法によりレビューアはリベースとは独立して変更を見ることができる。%0a%3c %0a%3c コードの書き手とレビューアはChromiumはグローバルなプロジェクトであると常に心すること。貢献者とレビューアはしばしばタイムゾーンが大きく離れている。レビューラグを最小にするガイドラインを読んで、レビューを書くときもそれに応答するときもそれを考慮すること。%0a---%0a> A short subject and a blank line after the subject are crucial. Use the bug number from the issue tracker (see more on bug formatting). If you include links to previous CLs then consider using crrev.com/c/NUMBER format rather than https://chromium-review.googlesource.com/c/NUMBER format. The crrev.com format is shorter, and avoids confusion when the CL is submitted. The submitted CL will have a link to its code review page and using crrev.com for referenced CLs avoids clicking on the wrong one.%0a> %0a> Some good thoughts on how to write good git commit messages can be found here.%0a> %0a> If there are instructions for testers to verify your change is correct, append:%0a> %0a
host:1532131644=192.168.3.2
author:1531054715=
diff:1531054715:1531054664:=68c68%0a%3c *プラットフォームに依存しないためのコードやより良いデザインのためのリファクタリングを躊躇しないこと。%0a---%0a> *プラットフォームに依存しないためのコードやより良いデザインのためのリファクタを躊躇しないこと。%0a86,91d85%0a%3c %0a%3c A short subject and a blank line after the subject are crucial. Use the bug number from the issue tracker (see more on bug formatting). If you include links to previous CLs then consider using crrev.com/c/NUMBER format rather than https://chromium-review.googlesource.com/c/NUMBER format. The crrev.com format is shorter, and avoids confusion when the CL is submitted. The submitted CL will have a link to its code review page and using crrev.com for referenced CLs avoids clicking on the wrong one.%0a%3c %0a%3c Some good thoughts on how to write good git commit messages can be found here.%0a%3c %0a%3c If there are instructions for testers to verify your change is correct, append:%0a
host:1531054715=192.168.3.2
author:1531054664=
diff:1531054664:1531054638:=70c70%0a%3c *[[http://pragmaticcraftsman.com/2011/03/the-boy-scout-rule/|始めてみたときよりもきれいなコード]]にすること。%0a---%0a> *[[始めてみたときよりもきれいなコード|http://pragmaticcraftsman.com/2011/03/the-boy-scout-rule/]]にすること。%0a
host:1531054664=192.168.3.2
author:1531054638=
diff:1531054638:1531054189:=56,57c56,57%0a%3c このコマンドはGerrit変更を作成する。書き込みの入力が促され、送信前に簡単なエラーチェックが行われる。それが終わったら、URLを出力する。WEBで変更を見るために使う。%0a%3c %0a---%0a> このコマンドはGerrit変更を作成する。書き込みの入力が促され、送信前に簡単なエラーチェックが行われる。それが終わったら、URLを出力する。WEBで変更が見るために使う。%0a> %0a62,86d61%0a%3c %0a%3c %0a%3c !!コード品質のガイドライン%0a%3c ベストなコードにするために、メンテナンスの容易性は重要である：%0a%3c *基本原則に従う。%0a%3c *コードは読みやすく書かれていること。%0a%3c *プラットフォームに依存しないためのコードやより良いデザインのためのリファクタを躊躇しないこと。%0a%3c *近道をしないこと。開発は１００ｍ走ではなくマラソン。%0a%3c *[[始めてみたときよりもきれいなコード|http://pragmaticcraftsman.com/2011/03/the-boy-scout-rule/]]にすること。%0a%3c %0a%3c !!コミットの書き込み%0a%3c 以下の形式で書く。%0a%3c [@%0a%3c Summary of change%0a%3c %0a%3c Longer description of change addressing as appropriate: why the change is made,%0a%3c context if it is part of many changes, description of previous behavior and%0a%3c newly introduced differences, etc.%0a%3c %0a%3c Long lines should be wrapped to 80 columns for easier log message viewing in%0a%3c terminals.%0a%3c %0a%3c Bug: 123456%0a%3c @]%0a%3c %0a
host:1531054638=192.168.3.2
author:1531054189=
diff:1531054189:1531053925:=52,61d51%0a%3c %0a%3c [@%0a%3c git cl upload%0a%3c @]%0a%3c このコマンドはGerrit変更を作成する。書き込みの入力が促され、送信前に簡単なエラーチェックが行われる。それが終わったら、URLを出力する。WEBで変更が見るために使う。%0a%3c %0a%3c コマンドラインオプションでCLに対するレビューアとこの変更で修正したバグを指定することができる。%0a%3c [@%0a%3c git cl upload -r foo@example.com,bar@example.com -b 123456%0a%3c @]%0a
host:1531054189=192.168.3.2
author:1531053925=
diff:1531053925:1531053906:=51c51%0a%3c レビューには[[https://chromium-review.googlesource.com]]で動いている[[https://gerrit.googlesource.com/gerrit|Gerrit]]を使っている。変更をGerritにアップロードするには、'''git-cl'''ツールを使う。このツールは'''depot_tools'''に入っている。%0a---%0a> レビューには[[chromium-review.googlesource.com]]で動いている[[https://gerrit.googlesource.com/gerrit|Gerrit]]を使っている。変更をGerritにアップロードするには、'''git-cl'''ツールを使う。このツールは'''depot_tools'''に入っている。%0a
host:1531053925=192.168.3.2
author:1531053906=
diff:1531053906:1531053640:=39,51d38%0a%3c %0a%3c 名前やメールアドレスやその他の設定%0a%3c [@%0a%3c git config --global user.name "My Name"%0a%3c git config --global user.email "myemail@chromium.org"%0a%3c git config --global core.autocrlf false%0a%3c git config --global core.filemode false%0a%3c git config --global branch.autosetuprebase always%0a%3c git config --local gerrit.host true%0a%3c @]%0a%3c %0a%3c !!アップロードコマンド%0a%3c レビューには[[chromium-review.googlesource.com]]で動いている[[https://gerrit.googlesource.com/gerrit|Gerrit]]を使っている。変更をGerritにアップロードするには、'''git-cl'''ツールを使う。このツールは'''depot_tools'''に入っている。%0a
host:1531053906=192.168.3.2
author:1531053640=
diff:1531053640:1531053477:=31,38d30%0a%3c ローカルにコミット%0a%3c [@%0a%3c git commit -a%0a%3c @]%0a%3c %0a%3c !変更をレビューのためにアップロード%0a%3c !!gitの初期設定%0a%3c [[https://chromium-review.googlesource.com/new-password]]からアップロードのための信任状を得て画面の支持に従う。%0a
host:1531053640=192.168.3.2
author:1531053477=
diff:1531053477:1531053457:=27c27%0a%3c *[[http://dev.chromium.org/developers/coding-style|スタイルガイド]]に従うこと。%0a---%0a> *[[スタイルガイド|http://dev.chromium.org/developers/coding-style]]に従うこと。%0a
host:1531053477=192.168.3.2
author:1531053457=
diff:1531053457:1531053242:=25,29d24%0a%3c %0a%3c ここでコードを書いたりテストをする。%0a%3c *[[スタイルガイド|http://dev.chromium.org/developers/coding-style]]に従うこと。%0a%3c *適切なユニットテストを含めること。%0a%3c *パッチはレビューしやすいサイズに収めること。大きいパッチのレビューには時間がかかる。quickly.%0a
host:1531053457=192.168.3.2
author:1531053242=
diff:1531053242:1531053217:=22,25c22%0a%3c [@%0a%3c git checkout -b mychange -t origin/master%0a%3c @]%0a%3c %0a---%0a> @@git checkout -b mychange -t origin/master@@%0a
host:1531053242=192.168.3.2
author:1531053217=
diff:1531053217:1531053206:=21d20%0a%3c %0a
host:1531053217=192.168.3.2
author:1531053206=
diff:1531053206:1530969241:=19,21c19%0a%3c !ローカルブランチを作成%0a%3c ブランチをきることから作業が始まる。以下はmychange（名前は任意）というブランチをつくり、上流レポジトリのorigin/masterブランチを追跡する。%0a%3c @@git checkout -b mychange -t origin/master@@%0a---%0a> !Create a local branch%0a\ No newline at end of file%0a
host:1531053206=192.168.3.2
author:1530969241=
diff:1530969241:1530969220:=6,7c6,7%0a%3c *%25target=_blank%25[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a%3c *%25target=_blank%25[[https://meowni.ca/posts/chromium-101/|チュートリアル]]%0a---%0a> * %25target=_blank%25[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a> *[[https://meowni.ca/posts/chromium-101/|チュートリアル]]%0a
host:1530969241=192.168.3.2
author:1530969220=
diff:1530969220:1530881355:=6c6%0a%3c * %25target=_blank%25[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a---%0a> *[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a
host:1530969220=192.168.3.2
author:1530881355=
diff:1530881355:1530880618:=15,19c15%0a%3c *[[https://cla.developers.google.com/about/google-individual?csw=1|Individual Contributor License Agreement]]を成就すること。オンラインでできる。企業として貢献するなら[[https://cla.developers.google.com/about/google-corporate?csw=1|Corporate Contributor License Agreement]]を記入して送る。%0a%3c *初めてコードを送る場合は、AUTHORSファイルに名前（企業の場合は企業名）と連絡先を書き入れる。%0a%3c *レビューは[[http://dev.chromium.org/developers/contributing-code/external-contributor-checklist|External Contributor Checklist]]に従う。%0a%3c %0a%3c !Create a local branch%0a\ No newline at end of file%0a---%0a> *[[https://cla.developers.google.com/about/google-individual?csw=1|Individual Contributor License Agreement]]を成就すること。%0a\ No newline at end of file%0a
host:1530881355=192.168.3.6
author:1530880618=
diff:1530880618:1530880476:=10c10%0a%3c *新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[masterdoc/コードレビュー]]を参照）。%0a---%0a> *新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[コードレビュー]]を参照）。%0a
host:1530880618=192.168.3.6
author:1530880476=
diff:1530880476:1530880359:=10c10%0a%3c *新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[コードレビュー]]を参照）。%0a---%0a> *新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[コードレビューポリシー]]を参照）。%0a
host:1530880476=192.168.3.6
author:1530880359=
diff:1530880359:1502960322:=6,8c6,8%0a%3c *[[https://docs.google.com/presentation/d/1abnqM9j6zFodPHA38JG1061rG2iGj_GABxEDgZsdbJg/present?slide=id.i0|Chromium開発者の生涯]]%0a%3c *[[https://meowni.ca/posts/chromium-101/|チュートリアル]]%0a%3c %0a---%0a> *[[Chromium開発者の生涯]]%0a> *[[チュートリアル]]%0a> %0a11c11%0a%3c *動作変更や些細でない修正は[[https://bugs.chromium.org/p/chromium/issues/list|bug system]]で追跡される必要がある。[[https://bugs.chromium.org/p/chromium/issues/entry|バグを提出]]してあなたが何をやっているのかを示す。%0a---%0a> *動作変更や些細でない修正は[[bug system]]で追跡される必要がある。[[バグを提出]]してあなたが何をやっているのかを示す。%0a15c15%0a%3c *[[https://cla.developers.google.com/about/google-individual?csw=1|Individual Contributor License Agreement]]を成就すること。%0a\ No newline at end of file%0a---%0a> *[[Individual Contributor License Agreement]]を成就すること。%0a\ No newline at end of file%0a
host:1530880359=192.168.3.6
author:1502960322=
diff:1502960322:1502960322:=1,15d0%0a%3c https://www.chromium.org/developers/contributing-code%0a%3c %0a%3c すでにチェックアウトしビルド済みであること。ChromiumはChromiumOSにもプルされる。%0a%3c %0a%3c !!関連リソース%0a%3c *[[Chromium開発者の生涯]]%0a%3c *[[チュートリアル]]%0a%3c %0a%3c !!会話%0a%3c *新しい機能を追加するにしても、バグを直すにしても、やりすぎる前に他の人の意見を聞くように。新しいアイデアなら、適当な議論グループ([[https://www.chromium.org/developers/discussion-groups|Chromium]] | [[http://dev.chromium.org/chromium-os/discussion-groups|ChromiumOS]]）で提案。既存コードなら"OWNERS"ファイルに乗ってる人に聞く。（[[コードレビューポリシー]]を参照）。%0a%3c *動作変更や些細でない修正は[[bug system]]で追跡される必要がある。[[バグを提出]]してあなたが何をやっているのかを示す。%0a%3c *bug systemにバグが乗っているからといってパッチが受け入れられるとは限らない。%0a%3c %0a%3c !!法的関連%0a%3c *[[Individual Contributor License Agreement]]を成就すること。%0a\ No newline at end of file%0a
host:1502960322=192.168.0.2
