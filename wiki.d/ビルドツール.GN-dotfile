version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1529942610
host=192.168.3.2
name=ビルドツール.GN-dotfile
rev=4
targets=
text=!gn help dotfile%0a!!.gnファイル%0agnが起動されると、カレントディレクトリと親ディレクトリを走査し'''.gn'''ファイルを探す。このファイルが見つかったディレクトリがソースルートになる。''--root''コマンドラインでこの値を上書きできる。%0a%0a'''.gn'''ファイルが実行される。シンタクスはビルドファイルと同じであるが、セットアップに特化した意味しか持っていない。%0a%0a''--root''を指定すると、GNはそのディレクトリから'''.gn'''を探す。違うファイルを探したい場合は''--dotfile''で指定する。%0a例：%0a gn gen out/Debug --root=/home/build --dotfile=/home/my_gn_file.gn%0a%0a!!変数%0a%0a!!!arg_file_template （オプション）%0aファイルを指定すると''gn args''を実行したときのデフォルトの'''args.gn'''を置き換える。%0a%0a!!!buildconfig （必須）%0aビルド設定ファイルを指定する。このファイルはツールチェインのビルドファイル実行環境セットアップに使われる。%0a%0a!!!check_targets （オプション）%0aラベルまたはラベルパターンのリストをしていする。''gn check''や''gn gen --check''で使われる。指定されない場合はすべてのターゲットがチェックされる。からのリストが指定された場合は、どのターゲットもチェックされない。%0a%0aこのリストのフォーマットは''visibility''と同じである。"gn help visibility"を参照。%0a%0a!!!exec_script_whitelist （オプション）%0a'''.gn/.gni'''のリスト（ラベルではない）で''exec_script''呼び出しの許可を持つ。このリストが定義されると、''exec_script''呼び出しがチェックされ、現在のファイルがリストにないとGNのエラーになる。%0a%0a''exec_script''の実行を制限するために使う。ワイルドカードはサポートされない。２番めのソースツリーのファイルは（定義された場合）メインツリーに存在するかのように参照される。%0a%0a指定されない場合は、''exec_script''の呼び出しは制限されない。%0a%0a例：%0a exec_script_whitelist = [%0a   "//base/BUILD.gn",%0a   "//build/my_config.gni",%0a ]%0a%0a!!!root （オプション）%0aルートビルドターゲットのラベル。GNビルドはこのターゲット名を含むビルドファイルをロードすることから始まる。デフォルトは'''"//:"'''になり、'''"//BUILD.gn"'''ファイルがロードされる。%0a%0a!!!script_executable （オプション）%0aPythonまたは他の言語のインタプリタへのパス、スクリプトの実行や''exec_script''の呼び出しで使われる。%0a%0a!!!secondary_source （オプション）%0a入力ファイルを探すための第２のディレクトリのラベル。'''BUILD.gn'''を探すとき（または上で記述したビルド設定ファイル）最初はソースルートから探される。そこで見つからないとき、第２のソースルートが使われる（それはパラレルなディレクトリ構成を含むかもしれない）。%0a%0aこの動作は何らかの理由により'''BUILD.gn'''が見つからないときのためのものである。%0a%0a第２のソースルートはメインソースツリーの内部に存在しなければならない。%0a%0a!!!default_args （オプション）%0a宣言された引数をデフォルトで上書きする範囲。これらの上書きは''declare_args()''ブロックに先駆けて実行される。が''--args''や'''args.gn'''で上書きされる。%0a%0aこれは下位プロジェクトで宣言した引数のデフォルト値が何らかの理由により変化される必要があるときに使われる。%0a%0a!!例： .gnファイルの中身%0a%0a buildconfig = "//build/config/BUILDCONFIG.gn"%0a%0a check_targets = [%0a   "//doom_melon/*",  # Check everything in this subtree.%0a   "//tools:mind_controlling_ant",  # Check this specific target.%0a ]%0a%0a root = "//:root"%0a%0a secondary_source = "//build/config/temporary_buildfiles/"%0a%0a default_args = {%0a   # Default to release builds for this project.%0a   is_debug = false%0a   is_component_build = false%0a }%0a%0a
time=1529958486
author:1529958486=
diff:1529958486:1529958455:=57,72c57,72%0a%3c  buildconfig = "//build/config/BUILDCONFIG.gn"%0a%3c %0a%3c  check_targets = [%0a%3c    "//doom_melon/*",  # Check everything in this subtree.%0a%3c    "//tools:mind_controlling_ant",  # Check this specific target.%0a%3c  ]%0a%3c %0a%3c  root = "//:root"%0a%3c %0a%3c  secondary_source = "//build/config/temporary_buildfiles/"%0a%3c %0a%3c  default_args = {%0a%3c    # Default to release builds for this project.%0a%3c    is_debug = false%0a%3c    is_component_build = false%0a%3c  }%0a---%0a>   buildconfig = "//build/config/BUILDCONFIG.gn"%0a> %0a>   check_targets = [%0a>     "//doom_melon/*",  # Check everything in this subtree.%0a>     "//tools:mind_controlling_ant",  # Check this specific target.%0a>   ]%0a> %0a>   root = "//:root"%0a> %0a>   secondary_source = "//build/config/temporary_buildfiles/"%0a> %0a>   default_args = {%0a>     # Default to release builds for this project.%0a>     is_debug = false%0a>     is_component_build = false%0a>   }%0a
host:1529958486=192.168.3.2
author:1529958455=
diff:1529958455:1529957882:=43,55c43,64%0a%3c !!!secondary_source （オプション）%0a%3c 入力ファイルを探すための第２のディレクトリのラベル。'''BUILD.gn'''を探すとき（または上で記述したビルド設定ファイル）最初はソースルートから探される。そこで見つからないとき、第２のソースルートが使われる（それはパラレルなディレクトリ構成を含むかもしれない）。%0a%3c %0a%3c この動作は何らかの理由により'''BUILD.gn'''が見つからないときのためのものである。%0a%3c %0a%3c 第２のソースルートはメインソースツリーの内部に存在しなければならない。%0a%3c %0a%3c !!!default_args （オプション）%0a%3c 宣言された引数をデフォルトで上書きする範囲。これらの上書きは''declare_args()''ブロックに先駆けて実行される。が''--args''や'''args.gn'''で上書きされる。%0a%3c %0a%3c これは下位プロジェクトで宣言した引数のデフォルト値が何らかの理由により変化される必要があるときに使われる。%0a%3c %0a%3c !!例： .gnファイルの中身%0a---%0a>   secondary_source [optional]%0a>       Label of an alternate directory tree to find input files. When searching%0a>       for a BUILD.gn file (or the build config file discussed above), the file%0a>       will first be looked for in the source root. If it's not found, the%0a>       secondary source root will be checked (which would contain a parallel%0a>       directory hierarchy).%0a> %0a>       This behavior is intended to be used when BUILD.gn files can't be checked%0a>       in to certain source directories for whatever reason.%0a> %0a>       The secondary source root must be inside the main source tree.%0a> %0a>   default_args [optional]%0a>       Scope containing the default overrides for declared arguments. These%0a>       overrides take precedence over the default values specified in the%0a>       declare_args() block, but can be overriden using --args or the%0a>       args.gn file.%0a> %0a>       This is intended to be used when subprojects declare arguments with%0a>       default values that need to be changed for whatever reason.%0a> %0a> Example .gn file contents%0a
host:1529958455=192.168.3.2
author:1529957882=
diff:1529957882:1529942610:=37,41c37,45%0a%3c !!!root （オプション）%0a%3c ルートビルドターゲットのラベル。GNビルドはこのターゲット名を含むビルドファイルをロードすることから始まる。デフォルトは'''"//:"'''になり、'''"//BUILD.gn"'''ファイルがロードされる。%0a%3c %0a%3c !!!script_executable （オプション）%0a%3c Pythonまたは他の言語のインタプリタへのパス、スクリプトの実行や''exec_script''の呼び出しで使われる。%0a---%0a>   root [optional]%0a>       Label of the root build target. The GN build will start by loading the%0a>       build file containing this target name. This defaults to "//:" which will%0a>       cause the file //BUILD.gn to be loaded.%0a> %0a>   script_executable [optional]%0a>       Path to specific Python executable or potentially a different language%0a>       interpreter that is used to execute scripts in action targets and%0a>       exec_script calls.%0a
host:1529957882=192.168.3.2
author:1529942610=
diff:1529942610:1529942610:=1,86d0%0a%3c !gn help dotfile%0a%3c !!.gnファイル%0a%3c gnが起動されると、カレントディレクトリと親ディレクトリを走査し'''.gn'''ファイルを探す。このファイルが見つかったディレクトリがソースルートになる。''--root''コマンドラインでこの値を上書きできる。%0a%3c %0a%3c '''.gn'''ファイルが実行される。シンタクスはビルドファイルと同じであるが、セットアップに特化した意味しか持っていない。%0a%3c %0a%3c ''--root''を指定すると、GNはそのディレクトリから'''.gn'''を探す。違うファイルを探したい場合は''--dotfile''で指定する。%0a%3c 例：%0a%3c  gn gen out/Debug --root=/home/build --dotfile=/home/my_gn_file.gn%0a%3c %0a%3c !!変数%0a%3c %0a%3c !!!arg_file_template （オプション）%0a%3c ファイルを指定すると''gn args''を実行したときのデフォルトの'''args.gn'''を置き換える。%0a%3c %0a%3c !!!buildconfig （必須）%0a%3c ビルド設定ファイルを指定する。このファイルはツールチェインのビルドファイル実行環境セットアップに使われる。%0a%3c %0a%3c !!!check_targets （オプション）%0a%3c ラベルまたはラベルパターンのリストをしていする。''gn check''や''gn gen --check''で使われる。指定されない場合はすべてのターゲットがチェックされる。からのリストが指定された場合は、どのターゲットもチェックされない。%0a%3c %0a%3c このリストのフォーマットは''visibility''と同じである。"gn help visibility"を参照。%0a%3c %0a%3c !!!exec_script_whitelist （オプション）%0a%3c '''.gn/.gni'''のリスト（ラベルではない）で''exec_script''呼び出しの許可を持つ。このリストが定義されると、''exec_script''呼び出しがチェックされ、現在のファイルがリストにないとGNのエラーになる。%0a%3c %0a%3c ''exec_script''の実行を制限するために使う。ワイルドカードはサポートされない。２番めのソースツリーのファイルは（定義された場合）メインツリーに存在するかのように参照される。%0a%3c %0a%3c 指定されない場合は、''exec_script''の呼び出しは制限されない。%0a%3c %0a%3c 例：%0a%3c  exec_script_whitelist = [%0a%3c    "//base/BUILD.gn",%0a%3c    "//build/my_config.gni",%0a%3c  ]%0a%3c %0a%3c   root [optional]%0a%3c       Label of the root build target. The GN build will start by loading the%0a%3c       build file containing this target name. This defaults to "//:" which will%0a%3c       cause the file //BUILD.gn to be loaded.%0a%3c %0a%3c   script_executable [optional]%0a%3c       Path to specific Python executable or potentially a different language%0a%3c       interpreter that is used to execute scripts in action targets and%0a%3c       exec_script calls.%0a%3c %0a%3c   secondary_source [optional]%0a%3c       Label of an alternate directory tree to find input files. When searching%0a%3c       for a BUILD.gn file (or the build config file discussed above), the file%0a%3c       will first be looked for in the source root. If it's not found, the%0a%3c       secondary source root will be checked (which would contain a parallel%0a%3c       directory hierarchy).%0a%3c %0a%3c       This behavior is intended to be used when BUILD.gn files can't be checked%0a%3c       in to certain source directories for whatever reason.%0a%3c %0a%3c       The secondary source root must be inside the main source tree.%0a%3c %0a%3c   default_args [optional]%0a%3c       Scope containing the default overrides for declared arguments. These%0a%3c       overrides take precedence over the default values specified in the%0a%3c       declare_args() block, but can be overriden using --args or the%0a%3c       args.gn file.%0a%3c %0a%3c       This is intended to be used when subprojects declare arguments with%0a%3c       default values that need to be changed for whatever reason.%0a%3c %0a%3c Example .gn file contents%0a%3c %0a%3c   buildconfig = "//build/config/BUILDCONFIG.gn"%0a%3c %0a%3c   check_targets = [%0a%3c     "//doom_melon/*",  # Check everything in this subtree.%0a%3c     "//tools:mind_controlling_ant",  # Check this specific target.%0a%3c   ]%0a%3c %0a%3c   root = "//:root"%0a%3c %0a%3c   secondary_source = "//build/config/temporary_buildfiles/"%0a%3c %0a%3c   default_args = {%0a%3c     # Default to release builds for this project.%0a%3c     is_debug = false%0a%3c     is_component_build = false%0a%3c   }%0a%3c %0a
host:1529942610=192.168.3.2
