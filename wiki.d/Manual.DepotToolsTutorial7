version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530730749
host=192.168.3.2
name=Manual.DepotToolsTutorial7
rev=30
targets=Manual.DepotTools7,Manual.Git-new-branch1
text=http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html%0a%0a!depot_tools_tutorial(7)マニュアルページ%0a%0a--%0a%0a!名前%0adepot_tools_tutorial - depot_toolsのgit拡張のチュートリアル。%0a%0a!解説%0aChromiumの[[depot_tools(7)]]は誰もが専門家のようにChromiumコードベースの開発に参加できるようにするための作業効率化ツール。ここではこれらのツールを使った開発の説明をする。以下の項目が含まれる。%0a* セットアップ%0a* コード取得%0a* 長くて読んでない(TL;DR)%0a* CLの作成とアップロード%0a* コードの更新%0a* 複数のCLの管理%0a* 依存しているCLの管理%0a* 作業の流れの実例%0a%0aここで言及されているコマンドの詳細はマニュアルを見るか''--help''を参照。%0a%0a:'''Note:''':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a%0a!!前提条件%0agitについて知っていること。%0a''git add'', ''git status'', ''git commit''の意味が理解できて、''git rebase''の意味を'''本質的に'''理解できていれば十分。%0a%0a!セットアップ%0a!!DEPOT TOOLSの取得%0a!!!Linux / MAC%0a''depot_tools''のレポジトリをcloneする%0a@@$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git@@%0a%0aPATHの最後にdepot_toolsへのパスを追加する。~/.bashrcや~/.zshrcに書いておくといい。%0a@@$ export PATH=$PATH:/path/to/depot_tools@@%0a%0a!!!Windows%0adepot_toolsを[[https://storage.googleapis.com/chrome-infra/depot_tools.zip|まとめたもの]]をダウンロードして解凍する。%0a%0a:'''注意:''':隠しフォルダの.gitがちゃんと含まれるように解凍すること。コンテキストメニューの"Extract all..."が使える。%0a%0a''depot_tools''へのパスをPATHの先頭に追加する（どのPythonよりも先になければならない）。%0aコマンドプロンプトから''gclient''を実行する（引数無しで）。最初の実行で、'''msysgit'''や'''python'''などのツールをインストールする。%0a%0a:'''Note''':%0a* gclientはコマンドプロンプトから実行すること。%0a* 変なエラーが出たら[[http://tortoisesvn.tigris.org/faq.html#cantmove2|Windowsインデクスを無効]]にする。%0a* gclientが終わったら''where python''を実行して、このpythonが''depot_tools''配下にある'''python.bat'''になっているかを確認する。（https://crbug.com/611087)%0a%0a!!構成のブートストラップ%0agitを使うのが初めてならいくつかの設定が必要、メールアドレスと名前を自分のに変えて以下を実行。%0a $ git config --global user.name "John Doe"%0a $ git config --global user.email "jdoe@email.com"%0a $ git config --global core.autocrlf false%0a $ git config --global core.filemode false%0a $ # and for fun!%0a $ git config --global color.ui true%0a%0a!長くて読んでない(TL;DR)%0a $ # コードを取得%0a $ # 空のディレクトリでやる%0a $ fetch {chromium,...}%0a %0a $ # サードパーティのレポを更新してプリコンパイルフックを実行%0a $ gclient sync%0a %0a $ # 新規変更を作成してアップロードしてレビューしてもらう%0a $ git new-branch %3cbranch_name>%0a $ # 繰り返し: [edit, git add, git commit]%0a $ git cl upload%0a %0a $ # 変更がレビューされたら、CQにコミット%0a $ git cl set_commit%0a $ # 注意：コミットされて着地したハッシュは%0a $ # ローカルのハッシュとは違う値になる。%0a%0a!コードの取得%0a空のディレクトリへ移動して、どれか好きなのを実行。%0a $ fetch chromium  # 基本チェックアウトのデスクトップChromium%0a $ fetch android   # AndroidのChromiumチェックアウト%0a $ fetch ios       # iOSのChromiumチェックアウト%0a%0a'''fetch'''が終わったら以下のものが出来ているはず。%0a .gclient   # ソースチェックアウトの構成ファイル%0a src/       # トップレベルのチェックアウト%0a%0aLinuxで'''fetch'''した場合は以下を実行。%0a $ cd src && ./build/install-build-deps.sh%0a%0a最後に以下を実行%0a $ gclient sync%0a%0aこれは依存しているものをチェックアウトする。'''src'''でブランチを変更したり、更新したりした場合は、これを実行しなければならない。%0a%0a!CLの作成とアップロード%0a:'''Note''':ここ以降のチュートリアルではカレントディレクトリを''src/''にあるものとする。%0a%0aそれぞれのCLは完全に１つのブランチと対応する。新しいCLを始めたい場合は以下のようにする。%0a%0a $ git new-branch %3cbranch_name>%0a%0aこれは'''branch_name'''という名前のブランチを作成してチェックアウトする。このブランチはデフォルトのアップストリームブランチ(origin/master)をトラックする。詳しくは、[[git-new-branch(1)]]を参照。%0a%0aこのブランチに好きなだけコミットしていい。レビューのためにアップロードするには以下を実行。%0a%0a $ git cl upload%0a%0aこれはあなたのブランチとアップストリームブランチ（今の場合はorigin/master）の差分をとって、[[https://codereview.chromium.org/|Chromiumのコードレビューサイト]]にポストする。%0a%0a!コードのアップデート%0a不可避的に、メインのChromiumレポから変更をpullしたいと思うはず。''depot_tools''を使えば以下のコマンドで簡単にできる。%0a $ git rebase-update%0a%0aThis command will update all of your CLs to contain the latest code from their upstreams. It will also automatically clean up CLs which have been committed and a couple other nice things. See git-rebase-update(1) for the full scoop.
time=1530738458
author:1530738458=
diff:1530738458:1530738428:=113,115d112%0a%3c  $ git rebase-update%0a%3c %0a%3c This command will update all of your CLs to contain the latest code from their upstreams. It will also automatically clean up CLs which have been committed and a couple other nice things. See git-rebase-update(1) for the full scoop.%0a\ No newline at end of file%0a
host:1530738458=192.168.3.2
author:1530738428=
diff:1530738428:1530737690:=112c112%0a%3c 不可避的に、メインのChromiumレポから変更をpullしたいと思うはず。''depot_tools''を使えば以下のコマンドで簡単にできる。%0a---%0a> 不可避的に、メインのChromiumレポから変更をpullしたいと思うはず。''dopo%0a\ No newline at end of file%0a
host:1530738428=192.168.3.2
author:1530737690=
diff:1530737690:1530737441:=
host:1530737690=192.168.3.2
author:1530737441=
diff:1530737441:1530737304:=110,112d109%0a%3c %0a%3c !コードのアップデート%0a%3c 不可避的に、メインのChromiumレポから変更をpullしたいと思うはず。''dopo%0a\ No newline at end of file%0a
host:1530737441=192.168.3.2
author:1530737304=
diff:1530737304:1530737269:=100d99%0a%3c %0a102d100%0a%3c %0a106d103%0a%3c %0a108d104%0a%3c %0a
host:1530737304=192.168.3.2
author:1530737269=
diff:1530737269:1530736943:=96,105c96%0a%3c !CLの作成とアップロード%0a%3c :'''Note''':ここ以降のチュートリアルではカレントディレクトリを''src/''にあるものとする。%0a%3c %0a%3c それぞれのCLは完全に１つのブランチと対応する。新しいCLを始めたい場合は以下のようにする。%0a%3c  $ git new-branch %3cbranch_name>%0a%3c これは'''branch_name'''という名前のブランチを作成してチェックアウトする。このブランチはデフォルトのアップストリームブランチ(origin/master)をトラックする。詳しくは、[[git-new-branch(1)]]を参照。%0a%3c %0a%3c このブランチに好きなだけコミットしていい。レビューのためにアップロードするには以下を実行。%0a%3c  $ git cl upload%0a%3c これはあなたのブランチとアップストリームブランチ（今の場合はorigin/master）の差分をとって、[[https://codereview.chromium.org/|Chromiumのコードレビューサイト]]にポストする。%0a---%0a> !CLの作成とアップロード%0a\ No newline at end of file%0a
host:1530737269=192.168.3.2
author:1530736943=
diff:1530736943:1530733495:=76,96c76%0a%3c  $ # ローカルのハッシュとは違う値になる。%0a%3c %0a%3c !コードの取得%0a%3c 空のディレクトリへ移動して、どれか好きなのを実行。%0a%3c  $ fetch chromium  # 基本チェックアウトのデスクトップChromium%0a%3c  $ fetch android   # AndroidのChromiumチェックアウト%0a%3c  $ fetch ios       # iOSのChromiumチェックアウト%0a%3c %0a%3c '''fetch'''が終わったら以下のものが出来ているはず。%0a%3c  .gclient   # ソースチェックアウトの構成ファイル%0a%3c  src/       # トップレベルのチェックアウト%0a%3c %0a%3c Linuxで'''fetch'''した場合は以下を実行。%0a%3c  $ cd src && ./build/install-build-deps.sh%0a%3c %0a%3c 最後に以下を実行%0a%3c  $ gclient sync%0a%3c %0a%3c これは依存しているものをチェックアウトする。'''src'''でブランチを変更したり、更新したりした場合は、これを実行しなければならない。%0a%3c %0a%3c !CLの作成とアップロード%0a\ No newline at end of file%0a---%0a>  $ # ローカルのハッシュとは違う値になる。%0a\ No newline at end of file%0a
host:1530736943=192.168.3.2
author:1530733495=
diff:1530733495:1530733243:=61,62c61,62%0a%3c  $ # コードを取得%0a%3c  $ # 空のディレクトリでやる%0a---%0a>  $ # get the code%0a>  $ # In an empty directory:%0a65c65%0a%3c  $ # サードパーティのレポを更新してプリコンパイルフックを実行%0a---%0a>  $ # Update third_party repos and run pre-compile hooks%0a68c68%0a%3c  $ # 新規変更を作成してアップロードしてレビューしてもらう%0a---%0a>  $ # Make a new change and upload it for review%0a70c70%0a%3c  $ # 繰り返し: [edit, git add, git commit]%0a---%0a>  $ # repeat: [edit, git add, git commit]%0a73c73%0a%3c  $ # 変更がレビューされたら、CQにコミット%0a---%0a>  $ # After change is reviewed, commit with the CQ%0a75,76c75,76%0a%3c  $ # 注意：コミットされて着地したハッシュは%0a%3c  $ # ローカルのハッシュとは違う値になる。%0a\ No newline at end of file%0a---%0a>  $ # Note that the committed hash which lands will /not/ match the%0a>  $ # commit hashes of your local branch.%0a\ No newline at end of file%0a
host:1530733495=192.168.3.2
author:1530733243=
diff:1530733243:1530733170:=58,76c58%0a%3c  $ git config --global color.ui true%0a%3c %0a%3c !長くて読んでない(TL;DR)%0a%3c  $ # get the code%0a%3c  $ # In an empty directory:%0a%3c  $ fetch {chromium,...}%0a%3c  %0a%3c  $ # Update third_party repos and run pre-compile hooks%0a%3c  $ gclient sync%0a%3c  %0a%3c  $ # Make a new change and upload it for review%0a%3c  $ git new-branch %3cbranch_name>%0a%3c  $ # repeat: [edit, git add, git commit]%0a%3c  $ git cl upload%0a%3c  %0a%3c  $ # After change is reviewed, commit with the CQ%0a%3c  $ git cl set_commit%0a%3c  $ # Note that the committed hash which lands will /not/ match the%0a%3c  $ # commit hashes of your local branch.%0a\ No newline at end of file%0a---%0a>  $ git config --global color.ui true%0a\ No newline at end of file%0a
host:1530733243=192.168.3.2
author:1530733170=
diff:1530733170:1530733155:=53,58c53,58%0a%3c  $ git config --global user.name "John Doe"%0a%3c  $ git config --global user.email "jdoe@email.com"%0a%3c  $ git config --global core.autocrlf false%0a%3c  $ git config --global core.filemode false%0a%3c  $ # and for fun!%0a%3c  $ git config --global color.ui true%0a\ No newline at end of file%0a---%0a> $ git config --global user.name "John Doe"%0a> $ git config --global user.email "jdoe@email.com"%0a> $ git config --global core.autocrlf false%0a> $ git config --global core.filemode false%0a> $ # and for fun!%0a> $ git config --global color.ui true%0a\ No newline at end of file%0a
host:1530733170=192.168.3.2
author:1530733155=
diff:1530733155:1530733014:=50,58d49%0a%3c %0a%3c !!構成のブートストラップ%0a%3c gitを使うのが初めてならいくつかの設定が必要、メールアドレスと名前を自分のに変えて以下を実行。%0a%3c $ git config --global user.name "John Doe"%0a%3c $ git config --global user.email "jdoe@email.com"%0a%3c $ git config --global core.autocrlf false%0a%3c $ git config --global core.filemode false%0a%3c $ # and for fun!%0a%3c $ git config --global color.ui true%0a\ No newline at end of file%0a
host:1530733155=192.168.3.2
author:1530733014=
diff:1530733014:1530733001:=46c46%0a%3c :'''Note''':%0a---%0a> :'''Note''':  　%0a
host:1530733014=192.168.3.2
author:1530733001=
diff:1530733001:1530732988:=46c46%0a%3c :'''Note''':  　%0a---%0a> :'''Note:''':  　%0a
host:1530733001=192.168.3.2
author:1530732988=
diff:1530732988:1530732973:=46c46%0a%3c :'''Note:''':  　%0a---%0a> :'''Note:''': %0a
host:1530732988=192.168.3.2
author:1530732973=
diff:1530732973:1530732961:=46c46%0a%3c :'''Note:''': %0a---%0a> :'''Note:''':%0a
host:1530732973=192.168.3.2
author:1530732961=
diff:1530732961:1530732912:=46,47c46%0a%3c :'''Note:''':%0a%3c * gclientはコマンドプロンプトから実行すること。%0a---%0a> :'''Note:''':* gclientはコマンドプロンプトから実行すること。%0a
host:1530732961=192.168.3.2
author:1530732912=
diff:1530732912:1530732437:=41,48d40%0a%3c :'''注意:''':隠しフォルダの.gitがちゃんと含まれるように解凍すること。コンテキストメニューの"Extract all..."が使える。%0a%3c %0a%3c ''depot_tools''へのパスをPATHの先頭に追加する（どのPythonよりも先になければならない）。%0a%3c コマンドプロンプトから''gclient''を実行する（引数無しで）。最初の実行で、'''msysgit'''や'''python'''などのツールをインストールする。%0a%3c %0a%3c :'''Note:''':* gclientはコマンドプロンプトから実行すること。%0a%3c * 変なエラーが出たら[[http://tortoisesvn.tigris.org/faq.html#cantmove2|Windowsインデクスを無効]]にする。%0a%3c * gclientが終わったら''where python''を実行して、このpythonが''depot_tools''配下にある'''python.bat'''になっているかを確認する。（https://crbug.com/611087)%0a
host:1530732912=192.168.3.2
author:1530732437=
diff:1530732437:1530732309:=32a33%0a> %0a34,39d34%0a%3c %0a%3c PATHの最後にdepot_toolsへのパスを追加する。~/.bashrcや~/.zshrcに書いておくといい。%0a%3c @@$ export PATH=$PATH:/path/to/depot_tools@@%0a%3c %0a%3c !!!Windows%0a%3c depot_toolsを[[https://storage.googleapis.com/chrome-infra/depot_tools.zip|まとめたもの]]をダウンロードして解凍する。%0a
host:1530732437=192.168.3.2
author:1530732309=
diff:1530732309:1530732220:=27,35c27%0a%3c ''git add'', ''git status'', ''git commit''の意味が理解できて、''git rebase''の意味を'''本質的に'''理解できていれば十分。%0a%3c %0a%3c !セットアップ%0a%3c !!DEPOT TOOLSの取得%0a%3c !!!Linux / MAC%0a%3c ''depot_tools''のレポジトリをcloneする%0a%3c %0a%3c @@$ git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git@@%0a%3c %0a---%0a> ''git add'', ''git status'', ''git commit''の意味が理解できて、''git rebase''の意味を'''本質的に'''理解できていれば十分。%0a\ No newline at end of file%0a
host:1530732309=192.168.3.2
author:1530732220=
diff:1530732220:1530732084:=23,27c23%0a%3c :'''Note:''':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a%3c %0a%3c !!前提条件%0a%3c gitについて知っていること。%0a%3c ''git add'', ''git status'', ''git commit''の意味が理解できて、''git rebase''の意味を'''本質的に'''理解できていれば十分。%0a\ No newline at end of file%0a---%0a> :'''Note''':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a
host:1530732220=192.168.3.2
author:1530732084=
diff:1530732084:1530732067:=23c23%0a%3c :'''Note''':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a---%0a> :[++Note++]:'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a
host:1530732084=192.168.3.2
author:1530732067=
diff:1530732067:1530732036:=23c23%0a%3c :[++Note++]:'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a---%0a> :[+Note+]:'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a
host:1530732067=192.168.3.2
author:1530732036=
diff:1530732036:1530732003:=23c23%0a%3c :[+Note+]:'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a---%0a> :'+Note+':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a
host:1530732036=192.168.3.2
author:1530732003=
diff:1530732003:1530731919:=23c23%0a%3c :'+Note+':'''[DEPOT_TOOLS]/man/html'''フォルダにhtmlのヘルプがある。%0a---%0a> :'+Note+':[DEPOT_TOOLS]/man/htmlフォルダにhtmlのヘルプがある。%0a
host:1530732003=192.168.3.2
author:1530731919=
diff:1530731919:1530731856:=23c23%0a%3c :'+Note+':[DEPOT_TOOLS]/man/htmlフォルダにhtmlのヘルプがある。%0a---%0a> :'+Note+':もし%0a\ No newline at end of file%0a
host:1530731919=192.168.3.2
author:1530731856=
diff:1530731856:1530731713:=23c23%0a%3c :'+Note+':もし%0a\ No newline at end of file%0a---%0a> '+Note+'%0a\ No newline at end of file%0a
host:1530731856=192.168.3.2
author:1530731713=
diff:1530731713:1530731700:=23c23%0a%3c '+Note+'%0a\ No newline at end of file%0a---%0a> +Note+%0a\ No newline at end of file%0a
host:1530731713=192.168.3.2
author:1530731700=
diff:1530731700:1530731177:=23d22%0a%3c +Note+%0a\ No newline at end of file%0a
host:1530731700=192.168.3.2
author:1530731177=
diff:1530731177:1530730749:=1,22c1%0a%3c http://commondatastorage.googleapis.com/chrome-infra-docs/flat/depot_tools/docs/html/depot_tools_tutorial.html%0a%3c %0a%3c !depot_tools_tutorial(7)マニュアルページ%0a%3c %0a%3c --%0a%3c %0a%3c !名前%0a%3c depot_tools_tutorial - depot_toolsのgit拡張のチュートリアル。%0a%3c %0a%3c !解説%0a%3c Chromiumの[[depot_tools(7)]]は誰もが専門家のようにChromiumコードベースの開発に参加できるようにするための作業効率化ツール。ここではこれらのツールを使った開発の説明をする。以下の項目が含まれる。%0a%3c * セットアップ%0a%3c * コード取得%0a%3c * 長くて読んでない(TL;DR)%0a%3c * CLの作成とアップロード%0a%3c * コードの更新%0a%3c * 複数のCLの管理%0a%3c * 依存しているCLの管理%0a%3c * 作業の流れの実例%0a%3c %0a%3c ここで言及されているコマンドの詳細はマニュアルを見るか''--help''を参照。%0a%3c %0a---%0a> a%0a\ No newline at end of file%0a
host:1530731177=192.168.3.2
author:1530730749=
diff:1530730749:1530730749:=1d0%0a%3c a%0a\ No newline at end of file%0a
host:1530730749=192.168.3.2
