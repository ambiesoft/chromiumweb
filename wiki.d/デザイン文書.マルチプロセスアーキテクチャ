version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.78 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502781020
host=192.168.0.2
name=デザイン文書.マルチプロセスアーキテクチャ
rev=9
targets=
text=
time=1502860293
author:1502860293=
diff:1502860293:1502783401:=0a1,47%0a> Chromiumの高レベルアーキテクチャ%0a> %0a> !問題点%0a> クラッシュしたりハングしたりしないレンダリングエンジンをつくるのはすごく難しい。完全に安全なものもつくるのが難しい。%0a> %0a> ２００６年ごろのブラウザは、過去のシングルユーザ、マルチタスクOSみたいなものだった。おかしなアプリがOSをダウンさせたように、おかしなウェブページがブラウザをダウンさせた。１つのブラウザやプラグインのバグがブラウザ全体をダウンさせ全タブがダウンした。%0a> %0a> 現代のOSはもっと堅牢になるようプロセスを分けていてその間は壁で仕切られている。１つのアプリケーションのクラッシュが他のアプリケーションに害を及ぼさない。そしてユーザごとの制限されたデータを持ち他のユーザから制限される。%0a> %0a> !アーキテクチャ全体図%0a> レンダリングエンジンのバグから守るために、ブラウザのタブに個別のプロセスを割り当てる。レンダリングエンジンにはアクセス制限も課す。これでOSのような保護を得られる。%0a> メインプロセスはブラウザプロセスあるいはブラウザと呼ばれ、UIを走らせタブを管理しプラグインプロセスを管理する。個々のタブのプロセスはレンダープロセスあるいはレンダラーと呼ばれる。レンダラーは[[https://www.chromium.org/blink|Blink]]オープンソースレイアウトエンジンが使われる。%0a> %0a> https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png%0a> %0a> !レンダープロセスの管理%0a> それぞれのレンダープロセスはグローバルオブジェクトRenderProcessをもち、これが親ブラウザプロセスとの通信を行ったり、グローバル状態を管理する。ブラウザはこれと対となるRenderProcessHostを各レンダープロセスに対してもち、レンダラとの通信やブラウザ状態管理をする。通信は[[https://www.chromium.org/developers/design-documents/inter-process-communication|Chromium IPC System]]をつかって行われる。%0a> %0a> !ビューの管理%0a> レンダープロセスは１個以上のRenderViewをもち、それらはタブの内容になる。対してRenderProcessHostはRenderViewHostをもつ。%0a> %0a> !コンポーネントとインターフェース%0a> レンダープロセスでは：%0a> *RenderProcessとRenderProcessHostがIPCのやり取りをする。%0a> *RenderViewはRenderProcessHostと通信する（RenderProcessを通じて）。%0a> %0a> ブラウザプロセスでは：%0a> *Browserオブジェクトがトップレベルのブラウザウインドウを表す。%0a> *RenderViewHostはRenderViewとの通信をカプセル化する。%0a> *RenderWidgetHostがRenderWidgetの入力や描画をカプセル化する。%0a> %0a> !レンダープロセスの共有%0a> 新しいタブが開かれたとき、ブラウザはプロセスを作成し１つのRenderViewを作成するよう指示する。%0a> %0a> 時にはレンダープロセスをタブ間で共有することが望ましい場合もある。Javascriptのwindow.open()で開かれ同期通信する場合や、プロセスが多すぎる場合や、開かれるドメインのが既に開かれていた場合など。%0a> %0a> %0a> !クラッシュの監視と行儀の悪いレンダラ%0a> IPC接続はプロセスハンドルを監視していて、これがシグナル化した時はレンダープロセスがクラッシュしたということでタブは悲しいのタブになる。%0a> %0a> !レンダラのサンドボックス化%0a> サンドボックスによってレンダラのアクセスを制限する。例えばネットワークアクセスはブラウザを通してのみ行う。ファイルアクセスはOSの機能を通じて行う。%0a> それに加えてレンダラはユーザからはみえないDesktopで実行される。これは浸食されたレンダラが新規ウインドウを開いたり、キーストロークをキャプチャするのを防ぐ。%0a> %0a> %0a> %0a> [[https://www.chromium.org/developers/design-documents/multi-process-architecture|オリジナル]]%0a\ No newline at end of file%0a
host:1502860293=192.168.0.2
author:1502783401=
diff:1502783401:1502782642:=35,44c35%0a%3c 時にはレンダープロセスをタブ間で共有することが望ましい場合もある。Javascriptのwindow.open()で開かれ同期通信する場合や、プロセスが多すぎる場合や、開かれるドメインのが既に開かれていた場合など。%0a%3c %0a%3c %0a%3c !クラッシュの監視と行儀の悪いレンダラ%0a%3c IPC接続はプロセスハンドルを監視していて、これがシグナル化した時はレンダープロセスがクラッシュしたということでタブは悲しいのタブになる。%0a%3c %0a%3c !レンダラのサンドボックス化%0a%3c サンドボックスによってレンダラのアクセスを制限する。例えばネットワークアクセスはブラウザを通してのみ行う。ファイルアクセスはOSの機能を通じて行う。%0a%3c それに加えてレンダラはユーザからはみえないDesktopで実行される。これは浸食されたレンダラが新規ウインドウを開いたり、キーストロークをキャプチャするのを防ぐ。%0a%3c %0a---%0a> 時にはレンダープロセスをタブ間で共有することが望ましい場合もある。%0a
host:1502783401=192.168.0.2
author:1502782642=
diff:1502782642:1502782304:=33,38d32%0a%3c 新しいタブが開かれたとき、ブラウザはプロセスを作成し１つのRenderViewを作成するよう指示する。%0a%3c %0a%3c 時にはレンダープロセスをタブ間で共有することが望ましい場合もある。%0a%3c %0a%3c %0a%3c [[https://www.chromium.org/developers/design-documents/multi-process-architecture|オリジナル]]%0a\ No newline at end of file%0a
host:1502782642=192.168.0.2
author:1502782304=
diff:1502782304:1502781477:=17,32c17%0a%3c それぞれのレンダープロセスはグローバルオブジェクトRenderProcessをもち、これが親ブラウザプロセスとの通信を行ったり、グローバル状態を管理する。ブラウザはこれと対となるRenderProcessHostを各レンダープロセスに対してもち、レンダラとの通信やブラウザ状態管理をする。通信は[[https://www.chromium.org/developers/design-documents/inter-process-communication|Chromium IPC System]]をつかって行われる。%0a%3c %0a%3c !ビューの管理%0a%3c レンダープロセスは１個以上のRenderViewをもち、それらはタブの内容になる。対してRenderProcessHostはRenderViewHostをもつ。%0a%3c %0a%3c !コンポーネントとインターフェース%0a%3c レンダープロセスでは：%0a%3c *RenderProcessとRenderProcessHostがIPCのやり取りをする。%0a%3c *RenderViewはRenderProcessHostと通信する（RenderProcessを通じて）。%0a%3c %0a%3c ブラウザプロセスでは：%0a%3c *Browserオブジェクトがトップレベルのブラウザウインドウを表す。%0a%3c *RenderViewHostはRenderViewとの通信をカプセル化する。%0a%3c *RenderWidgetHostがRenderWidgetの入力や描画をカプセル化する。%0a%3c %0a%3c !レンダープロセスの共有%0a---%0a> それぞれのレンダープロセスはグローバルオブジェクトRenderProcessをもち、これが親ブラウザプロセスとの通信を行ったり、グローバル状態を管理する。ブラウザはこれと対となるRenderProcessHostを各レンダープロセスに対してもち、レンダラとの通信やブラウザ状態管理をする。通信は[[https://www.chromium.org/developers/design-documents/inter-process-communication|Chromium IPC System]]をつかって行われる。%0a\ No newline at end of file%0a
host:1502782304=192.168.0.2
author:1502781477=
diff:1502781477:1502781179:=14,17c14%0a%3c https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png%0a%3c %0a%3c !レンダープロセスの管理%0a%3c それぞれのレンダープロセスはグローバルオブジェクトRenderProcessをもち、これが親ブラウザプロセスとの通信を行ったり、グローバル状態を管理する。ブラウザはこれと対となるRenderProcessHostを各レンダープロセスに対してもち、レンダラとの通信やブラウザ状態管理をする。通信は[[https://www.chromium.org/developers/design-documents/inter-process-communication|Chromium IPC System]]をつかって行われる。%0a\ No newline at end of file%0a---%0a> https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png%0a\ No newline at end of file%0a
host:1502781477=192.168.0.2
author:1502781179=
diff:1502781179:1502781114:=14c14%0a%3c https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png%0a\ No newline at end of file%0a---%0a> [[https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png]]%0a\ No newline at end of file%0a
host:1502781179=192.168.0.2
author:1502781114=
diff:1502781114:1502781056:=12,14c12%0a%3c メインプロセスはブラウザプロセスあるいはブラウザと呼ばれ、UIを走らせタブを管理しプラグインプロセスを管理する。個々のタブのプロセスはレンダープロセスあるいはレンダラーと呼ばれる。レンダラーは[[https://www.chromium.org/blink|Blink]]オープンソースレイアウトエンジンが使われる。%0a%3c %0a%3c [[https://www.chromium.org/_/rsrc/1220197832277/developers/design-documents/multi-process-architecture/arch.png]]%0a\ No newline at end of file%0a---%0a> メインプロセスはブラウザプロセスあるいはブラウザと呼ばれ、UIを走らせタブを管理しプラグインプロセスを管理する。個々のタブのプロセスはレンダープロセスあるいはレンダラーと呼ばれる。レンダラーは[[https://www.chromium.org/blink|Blink]]オープンソースレイアウトエンジンが使われる。%0a\ No newline at end of file%0a
host:1502781114=192.168.0.2
author:1502781056=
diff:1502781056:1502781020:=
host:1502781056=192.168.0.2
author:1502781020=
diff:1502781020:1502781020:=1,12d0%0a%3c Chromiumの高レベルアーキテクチャ%0a%3c %0a%3c !問題点%0a%3c クラッシュしたりハングしたりしないレンダリングエンジンをつくるのはすごく難しい。完全に安全なものもつくるのが難しい。%0a%3c %0a%3c ２００６年ごろのブラウザは、過去のシングルユーザ、マルチタスクOSみたいなものだった。おかしなアプリがOSをダウンさせたように、おかしなウェブページがブラウザをダウンさせた。１つのブラウザやプラグインのバグがブラウザ全体をダウンさせ全タブがダウンした。%0a%3c %0a%3c 現代のOSはもっと堅牢になるようプロセスを分けていてその間は壁で仕切られている。１つのアプリケーションのクラッシュが他のアプリケーションに害を及ぼさない。そしてユーザごとの制限されたデータを持ち他のユーザから制限される。%0a%3c %0a%3c !アーキテクチャ全体図%0a%3c レンダリングエンジンのバグから守るために、ブラウザのタブに個別のプロセスを割り当てる。レンダリングエンジンにはアクセス制限も課す。これでOSのような保護を得られる。%0a%3c メインプロセスはブラウザプロセスあるいはブラウザと呼ばれ、UIを走らせタブを管理しプラグインプロセスを管理する。個々のタブのプロセスはレンダープロセスあるいはレンダラーと呼ばれる。レンダラーは[[https://www.chromium.org/blink|Blink]]オープンソースレイアウトエンジンが使われる。%0a\ No newline at end of file%0a
host:1502781020=192.168.0.2
