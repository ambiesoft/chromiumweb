version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1529970788
host=192.168.3.2
name=ビルドツール.GN-ツールチェイン
rev=4
targets=
text=!gn help toolchain%0a!!ツールチェイン%0aツールチェインはソースコードをコンパイルするためのコマンドとビルドフラグの集まりである。%0a%0a!!ツールチェイン外観%0aビルド実行時にいくつものツールチェインを持つことができ、ターゲットは多数のツールチェインと同時に存在できる。ビルドファイルは参照されるすべてのツールチェインごとに実行され、GNコードはツールチェインごとにパラメータを変更できる。%0a%0a単純な１つのツールチェインを使うビルドがあるとき、ビルド設定ファイルはビルドの開始時にロードされる。そのとき''set_default_toolchain()''が呼ばれ（"gn help set_default_toolchain"を参照）GNに使うツールチェインのラベルを与える。ツールチェイン定義の''toolchain_args''セクションは無視される。%0a%0aターゲットが他のツールチェインを使うターゲットに依存しているとき（"gn help labels"参照）、GNは２番めのツールチェインを使ってビルドを行う。GNは''toolchain_args''で指定された値を上書きしたビルド引数でビルド設定をロードする。デフォルトのツールチェインはすでに知られているので''set_default_toolchain()''呼び出しは無視される。%0a%0a２番めのツールチェインでファイルを読み込むとき、GNは以下を行う：%0a#ツールチェインが中で定義されているファイルを読み込む：%0a#マスタービルド設定ファイルを再実行する、このときツールチェイン定義の''toolchain_args''セクションが適用される。%0a#上のステップで構成されたコンテキストで目的のビルドファイルをロードする。%0a%0aツールチェインの構成は２方向である。デフォルトのツールチェイン（例えばメインのビルドターゲット）では構成はビルド設定ファイルからツールチェインに流れる。ビルド設定ファイルはビルドの状態を見て（OSタイプ、CPUアーキテクチャ、など）どのツールチェインを使うかを決める（''set_default_toolchain()''経由で）。２番めのツールチェインでは、構成はツールチェインからビルド設定ファイルに流れる：ツールチェイン定義の''toolchain_args''でビルドが再実行される。%0a%0a!!関数と変数%0a!!!tool()%0a''tool()''関数呼び出しはコマンドを指定する（"gn help tool"参照）。%0a%0a!!!toolchain_args%0a実行時にビルド引数を上書きし、ツールチェインに渡す。これは''scope''タイプの変数であり、変数名は''declare_args()''ブロックの変数に対応する。%0a%0a２番めのツールチェインを使ってターゲットを指定したとき、マスタービルド構成ファイルはそのツールチェインのコンテキストで再解釈される。''toolchain_args''は２番めのビルド実行の引数をコントロールする。%0a%0aデフォルトのシステム引数や''gn args''経由の引数も同様に２番めの実行に渡される。ただし''toolchain_args''で上書きされているときは別である。%0a%0aツールチェインがデフォルトのときは''toolchain_args''は無視される。%0a%0aこれらの引数の概要は"gn help buildargs"を参照。%0a%0a!!!deps%0aツールチェインの依存関係。これらの依存はコンパイルが始まる前に解決される。循環依存を避けるため、これらのターゲットは他のツールチェインで定義されていなければならない。%0a%0aこれはターゲットにリストで表され、一般的にはツールチェインを指定する。%0a [=%0adeps = [ "//foo/bar:baz(//build//toolchain:bootstrap)" ]%0a=]%0a%0aこのコンセプトはNinjaで表現するには不十分である（多くのルールの複製が必要になる）ので絶対に必要なときのみ使うべきである。%0a%0a!!ツールチェイン定義の例%0a [=%0atoolchain("32") {%0a  tool("cc") {%0a    command = "gcc {{source}}"%0a    ...%0a  }%0a%0a  toolchain_args = {%0a    use_doom_melon = true  # Doom melon always required for 32-bit builds.%0a    current_cpu = "x86"%0a  }%0a}%0a%0atoolchain("64") {%0a  tool("cc") {%0a    command = "gcc {{source}}"%0a    ...%0a  }%0a%0a  toolchain_args = {%0a    # use_doom_melon is not overridden here, it will take the default.%0a    current_cpu = "x64"%0a  }%0a}%0a%0a  toolchain_args = {%0a    # The 64-bit build needs this 32-bit helper.%0a    data_deps = [ ":helper(//toolchains:32)" ]%0a  }%0a}%0a=]%0a%0a!!クロスツールチェインの依存関係の例%0a６４ビットのターゲットが３２ビットのバイナリに依存したい場合、''data_deps''を指定する。（data依存は実行時に必要とされリンクされないもの、６４ビットと３２ビットはリンクできないため）。%0a%0a [=%0aexecutable("my_program") {%0a  ...%0a  if (target_cpu == "x64") {%0a    # The 64-bit build needs this 32-bit helper.%0a    data_deps = [ ":helper(//toolchains:32)" ]%0a  }%0a}%0a%0aif (target_cpu == "x86") {%0a  # Our helper library is only compiled in 32-bits.%0a  shared_library("helper") {%0a    ...%0a  }%0a}%0a=]
time=1529972827
author:1529972827=
diff:1529972827:1529972792:=75,76c75%0a%3c =]%0a%3c %0a---%0a> %0a95c94%0a%3c =]%0a\ No newline at end of file%0a---%0a> %0a
host:1529972827=192.168.3.2
author:1529972792=
diff:1529972792:1529972499:=76,93d75%0a%3c !!クロスツールチェインの依存関係の例%0a%3c ６４ビットのターゲットが３２ビットのバイナリに依存したい場合、''data_deps''を指定する。（data依存は実行時に必要とされリンクされないもの、６４ビットと３２ビットはリンクできないため）。%0a%3c %0a%3c  [=%0a%3c executable("my_program") {%0a%3c   ...%0a%3c   if (target_cpu == "x64") {%0a%3c     # The 64-bit build needs this 32-bit helper.%0a%3c     data_deps = [ ":helper(//toolchains:32)" ]%0a%3c   }%0a%3c }%0a%3c %0a%3c if (target_cpu == "x86") {%0a%3c   # Our helper library is only compiled in 32-bits.%0a%3c   shared_library("helper") {%0a%3c     ...%0a%3c   }%0a%3c }%0a
host:1529972792=192.168.3.2
author:1529972499=
diff:1529972499:1529970788:=22,75d21%0a%3c %0a%3c !!!toolchain_args%0a%3c 実行時にビルド引数を上書きし、ツールチェインに渡す。これは''scope''タイプの変数であり、変数名は''declare_args()''ブロックの変数に対応する。%0a%3c %0a%3c ２番めのツールチェインを使ってターゲットを指定したとき、マスタービルド構成ファイルはそのツールチェインのコンテキストで再解釈される。''toolchain_args''は２番めのビルド実行の引数をコントロールする。%0a%3c %0a%3c デフォルトのシステム引数や''gn args''経由の引数も同様に２番めの実行に渡される。ただし''toolchain_args''で上書きされているときは別である。%0a%3c %0a%3c ツールチェインがデフォルトのときは''toolchain_args''は無視される。%0a%3c %0a%3c これらの引数の概要は"gn help buildargs"を参照。%0a%3c %0a%3c !!!deps%0a%3c ツールチェインの依存関係。これらの依存はコンパイルが始まる前に解決される。循環依存を避けるため、これらのターゲットは他のツールチェインで定義されていなければならない。%0a%3c %0a%3c これはターゲットにリストで表され、一般的にはツールチェインを指定する。%0a%3c  [=%0a%3c deps = [ "//foo/bar:baz(//build//toolchain:bootstrap)" ]%0a%3c =]%0a%3c %0a%3c このコンセプトはNinjaで表現するには不十分である（多くのルールの複製が必要になる）ので絶対に必要なときのみ使うべきである。%0a%3c %0a%3c !!ツールチェイン定義の例%0a%3c  [=%0a%3c toolchain("32") {%0a%3c   tool("cc") {%0a%3c     command = "gcc {{source}}"%0a%3c     ...%0a%3c   }%0a%3c %0a%3c   toolchain_args = {%0a%3c     use_doom_melon = true  # Doom melon always required for 32-bit builds.%0a%3c     current_cpu = "x86"%0a%3c   }%0a%3c }%0a%3c %0a%3c toolchain("64") {%0a%3c   tool("cc") {%0a%3c     command = "gcc {{source}}"%0a%3c     ...%0a%3c   }%0a%3c %0a%3c   toolchain_args = {%0a%3c     # use_doom_melon is not overridden here, it will take the default.%0a%3c     current_cpu = "x64"%0a%3c   }%0a%3c }%0a%3c %0a%3c   toolchain_args = {%0a%3c     # The 64-bit build needs this 32-bit helper.%0a%3c     data_deps = [ ":helper(//toolchains:32)" ]%0a%3c   }%0a%3c }%0a%3c %0a
host:1529972499=192.168.3.2
author:1529970788=
diff:1529970788:1529970788:=1,22d0%0a%3c !gn help toolchain%0a%3c !!ツールチェイン%0a%3c ツールチェインはソースコードをコンパイルするためのコマンドとビルドフラグの集まりである。%0a%3c %0a%3c !!ツールチェイン外観%0a%3c ビルド実行時にいくつものツールチェインを持つことができ、ターゲットは多数のツールチェインと同時に存在できる。ビルドファイルは参照されるすべてのツールチェインごとに実行され、GNコードはツールチェインごとにパラメータを変更できる。%0a%3c %0a%3c 単純な１つのツールチェインを使うビルドがあるとき、ビルド設定ファイルはビルドの開始時にロードされる。そのとき''set_default_toolchain()''が呼ばれ（"gn help set_default_toolchain"を参照）GNに使うツールチェインのラベルを与える。ツールチェイン定義の''toolchain_args''セクションは無視される。%0a%3c %0a%3c ターゲットが他のツールチェインを使うターゲットに依存しているとき（"gn help labels"参照）、GNは２番めのツールチェインを使ってビルドを行う。GNは''toolchain_args''で指定された値を上書きしたビルド引数でビルド設定をロードする。デフォルトのツールチェインはすでに知られているので''set_default_toolchain()''呼び出しは無視される。%0a%3c %0a%3c ２番めのツールチェインでファイルを読み込むとき、GNは以下を行う：%0a%3c #ツールチェインが中で定義されているファイルを読み込む：%0a%3c #マスタービルド設定ファイルを再実行する、このときツールチェイン定義の''toolchain_args''セクションが適用される。%0a%3c #上のステップで構成されたコンテキストで目的のビルドファイルをロードする。%0a%3c %0a%3c ツールチェインの構成は２方向である。デフォルトのツールチェイン（例えばメインのビルドターゲット）では構成はビルド設定ファイルからツールチェインに流れる。ビルド設定ファイルはビルドの状態を見て（OSタイプ、CPUアーキテクチャ、など）どのツールチェインを使うかを決める（''set_default_toolchain()''経由で）。２番めのツールチェインでは、構成はツールチェインからビルド設定ファイルに流れる：ツールチェイン定義の''toolchain_args''でビルドが再実行される。%0a%3c %0a%3c !!関数と変数%0a%3c !!!tool()%0a%3c ''tool()''関数呼び出しはコマンドを指定する（"gn help tool"参照）。%0a%3c %0a
host:1529970788=192.168.3.2
