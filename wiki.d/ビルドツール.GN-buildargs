version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; rv:11.0) like Gecko
author=
charset=UTF-8
csum=
ctime=1529937348
host=192.168.3.2
name=ビルドツール.GN-buildargs
rev=5
targets=
text=!gn help buildargs%0a%0a!!ビルド引数外観%0aビルド引数はビルドファイルが参照する変数。%0a%0a!!どのようにビルド引数が設定されるか%0a最初に、システムデフォルトの値が設定される。それらは以下%0a   - host_cpu%0a   - host_os%0a   - current_cpu%0a   - current_os%0a   - target_cpu%0a   - target_os%0a%0a次に.gnに記述されるデフォルトの設定で上書きされてから、プロジェクトごとの設定で上書きされる。"gn help dotfile"で.gnについて知ることができる。%0a%0a--argsで指定された値で上書きされる。指定されない場合は、args.gnの値が使われる。%0a%0a最後に、非デフォルトツールチェインでコンパイルされるターゲットについては、ツールチェインの値で上書きされる。これらの値はツールチェイン定義のツールチェイン引数セクションで指定される。一例としては、ツールチェインはプラットフォームごとにコードをビルドするので、常にPosixを指定したい場合などである。"gn help toolchain"を参照%0a%0a上書きしたビルド引数が'''declare_args'''呼び出しに現れなかった場合、致命的でないエラーが表示される。%0a%0a例：%0a gn args out/FooBar%0aディレクトリout/FooBarを作り、エディタを開く。以下のようなものを設定できる。%0a enable_doom_melon=false%0a os="android"%0a%0a%0a　%0a gn gen out/FooBar --args="enable_doom_melon=true os=\"android\""%0aビルドディレクトリのビルド引数を上書きする。（ダブルクオートはシェルにより必要になる場合がある）%0a%0a!!ビルド引数がどのように使われるか%0a%0a引数を使いたい場合は'''declare_args()'''を使いデフォルト値を指定する。デフォルト値は上書きされない限りその値が使われるが、デフォルト値が何かを上書きすることはない。%0a%0aしばしば、ルードのビルド設定ファイルがグローバル引数を宣言し、それが他のすべてのビルドファイルに引き継がれる。ここのビルドファイルでの設定はそのビルドのみに影響する。デフォルト値を'''import'''してから個別の値を設定すると便利である。%0a%0a
time=1529941549
author:1529941549=
diff:1529941549:1529941525:=28d27%0a%3c %0a
host:1529941549=192.168.3.2
author:1529941525=
diff:1529941525:1529941505:=29c29%0a%3c 　%0a---%0a> %0a
host:1529941525=192.168.3.2
author:1529941505=
diff:1529941505:1529941102:=29d28%0a%3c %0a31,37c30,45%0a%3c ビルドディレクトリのビルド引数を上書きする。（ダブルクオートはシェルにより必要になる場合がある）%0a%3c %0a%3c !!ビルド引数がどのように使われるか%0a%3c %0a%3c 引数を使いたい場合は'''declare_args()'''を使いデフォルト値を指定する。デフォルト値は上書きされない限りその値が使われるが、デフォルト値が何かを上書きすることはない。%0a%3c %0a%3c しばしば、ルードのビルド設定ファイルがグローバル引数を宣言し、それが他のすべてのビルドファイルに引き継がれる。ここのビルドファイルでの設定はそのビルドのみに影響する。デフォルト値を'''import'''してから個別の値を設定すると便利である。%0a---%0a> %0a>       This will overwrite the build directory with the given arguments. (Note%0a>       that the quotes inside the args command will usually need to be escaped%0a>       for your shell to pass through strings values.)%0a> %0a> How build arguments are used%0a> %0a>   If you want to use an argument, you use declare_args() and specify default%0a>   values. These default values will apply if none of the steps listed in the%0a>   "How build arguments are set" section above apply to the given argument, but%0a>   the defaults will not override any of these.%0a> %0a>   Often, the root build config file will declare global arguments that will be%0a>   passed to all buildfiles. Individual build files can also specify arguments%0a>   that apply only to those files. It is also useful to specify build args in an%0a>   "import"-ed file if you want such arguments to apply to multiple buildfiles.%0a
host:1529941505=192.168.3.2
author:1529941102=
diff:1529941102:1529937348:=19,30c19,35%0a%3c 最後に、非デフォルトツールチェインでコンパイルされるターゲットについては、ツールチェインの値で上書きされる。これらの値はツールチェイン定義のツールチェイン引数セクションで指定される。一例としては、ツールチェインはプラットフォームごとにコードをビルドするので、常にPosixを指定したい場合などである。"gn help toolchain"を参照%0a%3c %0a%3c 上書きしたビルド引数が'''declare_args'''呼び出しに現れなかった場合、致命的でないエラーが表示される。%0a%3c %0a%3c 例：%0a%3c  gn args out/FooBar%0a%3c ディレクトリout/FooBarを作り、エディタを開く。以下のようなものを設定できる。%0a%3c  enable_doom_melon=false%0a%3c  os="android"%0a%3c %0a%3c  gn gen out/FooBar --args="enable_doom_melon=true os=\"android\""%0a%3c %0a---%0a> 最後に、非デフォルトツールチェインでコンパイルされるターゲットについては、ツールチェインの値で上書きされる。これらの値はツールチェイン定義のツールチェイン引数セクションで指定される。%0a> The use-case for this is that a toolchain may be%0a>   building code for a different platform, and that it may want to always%0a>   specify Posix, for example. See "gn help toolchain" for more.%0a> %0a>   If you specify an override for a build argument that never appears in a%0a>   "declare_args" call, a nonfatal error will be displayed.%0a> %0a> Examples%0a> %0a>   gn args out/FooBar%0a>       Create the directory out/FooBar and open an editor. You would type%0a>       something like this into that file:%0a>           enable_doom_melon=false%0a>           os="android"%0a> %0a>   gn gen out/FooBar --args="enable_doom_melon=true os=\"android\""%0a
host:1529941102=192.168.3.2
author:1529937348=
diff:1529937348:1529937348:=1,51d0%0a%3c !gn help buildargs%0a%3c %0a%3c !!ビルド引数外観%0a%3c ビルド引数はビルドファイルが参照する変数。%0a%3c %0a%3c !!どのようにビルド引数が設定されるか%0a%3c 最初に、システムデフォルトの値が設定される。それらは以下%0a%3c    - host_cpu%0a%3c    - host_os%0a%3c    - current_cpu%0a%3c    - current_os%0a%3c    - target_cpu%0a%3c    - target_os%0a%3c %0a%3c 次に.gnに記述されるデフォルトの設定で上書きされてから、プロジェクトごとの設定で上書きされる。"gn help dotfile"で.gnについて知ることができる。%0a%3c %0a%3c --argsで指定された値で上書きされる。指定されない場合は、args.gnの値が使われる。%0a%3c %0a%3c 最後に、非デフォルトツールチェインでコンパイルされるターゲットについては、ツールチェインの値で上書きされる。これらの値はツールチェイン定義のツールチェイン引数セクションで指定される。%0a%3c The use-case for this is that a toolchain may be%0a%3c   building code for a different platform, and that it may want to always%0a%3c   specify Posix, for example. See "gn help toolchain" for more.%0a%3c %0a%3c   If you specify an override for a build argument that never appears in a%0a%3c   "declare_args" call, a nonfatal error will be displayed.%0a%3c %0a%3c Examples%0a%3c %0a%3c   gn args out/FooBar%0a%3c       Create the directory out/FooBar and open an editor. You would type%0a%3c       something like this into that file:%0a%3c           enable_doom_melon=false%0a%3c           os="android"%0a%3c %0a%3c   gn gen out/FooBar --args="enable_doom_melon=true os=\"android\""%0a%3c       This will overwrite the build directory with the given arguments. (Note%0a%3c       that the quotes inside the args command will usually need to be escaped%0a%3c       for your shell to pass through strings values.)%0a%3c %0a%3c How build arguments are used%0a%3c %0a%3c   If you want to use an argument, you use declare_args() and specify default%0a%3c   values. These default values will apply if none of the steps listed in the%0a%3c   "How build arguments are set" section above apply to the given argument, but%0a%3c   the defaults will not override any of these.%0a%3c %0a%3c   Often, the root build config file will declare global arguments that will be%0a%3c   passed to all buildfiles. Individual build files can also specify arguments%0a%3c   that apply only to those files. It is also useful to specify build args in an%0a%3c   "import"-ed file if you want such arguments to apply to multiple buildfiles.%0a%3c %0a
host:1529937348=192.168.3.2
