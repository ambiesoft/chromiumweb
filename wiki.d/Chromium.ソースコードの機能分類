version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.186 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1502772425
host=192.168.3.2
name=Chromium.ソースコードの機能分類
rev=31
targets=
text=
time=1520062125
author:1520062125=
diff:1520062125:1502779692:=0a1,110%0a> ブラウザとレンダラとWebkitから構成される。ブラウザはメインプロセスでUIとIOを担当。レンダラはサブプロセスで描画を担当。Webkitはレンダラの手伝い。%0a> %0a> %0a> !トップレベルプロジェクト%0a> %0a> *'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供。%0a> *'''apps''': ChromeをパッケージしたApp%0a> *'''base''': 下位のプロジェクトで使う共通コード。文字列操作や、汎用ユーティリティ、トップレベルプロジェクトで共通に使うコードはここに置く。%0a> *'''breakpad''': Googleのオープンソースクラッシュレポートプロジェクト。Google Codeのsubversionから持ってきている。%0a> *'''build''': すべてのプロジェクトで使うビルド関連の設定。%0a> *'''cc''': Chromium compositor実装。%0a> *'''chrome''': Chromiumブラウザ（下記参照）。%0a> *'''chrome/test/data''': 一部テストのためのデータファイル。%0a> *'''components''':  Content Moduleをもつcomponentのためのディレクトリ。 directory for components that have the Content Module as the uppermost layer they depend on.%0a> *'''content''': マルチプロセスサンドボックスブラウザ（下記参照）の中核コード。%0a> *'''device''': 共通な下位レベルハードウェアAPIのクロスプラットフォーム抽象。%0a> *'''net''': ネットワーキングライブラリ。See also chrome/common/net.%0a> *'''sandbox''': サンドボックスプロジェクト。ハックされたレンダラからのシステム保護を志向。%0a> *'''skia''': アンドロイド向けに開発されたSkiaグラフィックライブラリ。アンドロイドツリーからのコピー。 追加のクラスは ui/gfxでSkiaをラップ。%0a> *'''sql''': sqliteのラップ。%0a> *'''testing''': GoogleのオープンソースGTestのコード。ユニットテストで使う。%0a> *'''third_party''': 多くの外部ライブラリ、イメージデコーダや圧縮ライブラリ。Chrome特定のライブラリはchrome/third_party。%0a> *'''tools''': %0a> *'''ui/gfx''': 共用グラフィッククラス。ChromiumのUIを形成する。%0a> *'''ui/views''': UI開発のフレームワーク。レンダリング、レイアウト、イベントハンドリングを提供する。ブラウザのUIはこのシステムで実装する。このディレクトリはベースオブジェクトを含みブラウザ特定のオブジェクトはchrome/browser/ui/viewsにある。%0a> *'''url''': GoogleのオープンソースURLパーサ＆正規化ライブラリ%0a> *'''v8''': The V8 Javascript library. Google CodeのSubversionからpullしてきた。%0a> *'''webkit''': ChromiumのWebkit関連物%0a> **'''appcache''':%0a> **'''base''':%0a> **'''blob''':%0a> **'''build''': 残りのプロジェクトのためのプロジェクトファイルや構成。%0a> **'''data''': Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a> **'''glue''': glueレイヤは埋め込みレイヤ。Webcoreのタイプと我々のタイプの（大体STL）の変換、Webcoreを使うための便利なメソッドの提供。%0a> **'''tools'''%0a> ***'''layout_tests''': WebCoreレイアウトテストのためのスクリプト。%0a> ***'''merge''': WebKitツリーにマージするのと助けるスクリプト。%0a> ***'''npapi_layout_test_plugin''': プラグインレイヤテストのための特別なプラグイン。%0a> ***'''test_shell''': とてもシンプルなスタンドアロンブラウザ。guleやport codeのテストで使う。%0a> %0a> %0a>  %0a> 以下は依存関係の図。下位モジュールは上位モジュールのコードを直接includeできない。（例：contentはchromeのヘッダをインクルードできない）、が、embedder APIでしゃべることはできる。%0a> %0a>  [[Page|Attach:content.png]]%0a> %0a> !contentディレクトリ配下の簡単な説明%0a> *'''browser''': アプリがIOやサブプロセスと通信するバックエンド、レンダラとも会話する。%0a> *'''common''': マルチプロセス共通で使うファイル（ブラウザとレンダラ、レンダラとプラグインなど）。これはChromiumの特別コードでbaseには当てはまらない。%0a> *'''gpu''': GPUプロセスのコード。3D関連。%0a> *'''plugin''': 他プロセスでプラグインを実行するコード。%0a> *'''ppapi_plugin''': Pepperプラグインプロセスのコード%0a> *'''renderer''': １つ１つのタブでのサブプロセスのコード。WebKitを取り込み、IOのためにbrowserと通信。%0a> *'''utility''': サンドボックス化されたプロセスでランダムなオペレーションを実行するコード。browserは信頼できないデータのオペレーションに使う。%0a> *'''worker''': HTML5 Web Workersを実行するコード。%0a> %0a> !chromeディレクトリ配下の簡単な説明%0a> *'''app''': プログラムのもっとも基本的レベル。スタートアップで実行され、browserやrendererに処理を投げる。chrome.exeやchrome.dllのプロジェクトを含む。リソース以外には基本的に触る必要はない。%0a> **'''locales''': ローカライズされたDLLのビルドする。%0a> **'''resources''': アイコンやカーソル。%0a> **'''theme''': ウインドウのテーマイメージ。%0a> *'''browser''': メインウインドウを含むフロントエンドUI。アプリにとってはIOやstorageのバックエンド。rendererと会話しウェブページを管理。%0a> **'''ui''': モデル、ビュー、コントローラのコード、UI機能。%0a> *'''common''': chromeモジュールでbrowserとrendererでつかう共通ファイル。%0a> **'''net''': トップレベルモジュールnetへのChromium特定物。browser/netとマージされるべき。%0a> *'''installer''': MSIパッケージをつくる。%0a> *'''renderer''': レンダラプロセスで走るChrome特定のコード。autofillや翻訳機能をcontentモジュールに追加。%0a> *'''third_party''': Chromium特定のサードパーティライブラリ。他のサードパーティライブラリはトップレベルのthird_partyにある。%0a> *'''tools''': %0a> **'''build''': ビルド関連%0a> ***'''buildbot''': ビルドボット構成。ビルドボットは自動ビルドシステム。third_party/buildbot参照%0a> ***'''win''': Windowsビルド関連。.vspropsなどのプロジェクトプロパティやスクリプト。%0a> **'''memory''': メモリ関連。ページヒープオプション設定のgflagsを含む。%0a> **'''perf/dashboard''': パフォーマンスログ（例：test/startup_test）をデータやグラフに変換。%0a> **'''profiles''': ランダムヒストリーデータのジェネレータ。テストプロファイル作成。%0a> %0a> !個人的学習計画%0a> ようやくビルドセットアップが終わり仕事に取り掛かりたい。完全な世界ではコードを書く前にのすべてを読み理解するのだが、無理なのでいくつかの開始のためのアドバイス。%0a> 幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。若干古いが、コードの連関と理解するのに役立つ。%0a> %0a> !!もっとも重要な開発文書を読む%0a> [[https://www.chromium.org/developers/design-documents/multi-process-architecture|マルチプロセスアーキテクチャ]]%0a> %0a> [[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|chromeでウェブページを表示]]%0a> %0a> [[https://www.chromium.org/developers/design-documents/inter-process-communication|プロセス間通信]]%0a> %0a> [[https://www.chromium.org/developers/design-documents/threading|スレッド]]%0a> %0a> !!コードイディオムを学ぶ%0a> [[https://www.chromium.org/developers/coding-style/important-abstractions-and-data-structures|抽象化とデータ構造]]%0a> %0a> [[https://www.chromium.org/developers/smart-pointer-guidelines|スマートポインタガイドライン]]%0a> %0a> [[https://www.chromium.org/developers/chromium-string-usage|chromiumでの文字列]]%0a> %0a> %0a> !!コードの実行順序%0a> 追加情報と具体例は[[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|ここ]]。%0a> %0a> !!!アプリケーションスタートアップ%0a> #WinMainがchrome/app/main.ccにある。%0a> #WinMainはGoogle Update Clientを起動、これは自動アップデータ。次にサブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a> #新しくロードされたライブラリがChromeMainをコール、これはchrome_dllプロジェクトのchrome_main.ccにある。%0a> #ChromeMainは共通コンポーネントを初期化し、RenderMainへ進むか、BrowserMainに進む。これはコマンドラインオプションによる。%0a> %0a> !!!タブのスタートアップ＆最初のナビゲーション%0a> #%0a> %0a> https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code%0a\ No newline at end of file%0a
host:1520062125=192.168.3.2
author:1502779692=
diff:1502779692:1502779643:=1,3c1,3%0a%3c ブラウザとレンダラとWebkitから構成される。ブラウザはメインプロセスでUIとIOを担当。レンダラはサブプロセスで描画を担当。Webkitはレンダラの手伝い。%0a%3c %0a%3c %0a---%0a> ブラウザとレンダラとWebkitから構成されます。ブラウザはメインプロセスでUIとIOを担当します。レンダラはサブプロセスで描画を担当します。Webkitはレンダラの手伝いをします。%0a> %0a> %0a6c6%0a%3c *'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供。%0a---%0a> *'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供します。%0a
host:1502779692=192.168.0.2
author:1502779643=
diff:1502779643:1502779515:=
host:1502779643=192.168.0.2
author:1502779515=
diff:1502779515:1502779292:=103,107c103%0a%3c #WinMainはGoogle Update Clientを起動、これは自動アップデータ。次にサブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a%3c #新しくロードされたライブラリがChromeMainをコール、これはchrome_dllプロジェクトのchrome_main.ccにある。%0a%3c #ChromeMainは共通コンポーネントを初期化し、RenderMainへ進むか、BrowserMainに進む。これはコマンドラインオプションによる。%0a%3c %0a%3c !!!タブのスタートアップ＆最初のナビゲーション%0a---%0a> #WinMainはGoogle Update Clientを起動、これは自動アップデータ。サブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a
host:1502779515=192.168.0.2
author:1502779292=
diff:1502779292:1502779252:=92d91%0a%3c %0a94d92%0a%3c %0a100d97%0a%3c %0a
host:1502779292=192.168.0.2
author:1502779252=
diff:1502779252:1502779228:=83d82%0a%3c %0a85d83%0a%3c %0a87d84%0a%3c %0a
host:1502779252=192.168.0.2
author:1502779228=
diff:1502779228:1502778738:=79,98c79%0a%3c 幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。若干古いが、コードの連関と理解するのに役立つ。%0a%3c %0a%3c !!もっとも重要な開発文書を読む%0a%3c [[https://www.chromium.org/developers/design-documents/multi-process-architecture|マルチプロセスアーキテクチャ]]%0a%3c [[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|chromeでウェブページを表示]]%0a%3c [[https://www.chromium.org/developers/design-documents/inter-process-communication|プロセス間通信]]%0a%3c [[https://www.chromium.org/developers/design-documents/threading|スレッド]]%0a%3c %0a%3c !!コードイディオムを学ぶ%0a%3c [[https://www.chromium.org/developers/coding-style/important-abstractions-and-data-structures|抽象化とデータ構造]]%0a%3c [[https://www.chromium.org/developers/smart-pointer-guidelines|スマートポインタガイドライン]]%0a%3c [[https://www.chromium.org/developers/chromium-string-usage|chromiumでの文字列]]%0a%3c %0a%3c %0a%3c !!コードの実行順序%0a%3c 追加情報と具体例は[[https://www.chromium.org/developers/design-documents/displaying-a-web-page-in-chrome|ここ]]。%0a%3c !!!アプリケーションスタートアップ%0a%3c #WinMainがchrome/app/main.ccにある。%0a%3c #WinMainはGoogle Update Clientを起動、これは自動アップデータ。サブディレクトリから現バージョンのchrome.dllを見つけてロード。%0a%3c #%0a---%0a> 幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。%0a
host:1502779228=192.168.0.2
author:1502778738=
diff:1502778738:1502778707:=79c79%0a%3c 幸いにも最高品質のdocsが[[https://www.chromium.org/developers/design-documents|ここ]]にある。%0a---%0a> 幸いにも最高品質のdocsが[[ここ|https://www.chromium.org/developers/design-documents]]にある。%0a
host:1502778738=192.168.0.2
author:1502778707=
diff:1502778707:1502778409:=76,80d75%0a%3c %0a%3c !個人的学習計画%0a%3c ようやくビルドセットアップが終わり仕事に取り掛かりたい。完全な世界ではコードを書く前にのすべてを読み理解するのだが、無理なのでいくつかの開始のためのアドバイス。%0a%3c 幸いにも最高品質のdocsが[[ここ|https://www.chromium.org/developers/design-documents]]にある。%0a%3c %0a
host:1502778707=192.168.0.2
author:1502778409=
diff:1502778409:1502778142:=71,75c71%0a%3c ***'''buildbot''': ビルドボット構成。ビルドボットは自動ビルドシステム。third_party/buildbot参照%0a%3c ***'''win''': Windowsビルド関連。.vspropsなどのプロジェクトプロパティやスクリプト。%0a%3c **'''memory''': メモリ関連。ページヒープオプション設定のgflagsを含む。%0a%3c **'''perf/dashboard''': パフォーマンスログ（例：test/startup_test）をデータやグラフに変換。%0a%3c **'''profiles''': ランダムヒストリーデータのジェネレータ。テストプロファイル作成。%0a---%0a> ***%0a
host:1502778409=192.168.0.2
author:1502778142=
diff:1502778142:1502777146:=57,71d56%0a%3c !chromeディレクトリ配下の簡単な説明%0a%3c *'''app''': プログラムのもっとも基本的レベル。スタートアップで実行され、browserやrendererに処理を投げる。chrome.exeやchrome.dllのプロジェクトを含む。リソース以外には基本的に触る必要はない。%0a%3c **'''locales''': ローカライズされたDLLのビルドする。%0a%3c **'''resources''': アイコンやカーソル。%0a%3c **'''theme''': ウインドウのテーマイメージ。%0a%3c *'''browser''': メインウインドウを含むフロントエンドUI。アプリにとってはIOやstorageのバックエンド。rendererと会話しウェブページを管理。%0a%3c **'''ui''': モデル、ビュー、コントローラのコード、UI機能。%0a%3c *'''common''': chromeモジュールでbrowserとrendererでつかう共通ファイル。%0a%3c **'''net''': トップレベルモジュールnetへのChromium特定物。browser/netとマージされるべき。%0a%3c *'''installer''': MSIパッケージをつくる。%0a%3c *'''renderer''': レンダラプロセスで走るChrome特定のコード。autofillや翻訳機能をcontentモジュールに追加。%0a%3c *'''third_party''': Chromium特定のサードパーティライブラリ。他のサードパーティライブラリはトップレベルのthird_partyにある。%0a%3c *'''tools''': %0a%3c **'''build''': ビルド関連%0a%3c ***%0a
host:1502778142=192.168.0.2
author:1502777146=
diff:1502777146:1502776490:=46,55d45%0a%3c %0a%3c !contentディレクトリ配下の簡単な説明%0a%3c *'''browser''': アプリがIOやサブプロセスと通信するバックエンド、レンダラとも会話する。%0a%3c *'''common''': マルチプロセス共通で使うファイル（ブラウザとレンダラ、レンダラとプラグインなど）。これはChromiumの特別コードでbaseには当てはまらない。%0a%3c *'''gpu''': GPUプロセスのコード。3D関連。%0a%3c *'''plugin''': 他プロセスでプラグインを実行するコード。%0a%3c *'''ppapi_plugin''': Pepperプラグインプロセスのコード%0a%3c *'''renderer''': １つ１つのタブでのサブプロセスのコード。WebKitを取り込み、IOのためにbrowserと通信。%0a%3c *'''utility''': サンドボックス化されたプロセスでランダムなオペレーションを実行するコード。browserは信頼できないデータのオペレーションに使う。%0a%3c *'''worker''': HTML5 Web Workersを実行するコード。%0a
host:1502777146=192.168.0.2
author:1502776490=
diff:1502776490:1502776473:=42c42%0a%3c  %0a---%0a> %0a
host:1502776490=192.168.0.2
author:1502776473=
diff:1502776473:1502776223:=40d39%0a%3c %0a
host:1502776473=192.168.0.2
author:1502776223=
diff:1502776223:1502776208:=44c44%0a%3c  [[Page|Attach:content.png]]%0a---%0a>  [[Attach:content.png ]]%0a
host:1502776223=192.168.0.2
author:1502776208=
diff:1502776208:1502776162:=44c44%0a%3c  [[Attach:content.png ]]%0a---%0a>  [[Page| Attach:content.png ]]%0a
host:1502776208=192.168.0.2
author:1502776162=
diff:1502776162:1502776153:=
host:1502776162=192.168.0.2
author:1502776153=
diff:1502776153:1502776109:=44c44%0a%3c  [[Page| Attach:content.png ]]%0a---%0a> [[Page|content.png]]%0a
host:1502776153=192.168.0.2
author:1502776109=
diff:1502776109:1502776090:=44c44%0a%3c [[Page|content.png]]%0a---%0a> [[content.png]]%0a
host:1502776109=192.168.0.2
author:1502776090=
diff:1502776090:1502775392:=44d43%0a%3c [[content.png]]%0a
host:1502776090=192.168.0.2
author:1502775392=
diff:1502775392:1502775103:=40,43d39%0a%3c %0a%3c %0a%3c 以下は依存関係の図。下位モジュールは上位モジュールのコードを直接includeできない。（例：contentはchromeのヘッダをインクルードできない）、が、embedder APIでしゃべることはできる。%0a%3c %0a
host:1502775392=192.168.0.2
author:1502775103=
diff:1502775103:1502774946:=38,39c38,39%0a%3c ***'''npapi_layout_test_plugin''': プラグインレイヤテストのための特別なプラグイン。%0a%3c ***'''test_shell''': とてもシンプルなスタンドアロンブラウザ。guleやport codeのテストで使う。%0a---%0a> npapi_layout_test_plugin: A special plug-in used by some of our tests to exercise the plugin layer.%0a>             test_shell: A very simple standalone browser. This allows testing of our glue and port code without having to compile and run the very large Chromium application. %0a
host:1502775103=192.168.0.2
author:1502774946=
diff:1502774946:1502774843:=37,38c37,38%0a%3c ***'''merge''': WebKitツリーにマージするのと助けるスクリプト。%0a%3c npapi_layout_test_plugin: A special plug-in used by some of our tests to exercise the plugin layer.%0a---%0a>             merge: Scripts for helping merge to WebKit's tree.%0a>             npapi_layout_test_plugin: A special plug-in used by some of our tests to exercise the plugin layer.%0a
host:1502774946=192.168.0.2
author:1502774843=
diff:1502774843:1502774272:=26,36c26,36%0a%3c *'''url''': GoogleのオープンソースURLパーサ＆正規化ライブラリ%0a%3c *'''v8''': The V8 Javascript library. Google CodeのSubversionからpullしてきた。%0a%3c *'''webkit''': ChromiumのWebkit関連物%0a%3c **'''appcache''':%0a%3c **'''base''':%0a%3c **'''blob''':%0a%3c **'''build''': 残りのプロジェクトのためのプロジェクトファイルや構成。%0a%3c **'''data''': Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a%3c **'''glue''': glueレイヤは埋め込みレイヤ。Webcoreのタイプと我々のタイプの（大体STL）の変換、Webcoreを使うための便利なメソッドの提供。%0a%3c **'''tools'''%0a%3c ***'''layout_tests''': WebCoreレイアウトテストのためのスクリプト。%0a---%0a>     url: Google's open source URL parsing and canonicalization library.%0a>     v8: The V8 Javascript library. This is pulled directly from Google Code's Subversion repository.%0a>     webkit: All of Chromium's Webkit-related stuff:%0a>         appcache:%0a>         base:%0a>         blob:%0a>         build: Project files and configurations for the rest of the projects.%0a>         data: Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a>         glue: The glue layer is the embedding layer. It converts between Webcore types and our application's types (mostly STL), and provides more convenient methods that mirror a lot of Webcore's objects we need access to.%0a>         tools%0a>             layout_tests: Scripts for running WebCore's layout tests.%0a
host:1502774843=192.168.0.2
author:1502774272=
diff:1502774272:1502773913:=21,25c21,25%0a%3c *'''testing''': GoogleのオープンソースGTestのコード。ユニットテストで使う。%0a%3c *'''third_party''': 多くの外部ライブラリ、イメージデコーダや圧縮ライブラリ。Chrome特定のライブラリはchrome/third_party。%0a%3c *'''tools''': %0a%3c *'''ui/gfx''': 共用グラフィッククラス。ChromiumのUIを形成する。%0a%3c *'''ui/views''': UI開発のフレームワーク。レンダリング、レイアウト、イベントハンドリングを提供する。ブラウザのUIはこのシステムで実装する。このディレクトリはベースオブジェクトを含みブラウザ特定のオブジェクトはchrome/browser/ui/viewsにある。%0a---%0a> *'''testing''': Contains Google's open-sourced GTest code which we use for unit testing.%0a>     third_party: A bunch of external libraries such as image decoders and compression libraries. There are also some Chrome-specific third-party libraries in chrome/third_party. Adding new packages.%0a>     tools%0a>     ui/gfx: Shared graphics classes. These form the base of Chromium's UI graphics.%0a>     ui/views: A simple framework for doing UI development, providing rendering, layout and event handling. Most of the browser UI is implemented in this system. This directory contains the base objects. Some more browser-specific objects are in chrome/browser/ui/views.%0a
host:1502774272=192.168.0.2
author:1502773913=
diff:1502773913:1502773232:=10,21c10,21%0a%3c *'''build''': すべてのプロジェクトで使うビルド関連の設定。%0a%3c *'''cc''': Chromium compositor実装。%0a%3c *'''chrome''': Chromiumブラウザ（下記参照）。%0a%3c *'''chrome/test/data''': 一部テストのためのデータファイル。%0a%3c *'''components''':  Content Moduleをもつcomponentのためのディレクトリ。 directory for components that have the Content Module as the uppermost layer they depend on.%0a%3c *'''content''': マルチプロセスサンドボックスブラウザ（下記参照）の中核コード。%0a%3c *'''device''': 共通な下位レベルハードウェアAPIのクロスプラットフォーム抽象。%0a%3c *'''net''': ネットワーキングライブラリ。See also chrome/common/net.%0a%3c *'''sandbox''': サンドボックスプロジェクト。ハックされたレンダラからのシステム保護を志向。%0a%3c *'''skia''': アンドロイド向けに開発されたSkiaグラフィックライブラリ。アンドロイドツリーからのコピー。 追加のクラスは ui/gfxでSkiaをラップ。%0a%3c *'''sql''': sqliteのラップ。%0a%3c *'''testing''': Contains Google's open-sourced GTest code which we use for unit testing.%0a---%0a>     build: Build-related configuration shared by all projects.%0a>     cc: The Chromium compositor implementation.%0a>     chrome: The Chromium browser (see below).%0a>     chrome/test/data: Data files for running certain tests.%0a>     components:  directory for components that have the Content Module as the uppermost layer they depend on.%0a>     content: The core code needed for a multi-process sandboxed browser (see below). More information about why we have separated out this code.%0a>     device: Cross-platform abstractions of common low-level hardware APIs.%0a>     net: The networking library developed for Chromium. This can be used separately from Chromium when running our simple test_shell in the webkit repository. See also chrome/common/net.%0a>     sandbox: The sandbox project which tries to prevent a hacked renderer from modifying the system.%0a>     skia: Google's Skia graphics library developed for Android. This is a copy from Android's tree. Our additional classes in ui/gfx wrap Skia.%0a>     sql: Our wrap around sqlite.%0a>     testing: Contains Google's open-sourced GTest code which we use for unit testing.%0a
host:1502773913=192.168.0.2
author:1502773232=
diff:1502773232:1502772944:=7,9c7,9%0a%3c *'''apps''': ChromeをパッケージしたApp%0a%3c *'''base''': 下位のプロジェクトで使う共通コード。文字列操作や、汎用ユーティリティ、トップレベルプロジェクトで共通に使うコードはここに置く。%0a%3c *'''breakpad''': Googleのオープンソースクラッシュレポートプロジェクト。Google Codeのsubversionから持ってきている。%0a---%0a> *'''apps''': Chrome packaged apps.%0a>     base: Common code shared between all sub-projects. This contains things like string manipulation, generic utilities, etc. Add things here only if it must be shared between more than one other top-level project. %0a>     breakpad: Google's open source crash reporting project. This is pulled directly from Google Code's Subversion repository.%0a
host:1502773232=192.168.0.2
author:1502772944=
diff:1502772944:1502772759:=6,7c6,7%0a%3c *'''android_webview''': アンドロイドプラットフォームのためのsrc/contentの簡易インタフェースを提供します。%0a%3c *'''apps''': Chrome packaged apps.%0a---%0a> *android_webview: Provides a facade over src/content suitable for integration into the android platform. NOT intended for usage in individual android applications (APK). More information about the Android WebView source code organization.%0a>     apps: Chrome packaged apps.%0a
host:1502772944=192.168.0.2
author:1502772759=
diff:1502772759:1502772707:=6,39d5%0a%3c *android_webview: Provides a facade over src/content suitable for integration into the android platform. NOT intended for usage in individual android applications (APK). More information about the Android WebView source code organization.%0a%3c     apps: Chrome packaged apps.%0a%3c     base: Common code shared between all sub-projects. This contains things like string manipulation, generic utilities, etc. Add things here only if it must be shared between more than one other top-level project. %0a%3c     breakpad: Google's open source crash reporting project. This is pulled directly from Google Code's Subversion repository.%0a%3c     build: Build-related configuration shared by all projects.%0a%3c     cc: The Chromium compositor implementation.%0a%3c     chrome: The Chromium browser (see below).%0a%3c     chrome/test/data: Data files for running certain tests.%0a%3c     components:  directory for components that have the Content Module as the uppermost layer they depend on.%0a%3c     content: The core code needed for a multi-process sandboxed browser (see below). More information about why we have separated out this code.%0a%3c     device: Cross-platform abstractions of common low-level hardware APIs.%0a%3c     net: The networking library developed for Chromium. This can be used separately from Chromium when running our simple test_shell in the webkit repository. See also chrome/common/net.%0a%3c     sandbox: The sandbox project which tries to prevent a hacked renderer from modifying the system.%0a%3c     skia: Google's Skia graphics library developed for Android. This is a copy from Android's tree. Our additional classes in ui/gfx wrap Skia.%0a%3c     sql: Our wrap around sqlite.%0a%3c     testing: Contains Google's open-sourced GTest code which we use for unit testing.%0a%3c     third_party: A bunch of external libraries such as image decoders and compression libraries. There are also some Chrome-specific third-party libraries in chrome/third_party. Adding new packages.%0a%3c     tools%0a%3c     ui/gfx: Shared graphics classes. These form the base of Chromium's UI graphics.%0a%3c     ui/views: A simple framework for doing UI development, providing rendering, layout and event handling. Most of the browser UI is implemented in this system. This directory contains the base objects. Some more browser-specific objects are in chrome/browser/ui/views.%0a%3c     url: Google's open source URL parsing and canonicalization library.%0a%3c     v8: The V8 Javascript library. This is pulled directly from Google Code's Subversion repository.%0a%3c     webkit: All of Chromium's Webkit-related stuff:%0a%3c         appcache:%0a%3c         base:%0a%3c         blob:%0a%3c         build: Project files and configurations for the rest of the projects.%0a%3c         data: Most of the directories contain data used by unit tests of our porting layer. the layout_tests directory is WebKit's layout test suite that we pull directly from Apple.%0a%3c         glue: The glue layer is the embedding layer. It converts between Webcore types and our application's types (mostly STL), and provides more convenient methods that mirror a lot of Webcore's objects we need access to.%0a%3c         tools%0a%3c             layout_tests: Scripts for running WebCore's layout tests.%0a%3c             merge: Scripts for helping merge to WebKit's tree.%0a%3c             npapi_layout_test_plugin: A special plug-in used by some of our tests to exercise the plugin layer.%0a%3c             test_shell: A very simple standalone browser. This allows testing of our glue and port code without having to compile and run the very large Chromium application. %0a
host:1502772759=192.168.0.2
author:1502772707=
diff:1502772707:1502772425:=1,7c1%0a%3c ブラウザとレンダラとWebkitから構成されます。ブラウザはメインプロセスでUIとIOを担当します。レンダラはサブプロセスで描画を担当します。Webkitはレンダラの手伝いをします。%0a%3c %0a%3c %0a%3c !トップレベルプロジェクト%0a%3c %0a%3c %0a%3c https://www.chromium.org/developers/how-tos/getting-around-the-chrome-source-code%0a\ No newline at end of file%0a---%0a> ブラウザとレンダラとWebkitから構成されます。ブラウザはメインプロセスでUIとIOを担当します。レンダラはサブプロセスで描画を担当します。Webkitはレンダラの手伝いをします。%0a\ No newline at end of file%0a
host:1502772707=192.168.0.2
author:1502772425=
diff:1502772425:1502772425:=1d0%0a%3c ブラウザとレンダラとWebkitから構成されます。ブラウザはメインプロセスでUIとIOを担当します。レンダラはサブプロセスで描画を担当します。Webkitはレンダラの手伝いをします。%0a\ No newline at end of file%0a
host:1502772425=192.168.0.2
