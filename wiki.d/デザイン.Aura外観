version=pmwiki-2.2.102 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530327729
host=192.168.3.2
name=デザイン.Aura外観
rev=3
targets=
text=https://www.chromium.org/developers/design-documents/aura/aura-overview%0a%0a!Aura外観%0a%0ahttps://www.chromium.org/developers/design-documents/aura/aura-overview/Aura.png%0a%0aユーザ視点から見れば、Auraはウインドウとイベント型を提供する。カスタマイズするためのインタフェースも提供する。%0a%0aウインドウ階層のルートは''RootWindow''である。イベント配送に責任を持つ。%0a%0aAuraウインドウ階層はネイティブなウインドウの中に組み入れられる。このネイティブウインドウは''RootWindowHost''でカプセル化される。このホストはシステムからネイティブイベントを受け取り、''aura::Event''へ変形し、RootWindowへ送る。%0a%0a多くの点でAuraアーキテクチャはビューに似ているがより単純になっている。%0a%0a!イベントの流れ%0a%0ahttps://www.chromium.org/developers/design-documents/aura/aura-overview/EventFlow.png%0a%0aこの図はAuraシステムでのイベントの流れの各ステージである。%0a%0a#''RootWindowHost''が''base::NativeEvent''(MSGやXEvent*)をシステムから受け取る。%0a#''RootWindowHost''がこのメッセージを''aura::Event*''に変形して、''RootWindow''へ転送する。%0a#イベントの型により、イベントのターゲットが決まる。下記の配達を参照%0a#''aura::EventFilter*''が登録されていれば、イベントが処理される前になんらかの処理をすることができる。EventFilterがtrueを返せば、さらなるプロセスを止めることができる。EventFilterはパワフルなAPI。%0a#''EventFilter''でイベントが止められなかったら、ターゲットウインドウの代表者へ渡される。ウインドウ自体はイベントを直接見ない。Auraではウインドウのカスタマイズは代表者（''WindowDelegate''）によって行われるからである。%0a%0a%0a%0a
time=1530330374
author:1530330374=
diff:1530330374:1530327802:=21,28c21,27%0a%3c #''RootWindowHost''が''base::NativeEvent''(MSGやXEvent*)をシステムから受け取る。%0a%3c #''RootWindowHost''がこのメッセージを''aura::Event*''に変形して、''RootWindow''へ転送する。%0a%3c #イベントの型により、イベントのターゲットが決まる。下記の配達を参照%0a%3c #''aura::EventFilter*''が登録されていれば、イベントが処理される前になんらかの処理をすることができる。EventFilterがtrueを返せば、さらなるプロセスを止めることができる。EventFilterはパワフルなAPI。%0a%3c #''EventFilter''でイベントが止められなかったら、ターゲットウインドウの代表者へ渡される。ウインドウ自体はイベントを直接見ない。Auraではウインドウのカスタマイズは代表者（''WindowDelegate''）によって行われるからである。%0a%3c %0a%3c %0a%3c %0a---%0a> %0a> %0a> The RootWindowHost receives a base::NativeEvent (MSG/XEvent*) from the underlying platform.%0a> The RootWindowHost cracks this message to an aura::Event* type and forwards it to the RootWindow for further processing and dispatch.%0a> Depending on the event type, a target window for event dispatch is determined for the event. See notes on dispatch below.%0a> Every registered aura::EventFilter* from the target window up to and including the RootWindow is given an opportunity to pre-handle the event. An EventFilter implementation will return true if it wants to consume the event and stop further processing. EventFilter is a powerful API to intercept events before the target Window gets a chance to handle them. It can be used by a client to implement features like window movement, modality, and so on.%0a> Finally if no EventFilter intercepts the event, it is passed directly to the target window's delegate. The Window itself never sees the event directly, since window customization in Aura is done entirely through delegate interfaces like EventFilter, WindowDelegate, etc.%0a\ No newline at end of file%0a
host:1530330374=192.168.3.2
author:1530327802=
diff:1530327802:1530327729:=14,27d13%0a%3c %0a%3c !イベントの流れ%0a%3c %0a%3c https://www.chromium.org/developers/design-documents/aura/aura-overview/EventFlow.png%0a%3c %0a%3c この図はAuraシステムでのイベントの流れの各ステージである。%0a%3c %0a%3c %0a%3c %0a%3c The RootWindowHost receives a base::NativeEvent (MSG/XEvent*) from the underlying platform.%0a%3c The RootWindowHost cracks this message to an aura::Event* type and forwards it to the RootWindow for further processing and dispatch.%0a%3c Depending on the event type, a target window for event dispatch is determined for the event. See notes on dispatch below.%0a%3c Every registered aura::EventFilter* from the target window up to and including the RootWindow is given an opportunity to pre-handle the event. An EventFilter implementation will return true if it wants to consume the event and stop further processing. EventFilter is a powerful API to intercept events before the target Window gets a chance to handle them. It can be used by a client to implement features like window movement, modality, and so on.%0a%3c Finally if no EventFilter intercepts the event, it is passed directly to the target window's delegate. The Window itself never sees the event directly, since window customization in Aura is done entirely through delegate interfaces like EventFilter, WindowDelegate, etc.%0a\ No newline at end of file%0a
host:1530327802=192.168.3.2
author:1530327729=
diff:1530327729:1530327729:=1,13d0%0a%3c https://www.chromium.org/developers/design-documents/aura/aura-overview%0a%3c %0a%3c !Aura外観%0a%3c %0a%3c https://www.chromium.org/developers/design-documents/aura/aura-overview/Aura.png%0a%3c %0a%3c ユーザ視点から見れば、Auraはウインドウとイベント型を提供する。カスタマイズするためのインタフェースも提供する。%0a%3c %0a%3c ウインドウ階層のルートは''RootWindow''である。イベント配送に責任を持つ。%0a%3c %0a%3c Auraウインドウ階層はネイティブなウインドウの中に組み入れられる。このネイティブウインドウは''RootWindowHost''でカプセル化される。このホストはシステムからネイティブイベントを受け取り、''aura::Event''へ変形し、RootWindowへ送る。%0a%3c %0a%3c 多くの点でAuraアーキテクチャはビューに似ているがより単純になっている。%0a
host:1530327729=192.168.3.2
