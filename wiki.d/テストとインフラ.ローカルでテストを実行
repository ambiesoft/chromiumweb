version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1530718371
host=192.168.3.2
name=テストとインフラ.ローカルでテストを実行
rev=17
targets=テストとインフラ.ブラウザテスト
text=https://www.chromium.org/developers/testing/running-tests%0a%0a!基本テストを実行(バイナリをgtest)%0a%0a多くのテストがChromiumのUIを作成するのでデスクトップ環境が必要になる。それがない場合はXvfbを利用できる。下記のヘッドレスモードに関する記述を参照。%0a%0a!特定のサブテストを実行%0a''--gtest_filter=FileUtilTest.*''の用に実行してサブテストのみを実行できる。%0a%0a!出力を加工%0aテストの実行を早くするにめ、可視ウインドウを作成するテストはデフォルトではそのウインドウの何も描画しない。テストに可視ピクセルを描画させるには''--enable-pixel-output-in-tests''コマンドラインフラグを使う。これはユニットテストとブラウザテストで使える。%0a%0a!レイアウトテスト%0aBlinkはページレイアウトのテストのための大きいテストスイートを持っている。このテストをするには'''blink_tests'''をビルドし、''blink/tools/layout_tests/run_webkit_tests.sh --debug''を実行する。%0a%0a!ユニットテストとブラウザテスト%0aほとんどのsrc/のトップレベルディレクトリはユニットテストがある。例えば'''content/'''には'''content_unittests'''があり、'''cc/'''には'''cc_unittests'''、'''components/'''には'''components_unittests'''がある。%0a%0a'''Chrome'''スタックをすべて含む'''unit_tests'''ターゲットもある。%0a%0aユニットテストは'''Chromium'''コードのある一部を個別の環境内で検証するために使う。通常'''_unittests.cc'''がファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常'''_browsertest.cc'''がつく。[[テストとインフラ/ブラウザテスト]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a%0a!WindowsでChromiumのクラッシュからダンプを取得%0aテストを開始する前に'''crash_service.exe'''を実行しておく。これはクラッシュに介入しクラッシュダンプを作成する。クラッシュダンプは'''Chromium'''プロファイルの'''User Data Directory'''の'''Crash Reports'''フォルダに書き込まれる。%0a%0a'''crash_service.exe'''で通常の'''Chrome'''や'''Chromium'''のクラッシュダンプはを作成したいときは、''--noerrdialogs''フラグをつける。''--enable-dcheck''をつけるとリリースモードでもアサートエラーが得られる。%0a%0a!ヘッドレスモードで実行%0asshでマシンを使っているときはディスプレイがないので、スクリーンに書き込むテストを実行できない。しかしLinuxでは'''xvfb(X virtual Frame Buffer)'''と'''ヘッドレスモード'''を使えばテストを実行できる。いくつかのやり方がある。%0a%0a'''unittests'''と'''testing/xvfb.py'''を使った実例（'''xcompmgr'''をインストールしておく必要があるがこれは'''install-build-deps.sh'''を実行していれば行われている）。%0a%0a python testing/xvfb.py out/Default/components_unittests%0a%0a実行中の'''Xvfb'''でブラウザテストを実行。'''DISPLAY'''環境変数を設定して行う。%0a%0a Xvfb :100 -screen 0 1600x1200x24 &%0a  %0a DISPLAY=localhost:100 out/Default/browser_tests​ --gtest_filter=FooTest.*%0a%0a%0a'''xvfb-run'''を使った実例。%0a%0a xvfb-run -s "-screen 0 1024x768x24" ./out/Default/content_unittests%0a%0a----%0a終了：2018/07/06 (金) 14:16:14
time=1530854635
author:1530854635=
diff:1530854635:1530854569:=
host:1530854635=192.168.3.2
author:1530854569=
diff:1530854569:1530854394:=17,22c17,22%0a%3c ほとんどのsrc/のトップレベルディレクトリはユニットテストがある。例えば'''content/'''には'''content_unittests'''があり、'''cc/'''には'''cc_unittests'''、'''components/'''には'''components_unittests'''がある。%0a%3c %0a%3c '''Chrome'''スタックをすべて含む'''unit_tests'''ターゲットもある。%0a%3c %0a%3c ユニットテストは'''Chromium'''コードのある一部を個別の環境内で検証するために使う。通常'''_unittests.cc'''がファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常'''_browsertest.cc'''がつく。[[テストとインフラ/ブラウザテスト]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a%3c %0a---%0a> ほとんどのsrc/のトップレベルディレクトリはユニットテストがある。例えばcontent/にはcontent_unittestsがあり、cc/にはcc_unittests、components/にはcomponents_unittestsがある。%0a> %0a> Chromeスタックをすべて含むunit_testsターゲットもある。%0a> %0a> ユニットテストはChromiumコードのある一部を個別の環境内で検証するために使う。通常_unittests.ccがファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常_browsertest.ccがつく。[[テストとインフラ/ブラウザテスト]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a> %0a24,27c24,27%0a%3c テストを開始する前に'''crash_service.exe'''を実行しておく。これはクラッシュに介入しクラッシュダンプを作成する。クラッシュダンプは'''Chromium'''プロファイルの'''User Data Directory'''の'''Crash Reports'''フォルダに書き込まれる。%0a%3c %0a%3c '''crash_service.exe'''で通常の'''Chrome'''や'''Chromium'''のクラッシュダンプはを作成したいときは、''--noerrdialogs''フラグをつける。''--enable-dcheck''をつけるとリリースモードでもアサートエラーが得られる。%0a%3c %0a---%0a> テストを開始する前にcrash_service.exeを実行しておく。これはクラッシュに介入しクラッシュダンプを作成する。クラッシュダンプはChromiumプロファイルのUser Data DirectoryのCrash Reportsフォルダに書き込まれる。%0a> %0a> crash_service.exeで通常のChromeやChromiumのクラッシュダンプはを作成したいときは、--noerrdialogsフラグをつける。--enable-dcheckをつけるとリリースモードでもアサートエラーが得られる。%0a> %0a29,32c29,32%0a%3c sshでマシンを使っているときはディスプレイがないので、スクリーンに書き込むテストを実行できない。しかしLinuxでは'''xvfb(X virtual Frame Buffer)'''と'''ヘッドレスモード'''を使えばテストを実行できる。いくつかのやり方がある。%0a%3c %0a%3c '''unittests'''と'''testing/xvfb.py'''を使った実例（'''xcompmgr'''をインストールしておく必要があるがこれは'''install-build-deps.sh'''を実行していれば行われている）。%0a%3c %0a---%0a> sshでマシンを使っているときはディスプレイがないので、スクリーンに書き込むテストを実行できない。しかしLinuxではxvfb(X virtual Frame Buffer)とヘッドレスモードを使えばテストを実行できる。いくつかのやり方がある。%0a> %0a> unittestsとtesting/xvfb.pyを使った実例（xcompmgrをインストールしておく必要があるがこれはinstall-build-deps.shを実行していれば行われている）。%0a> %0a35,36c35,36%0a%3c 実行中の'''Xvfb'''でブラウザテストを実行。'''DISPLAY'''環境変数を設定して行う。%0a%3c %0a---%0a> 実行中のXvfbでブラウザテストを実行。DISPLAY環境変数を設定して行う。%0a> %0a42c42%0a%3c '''xvfb-run'''を使った実例。%0a---%0a> xvfb-runを使った実例。%0a
host:1530854569=192.168.3.2
author:1530854394=
diff:1530854394:1530854320:=
host:1530854394=192.168.3.2
author:1530854320=
diff:1530854320:1530854205:=
host:1530854320=192.168.3.2
author:1530854205=
diff:1530854205:1530854192:=46c46%0a%3c ----%0a---%0a>  ---%0a
host:1530854205=192.168.3.2
author:1530854192=
diff:1530854192:1530854179:=46c46%0a%3c  ---%0a---%0a> ---%0a
host:1530854192=192.168.3.2
author:1530854179=
diff:1530854179:1530854149:=46,47d45%0a%3c ---%0a%3c 終了：2018/07/06 (金) 14:16:14%0a\ No newline at end of file%0a
host:1530854179=192.168.3.2
author:1530854149=
diff:1530854149:1530854101:=41,44d40%0a%3c %0a%3c xvfb-runを使った実例。%0a%3c %0a%3c  xvfb-run -s "-screen 0 1024x768x24" ./out/Default/content_unittests%0a
host:1530854149=192.168.3.2
author:1530854101=
diff:1530854101:1530853987:=33,41c33%0a%3c  python testing/xvfb.py out/Default/components_unittests%0a%3c %0a%3c 実行中のXvfbでブラウザテストを実行。DISPLAY環境変数を設定して行う。%0a%3c %0a%3c  Xvfb :100 -screen 0 1600x1200x24 &%0a%3c   %0a%3c  DISPLAY=localhost:100 out/Default/browser_tests​ --gtest_filter=FooTest.*%0a%3c %0a%3c %0a---%0a>  python testing/xvfb.py out/Default/components_unittests%0a\ No newline at end of file%0a
host:1530854101=192.168.3.2
author:1530853987=
diff:1530853987:1530853970:=32,33d31%0a%3c %0a%3c  python testing/xvfb.py out/Default/components_unittests%0a\ No newline at end of file%0a
host:1530853987=192.168.3.2
author:1530853970=
diff:1530853970:1530853234:=23,31d22%0a%3c !WindowsでChromiumのクラッシュからダンプを取得%0a%3c テストを開始する前にcrash_service.exeを実行しておく。これはクラッシュに介入しクラッシュダンプを作成する。クラッシュダンプはChromiumプロファイルのUser Data DirectoryのCrash Reportsフォルダに書き込まれる。%0a%3c %0a%3c crash_service.exeで通常のChromeやChromiumのクラッシュダンプはを作成したいときは、--noerrdialogsフラグをつける。--enable-dcheckをつけるとリリースモードでもアサートエラーが得られる。%0a%3c %0a%3c !ヘッドレスモードで実行%0a%3c sshでマシンを使っているときはディスプレイがないので、スクリーンに書き込むテストを実行できない。しかしLinuxではxvfb(X virtual Frame Buffer)とヘッドレスモードを使えばテストを実行できる。いくつかのやり方がある。%0a%3c %0a%3c unittestsとtesting/xvfb.pyを使った実例（xcompmgrをインストールしておく必要があるがこれはinstall-build-deps.shを実行していれば行われている）。%0a
host:1530853970=192.168.3.2
author:1530853234=
diff:1530853234:1530853134:=21c21%0a%3c ユニットテストはChromiumコードのある一部を個別の環境内で検証するために使う。通常_unittests.ccがファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常_browsertest.ccがつく。[[テストとインフラ/ブラウザテスト]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a---%0a> ユニットテストはChromiumコードのある一部を個別の環境内で検証するために使う。通常_unittests.ccがファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常_browsertest.ccがつく。[[https://www.chromium.org/developers/testing/browser-tests|ここ]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a
host:1530853234=192.168.3.2
author:1530853134=
diff:1530853134:1530720681:=18,21d17%0a%3c %0a%3c Chromeスタックをすべて含むunit_testsターゲットもある。%0a%3c %0a%3c ユニットテストはChromiumコードのある一部を個別の環境内で検証するために使う。通常_unittests.ccがファイル名につく。ブラウザテストはブラウザを完全に実行し、その中でテストを行う。これらのテストは通常_browsertest.ccがつく。[[https://www.chromium.org/developers/testing/browser-tests|ここ]]にブラウザテストの詳細がある。新しいテストを追加するには同じようなソースをコピーして作るのが普通。ブラウザテストよりもユニットテストのほうが早くて信頼度が高い。%0a
host:1530853134=192.168.3.2
author:1530720681=
diff:1530720681:1530719054:=
host:1530720681=192.168.3.2
author:1530719054=
diff:1530719054:1530718872:=15,17d14%0a%3c %0a%3c !ユニットテストとブラウザテスト%0a%3c ほとんどのsrc/のトップレベルディレクトリはユニットテストがある。例えばcontent/にはcontent_unittestsがあり、cc/にはcc_unittests、components/にはcomponents_unittestsがある。%0a
host:1530719054=192.168.3.2
author:1530718872=
diff:1530718872:1530718371:=1,15c1%0a%3c https://www.chromium.org/developers/testing/running-tests%0a%3c %0a%3c !基本テストを実行(バイナリをgtest)%0a%3c %0a%3c 多くのテストがChromiumのUIを作成するのでデスクトップ環境が必要になる。それがない場合はXvfbを利用できる。下記のヘッドレスモードに関する記述を参照。%0a%3c %0a%3c !特定のサブテストを実行%0a%3c ''--gtest_filter=FileUtilTest.*''の用に実行してサブテストのみを実行できる。%0a%3c %0a%3c !出力を加工%0a%3c テストの実行を早くするにめ、可視ウインドウを作成するテストはデフォルトではそのウインドウの何も描画しない。テストに可視ピクセルを描画させるには''--enable-pixel-output-in-tests''コマンドラインフラグを使う。これはユニットテストとブラウザテストで使える。%0a%3c %0a%3c !レイアウトテスト%0a%3c Blinkはページレイアウトのテストのための大きいテストスイートを持っている。このテストをするには'''blink_tests'''をビルドし、''blink/tools/layout_tests/run_webkit_tests.sh --debug''を実行する。%0a%3c %0a---%0a> a%0a\ No newline at end of file%0a
host:1530718872=192.168.3.2
author:1530718371=
diff:1530718371:1530718371:=1d0%0a%3c a%0a\ No newline at end of file%0a
host:1530718371=192.168.3.2
