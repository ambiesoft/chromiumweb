version=pmwiki-2.2.107 ordered=1 urlencoded=1
agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/67.0.3396.87 Safari/537.36
author=
charset=UTF-8
csum=
ctime=1531783777
host=192.168.3.2
name=デザイン.Pepperプラグイン実装
rev=12
targets=
text=https://www.chromium.org/developers/design-documents/pepper-plugin-implementation%0a%0a!重要なコードの場所早見表%0a%0a* @@ppapi@@ -- Root PPAPIコード%0a** @@api@@ -- IDL インターフェス%0a** @@c@@ -- 公開Cバイナリインタフェース（IDLから生成、treeにチェックインされた）%0a** @@cpp@@ -- CインタフェースをC++で使うラッパ%0a** @@generators@@ -- IDLからCへのコンパイラ%0a** @@host@@ -- コンテントとブラウザがバックエンドを実装するために使う%0a** @@native_client@@ -- NaCl 信頼プラグイン%0a** @@proxy@@ -- ChromeのIPCベースのプロキシ%0a** @@tests@@ -- ユニットテスト%0a** @@shared_impl@@ -- Pepperオブジェクトのための実装。プロキシ間（ppapi/proxy）とプロセス内（content/renderer/pepper）で共有したいと思っている。%0a* @@chrome/browser/renderer_host/pepper/pepper_*_host.*@@ -- ブラウザプロセスの新スタイルリソースのバックエンド("host")%0a* @@chrome/renderer/pepper/pepper_*_host.*@@ -- レンダラプロセスの新スタイルのリソースのバックエンド ("host") %0a* @@content/renderer/pepper/ppb_*_impl.*@@ -- プロセス内リソースの古いスタイルのリソースとWebKitへの接続%0a* @@content/browser/renderer_host/pepper/pepper_*_host.*@@ -- コンテントブラウザプロセスの新スタイルのリソースのバックエンド("host")実装%0a* @@content/renderer/pepper/pepper_*_host.*@@ -- コンテントレンダラプロセスの新スタイルのリソースのバックエンド("host")実装%0a* @@content/renderer/pepper/pepper_plugin_delegate_impl.*@@ -- WebKitコードからブラウザへアクセスするデリゲートインタフェース。%0a* @@content/renderer/render_view.cc@@ -- プラグインの割当（createPlugin参照）。%0a* @@chrome/test/ppapi/@@ -- テストコード（Chromeブラウザテストの一部）%0a%0a%0a%0a!問題追跡%0aPPAPIのバグはChromiumの問題トラッカーの中にある。pepper関連のバグを報告するには以下のラベルの''すべて''を使うこと：%0a* Area-Internals%0a* Cr-Internals-Plugins-Pepper%0a%0aバグがNative Client関連なら以下のラベルも使う：%0a* NaCl%0a%0a[[https://code.google.com/p/chromium/issues/list?can=2&q=label%253ACr-Internals-Plugins-Pepper&colspec=ID+Pri+M+Iteration+ReleaseBlock+Cr+Status+Owner+Summary+OS+Modified&cells=tiles|現在の"Cr-Internals-Plugins-Pepper"ラベル]]を参照%0a%0a!プラグインをChromeで実行%0aプラグインには「トラスト」と「アントラスト」の２つの動作モードが有る。アントラストプラグインはクロスプラットフォームで動作にNaClを使う。トラストプラグインはブラウザプロセスやプラグインプロセス内に直接ロードされプラットフォーム固有のライブラリのように振る舞う。%0a %0aプラグインをトラストモードで動かすにはAPIを実装したプラットフォーム固有のライブラリを作成する。一例としては２Dグラフィックの「ペイントマネージャ」（''ppapi/examples/2d/''）がある。トラストプラグインはコマンドラインで処理すべきMIMEタイプを指定して登録する。コマンドラインは完全プラグイン名＋セミコロン＋MIMEタイプになる。MIMEタイプはページ内のオブジェクトタグの「type」属性と適合する。Linuxにおけるペイントマネージャの例の場合、以下のように実行する：%0a%0a=cpp [=%0achrome --register-pepper-plugins="/local/src/out/Debug/lib/libppapi_example_paint_manager.so;application/x-ppapi-example-2d" file:///local/src/ppapi/examples/2d/2d.html%0a=]%0aこの場合、'''application/x-ppapi-example-2d'''が'''example.html'''内で指定されていなければならない。'''--ppapi-out-of-process'''を指定するとプロセス外で実行される。プロセス内モードは廃止されてきており、このオプションを使うことが推奨される。%0a%0aLinuxでは、新規xtermの新規GDBインスタンスでこのプロセスを自動で起動できる。スタートアップ時の問題をデバッグするのに役に立つ。以下のコマンドラインを使う：%0acpp [=%0a--ppapi-plugin-launcher='xterm -title plugin -e gdb --eval-command=run --args'%0a=]%0a%0a!「古い」リソースとプロキシデザイン%0aほとんどのリソースは現状では古いプロキシデザインを使って実装されている。多くのレイヤが存在しあるものはプロセス内で、あるものはプロセス外で実装されている。%0a%0aプロセス内実装はcontent/renderer/pepper/ppb_*_impl.*にある。これらはblinkやcontent/rendererの他のぶぶを使ってChromeの残りの部分と統合される。%0a%0aプロセス外の場合はプロキシはインタフェースを実装する。ppapi/proxy/ppb_*_proxy.*で実装されている。プロキシはIPCチャネルの各端点にppapi/proxy/dispatcher.hを１つもつ。PluginDispatcherの特化はプラグイン側にあり、HostDispatcherの特化はレンダラ側にある。各インタフェースはプロキシオブジェクトをもち、ディスパッチャもそれと対応したプロキシとPP_Resourceオブジェクトと対応したリソースオブジェクトをもつ。%0a%0aいくつかのプロキシオブジェクトと実装はコードを共有している。共有コードは重複を避けるためにppapi/shared_impl/ppb_*_shared.*に置かれる。%0a%0aプラグイン→レンダラ呼び出しのライフサイクル%0a# プラグインがPPAPI関数を呼び出す。%0a# サンク層がこれをリソースオブジェクト呼び出しのC++コールへ変換する。%0a# リソースオブジェクトはPluginDispatcher経由でIPCメッセージをレンダラへ送る。%0a# HostDispatcherはメッセージを受け取り、レンダラ内の適切なプロキシオブジェクトインタフェースへ転送する。%0a# インターフェスプロキシはIPCメッセージをPPAPI呼び出しに変換し、プロセス内実装を呼び出す。 %0a# 「impl」リソースが呼び出され処理を実行する。%0a%0a「新しい」デザインとは異なり、ブラウザとの交信に標準的な方法は存在しない。あるコンポーネント（TCP/UDPソケット）は手巻きのトラッキングでこれを行う。%0a%0a!「新しい」リソースとプロキシデザイン%0aこれからの追加は新しいプロキシデザインを使うべきである。パフォーマンスに優れ、書くコードも少なくて済む。古いものと新しいものは並行して存在し、１個づつ新しくしている。%0a%0aリソースオブジェクトは一度だけ実装される（ppapi/proxy/*_resource.cc）。このリソースはブラウザやレンダラプロセス内の「host」オブジェクトにIPCを送信し仕事を行う。ホストオブジェクトはPepperAPIを話さず、単にChromeのIPCタイプを使う。これはレンダラプロセスでもブラウザプロセスでもできるし、両方使ったり使わなかったり（すべての機能がプラグインプロセス内にある場合）もできる。chromeやコンテントモジュール内に実装することもできる。%0a%0ahttps://www.chromium.org/_/rsrc/1347512885999/developers/design-documents/pepper-plugin-implementation/pepper_design.png%0a%0aホストオブジェクトはどこに存在するか？%0a*content/renderer/pepper/ — おそらく最も普通の場所。blinkや他のレンダラと対話するリソースはここに来る。 %0a*chrome/renderer/pepper/ — Chromeのみのインタフェース（Flash,PDFや他のカスタムGoogleプラグイン）はここを使う。 %0a*content/browser/renderer_host/pepper/ — content/renderer/pepperの代わりにまたは追加としてブラウザプロセスと会話する必要がある場合はここを使う。%0a*chrome/browser/renderer_host/pepper/ — chrome/renderer/pepperの代わりまたは追加としてブラウザプロセスと会話する必要がある場合はここを使う。%0a%0a上記のディレクトリは「host factory」ファイルをもっており、それを使ってリソースのためのホストを作成できる。BrowserPpapiHost / RendererPpapiHostによってシステムを呼び出してリソースのコンテキストを取得することもできる。%0a%0a%0aWe support in-process mode for legacy interfaces needed by certain plugins. New resources do not need to support in-process. For resources that need in-process, we have a "fake" IPC channel that allows the "proxy" and "host" to be in the same process. To wire this up, first get your out-of-process implementation working, then hook up creation through content/renderer/pepper/pepper_in_process_resource_creation.cc. Note that this only works for resources implemented in content/renderer. Other types of hosts are not supported in in-process mode.
time=1532085648
author:1532085648=
diff:1532085648:1532085595:=39,41c39,41%0a%3c プラグインをトラストモードで動かすにはAPIを実装したプラットフォーム固有のライブラリを作成する。一例としては２Dグラフィックの「ペイントマネージャ」（''ppapi/examples/2d/''）がある。トラストプラグインはコマンドラインで処理すべきMIMEタイプを指定して登録する。コマンドラインは完全プラグイン名＋セミコロン＋MIMEタイプになる。MIMEタイプはページ内のオブジェクトタグの「type」属性と適合する。Linuxにおけるペイントマネージャの例の場合、以下のように実行する：%0a%3c %0a%3c =cpp [=%0a---%0a> プラグインをトラストモードで動かすにはAPIを実装したプラットフォーム固有のライブラリを作成する。一例としては２Dグラフィックの「ペイントマネージャ」（ppapi/examples/2d/）がある。トラストプラグインはコマンドラインで処理すべきMIMEタイプを指定して登録する。コマンドラインは完全プラグイン名＋セミコロン＋MIMEタイプになる。MIMEタイプはページ内のオブジェクトタグの「type」属性と適合する。Linuxにおけるペイントマネージャの例の場合、以下のように実行する：%0a> %0a> cpp= [=%0a44c44%0a%3c この場合、'''application/x-ppapi-example-2d'''が'''example.html'''内で指定されていなければならない。'''--ppapi-out-of-process'''を指定するとプロセス外で実行される。プロセス内モードは廃止されてきており、このオプションを使うことが推奨される。%0a---%0a> この場合、application/x-ppapi-example-2dがexample.html内で指定されていなければならない。--ppapi-out-of-processを指定するとプロセス外で実行される。プロセス内モードは廃止されてきており、このオプションを使うことが推奨される。%0a
host:1532085648=192.168.3.2
author:1532085595=
diff:1532085595:1531822202:=37,86c37,42%0a%3c プラグインには「トラスト」と「アントラスト」の２つの動作モードが有る。アントラストプラグインはクロスプラットフォームで動作にNaClを使う。トラストプラグインはブラウザプロセスやプラグインプロセス内に直接ロードされプラットフォーム固有のライブラリのように振る舞う。%0a%3c  %0a%3c プラグインをトラストモードで動かすにはAPIを実装したプラットフォーム固有のライブラリを作成する。一例としては２Dグラフィックの「ペイントマネージャ」（ppapi/examples/2d/）がある。トラストプラグインはコマンドラインで処理すべきMIMEタイプを指定して登録する。コマンドラインは完全プラグイン名＋セミコロン＋MIMEタイプになる。MIMEタイプはページ内のオブジェクトタグの「type」属性と適合する。Linuxにおけるペイントマネージャの例の場合、以下のように実行する：%0a%3c %0a%3c cpp= [=%0a%3c chrome --register-pepper-plugins="/local/src/out/Debug/lib/libppapi_example_paint_manager.so;application/x-ppapi-example-2d" file:///local/src/ppapi/examples/2d/2d.html%0a%3c =]%0a%3c この場合、application/x-ppapi-example-2dがexample.html内で指定されていなければならない。--ppapi-out-of-processを指定するとプロセス外で実行される。プロセス内モードは廃止されてきており、このオプションを使うことが推奨される。%0a%3c %0a%3c Linuxでは、新規xtermの新規GDBインスタンスでこのプロセスを自動で起動できる。スタートアップ時の問題をデバッグするのに役に立つ。以下のコマンドラインを使う：%0a%3c cpp [=%0a%3c --ppapi-plugin-launcher='xterm -title plugin -e gdb --eval-command=run --args'%0a%3c =]%0a%3c %0a%3c !「古い」リソースとプロキシデザイン%0a%3c ほとんどのリソースは現状では古いプロキシデザインを使って実装されている。多くのレイヤが存在しあるものはプロセス内で、あるものはプロセス外で実装されている。%0a%3c %0a%3c プロセス内実装はcontent/renderer/pepper/ppb_*_impl.*にある。これらはblinkやcontent/rendererの他のぶぶを使ってChromeの残りの部分と統合される。%0a%3c %0a%3c プロセス外の場合はプロキシはインタフェースを実装する。ppapi/proxy/ppb_*_proxy.*で実装されている。プロキシはIPCチャネルの各端点にppapi/proxy/dispatcher.hを１つもつ。PluginDispatcherの特化はプラグイン側にあり、HostDispatcherの特化はレンダラ側にある。各インタフェースはプロキシオブジェクトをもち、ディスパッチャもそれと対応したプロキシとPP_Resourceオブジェクトと対応したリソースオブジェクトをもつ。%0a%3c %0a%3c いくつかのプロキシオブジェクトと実装はコードを共有している。共有コードは重複を避けるためにppapi/shared_impl/ppb_*_shared.*に置かれる。%0a%3c %0a%3c プラグイン→レンダラ呼び出しのライフサイクル%0a%3c # プラグインがPPAPI関数を呼び出す。%0a%3c # サンク層がこれをリソースオブジェクト呼び出しのC++コールへ変換する。%0a%3c # リソースオブジェクトはPluginDispatcher経由でIPCメッセージをレンダラへ送る。%0a%3c # HostDispatcherはメッセージを受け取り、レンダラ内の適切なプロキシオブジェクトインタフェースへ転送する。%0a%3c # インターフェスプロキシはIPCメッセージをPPAPI呼び出しに変換し、プロセス内実装を呼び出す。 %0a%3c # 「impl」リソースが呼び出され処理を実行する。%0a%3c %0a%3c 「新しい」デザインとは異なり、ブラウザとの交信に標準的な方法は存在しない。あるコンポーネント（TCP/UDPソケット）は手巻きのトラッキングでこれを行う。%0a%3c %0a%3c !「新しい」リソースとプロキシデザイン%0a%3c これからの追加は新しいプロキシデザインを使うべきである。パフォーマンスに優れ、書くコードも少なくて済む。古いものと新しいものは並行して存在し、１個づつ新しくしている。%0a%3c %0a%3c リソースオブジェクトは一度だけ実装される（ppapi/proxy/*_resource.cc）。このリソースはブラウザやレンダラプロセス内の「host」オブジェクトにIPCを送信し仕事を行う。ホストオブジェクトはPepperAPIを話さず、単にChromeのIPCタイプを使う。これはレンダラプロセスでもブラウザプロセスでもできるし、両方使ったり使わなかったり（すべての機能がプラグインプロセス内にある場合）もできる。chromeやコンテントモジュール内に実装することもできる。%0a%3c %0a%3c https://www.chromium.org/_/rsrc/1347512885999/developers/design-documents/pepper-plugin-implementation/pepper_design.png%0a%3c %0a%3c ホストオブジェクトはどこに存在するか？%0a%3c *content/renderer/pepper/ — おそらく最も普通の場所。blinkや他のレンダラと対話するリソースはここに来る。 %0a%3c *chrome/renderer/pepper/ — Chromeのみのインタフェース（Flash,PDFや他のカスタムGoogleプラグイン）はここを使う。 %0a%3c *content/browser/renderer_host/pepper/ — content/renderer/pepperの代わりにまたは追加としてブラウザプロセスと会話する必要がある場合はここを使う。%0a%3c *chrome/browser/renderer_host/pepper/ — chrome/renderer/pepperの代わりまたは追加としてブラウザプロセスと会話する必要がある場合はここを使う。%0a%3c %0a%3c 上記のディレクトリは「host factory」ファイルをもっており、それを使ってリソースのためのホストを作成できる。BrowserPpapiHost / RendererPpapiHostによってシステムを呼び出してリソースのコンテキストを取得することもできる。%0a%3c %0a%3c %0a%3c We support in-process mode for legacy interfaces needed by certain plugins. New resources do not need to support in-process. For resources that need in-process, we have a "fake" IPC channel that allows the "proxy" and "host" to be in the same process. To wire this up, first get your out-of-process implementation working, then hook up creation through content/renderer/pepper/pepper_in_process_resource_creation.cc. Note that this only works for resources implemented in content/renderer. Other types of hosts are not supported in in-process mode.%0a\ No newline at end of file%0a---%0a> ２つの動作モードがある、「トラスト」プラグインと「アントラスト」プラグイン。アントラストプラグインはNative Clientを使ってWebから安全にコードを実行するクロスプラットフォームのプラグイン。トラストプラグインはレンダラプロセスにロードされるか、プラットフォーム固有のライブラリとしてプラグインプロセスにロードされる。%0a> %0a> %0a> %0a> %0a> You run a plugin in trusted mode by building a platform-specific library implementing the API. For random manual testing, you can use one of the examples, the graphics 2D "paint manager" example is a good one for general hacking (see ppapi/examples/2d/). A trusted plugin is instantiated by registering it to handle a MIME type on the command line. Provide the full plugin name (which varies by platform), followed by a semicolon, followed by the MIME type. The MIME type should match the "type" attribute of the object tag specified on your page. For the paint manager example plugin on Linux, you would run:%0a
host:1532085595=192.168.3.2
author:1531822202=
diff:1531822202:1531822021:=37,42c37,38%0a%3c ２つの動作モードがある、「トラスト」プラグインと「アントラスト」プラグイン。アントラストプラグインはNative Clientを使ってWebから安全にコードを実行するクロスプラットフォームのプラグイン。トラストプラグインはレンダラプロセスにロードされるか、プラットフォーム固有のライブラリとしてプラグインプロセスにロードされる。%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c You run a plugin in trusted mode by building a platform-specific library implementing the API. For random manual testing, you can use one of the examples, the graphics 2D "paint manager" example is a good one for general hacking (see ppapi/examples/2d/). A trusted plugin is instantiated by registering it to handle a MIME type on the command line. Provide the full plugin name (which varies by platform), followed by a semicolon, followed by the MIME type. The MIME type should match the "type" attribute of the object tag specified on your page. For the paint manager example plugin on Linux, you would run:%0a---%0a> ２つの動作モードがある、「トラスト」プラグインと「アントラスト」プラグイン。アントラストプラグインはNative Clientを使ってWebから安全にコードを実行するクロスプラットフォームのプラグイン。トラストプラグインは%0a> Trusted plugins are loaded directly in either the renderer process or a separate plugin process as platform-specific libraries.%0a\ No newline at end of file%0a
host:1531822202=192.168.3.2
author:1531822021=
diff:1531822021:1531821512:=35,38d34%0a%3c %0a%3c !プラグインをChromeで実行%0a%3c ２つの動作モードがある、「トラスト」プラグインと「アントラスト」プラグイン。アントラストプラグインはNative Clientを使ってWebから安全にコードを実行するクロスプラットフォームのプラグイン。トラストプラグインは%0a%3c Trusted plugins are loaded directly in either the renderer process or a separate plugin process as platform-specific libraries.%0a\ No newline at end of file%0a
host:1531822021=192.168.3.2
author:1531821512=
diff:1531821512:1531821316:=26,34c26,30%0a%3c !問題追跡%0a%3c PPAPIのバグはChromiumの問題トラッカーの中にある。pepper関連のバグを報告するには以下のラベルの''すべて''を使うこと：%0a%3c * Area-Internals%0a%3c * Cr-Internals-Plugins-Pepper%0a%3c %0a%3c バグがNative Client関連なら以下のラベルも使う：%0a%3c * NaCl%0a%3c %0a%3c [[https://code.google.com/p/chromium/issues/list?can=2&q=label%253ACr-Internals-Plugins-Pepper&colspec=ID+Pri+M+Iteration+ReleaseBlock+Cr+Status+Owner+Summary+OS+Modified&cells=tiles|現在の"Cr-Internals-Plugins-Pepper"ラベル]]を参照%0a---%0a> %0a> %0a> Implementation of the old-style in-process resources and their connection to WebKit.%0a> %0a> %0a
host:1531821512=192.168.3.2
author:1531821316=
diff:1531821316:1531821272:=5,14c5,14%0a%3c * @@ppapi@@ -- Root PPAPIコード%0a%3c ** @@api@@ -- IDL インターフェス%0a%3c ** @@c@@ -- 公開Cバイナリインタフェース（IDLから生成、treeにチェックインされた）%0a%3c ** @@cpp@@ -- CインタフェースをC++で使うラッパ%0a%3c ** @@generators@@ -- IDLからCへのコンパイラ%0a%3c ** @@host@@ -- コンテントとブラウザがバックエンドを実装するために使う%0a%3c ** @@native_client@@ -- NaCl 信頼プラグイン%0a%3c ** @@proxy@@ -- ChromeのIPCベースのプロキシ%0a%3c ** @@tests@@ -- ユニットテスト%0a%3c ** @@shared_impl@@ -- Pepperオブジェクトのための実装。プロキシ間（ppapi/proxy）とプロセス内（content/renderer/pepper）で共有したいと思っている。%0a---%0a> * ppapi -- Root PPAPIコード%0a> ** api -- IDL インターフェス%0a> ** c -- 公開Cバイナリインタフェース（IDLから生成、treeにチェックインされた）%0a> ** cpp -- CインタフェースをC++で使うラッパ%0a> ** generators -- IDLからCへのコンパイラ%0a> ** host -- コンテントとブラウザがバックエンドを実装するために使う%0a> ** native_client -- NaCl 信頼プラグイン%0a> ** proxy -- ChromeのIPCベースのプロキシ%0a> ** tests -- ユニットテスト%0a> ** shared_impl -- Pepperオブジェクトのための実装。プロキシ間（ppapi/proxy）とプロセス内（content/renderer/pepper）で共有したいと思っている。%0a
host:1531821316=192.168.3.2
author:1531821272=
diff:1531821272:1531821234:=17,22c17,21%0a%3c * @@content/renderer/pepper/ppb_*_impl.*@@ -- プロセス内リソースの古いスタイルのリソースとWebKitへの接続%0a%3c * @@content/browser/renderer_host/pepper/pepper_*_host.*@@ -- コンテントブラウザプロセスの新スタイルのリソースのバックエンド("host")実装%0a%3c * @@content/renderer/pepper/pepper_*_host.*@@ -- コンテントレンダラプロセスの新スタイルのリソースのバックエンド("host")実装%0a%3c * @@content/renderer/pepper/pepper_plugin_delegate_impl.*@@ -- WebKitコードからブラウザへアクセスするデリゲートインタフェース。%0a%3c * @@content/renderer/render_view.cc@@ -- プラグインの割当（createPlugin参照）。%0a%3c * @@chrome/test/ppapi/@@ -- テストコード（Chromeブラウザテストの一部）%0a---%0a> * content/renderer/pepper/ppb_*_impl.* -- プロセス内リソースの古いスタイルのリソースとWebKitへの接続%0a> * content/browser/renderer_host/pepper/pepper_*_host.* -- コンテントブラウザプロセスの新スタイルのリソースのバックエンド("host")実装%0a> * content/renderer/pepper/pepper_*_host.* -- コンテントレンダラプロセスの新スタイルのリソースのバックエンド("host")実装* content/renderer/pepper/pepper_plugin_delegate_impl.* -- WebKitコードからブラウザへアクセスするデリゲートインタフェース。%0a> * content/renderer/render_view.cc -- プラグインの割当（createPlugin参照）。%0a> * chrome/test/ppapi/ -- テストコード（Chromeブラウザテストの一部）%0a
host:1531821272=192.168.3.2
author:1531821234=
diff:1531821234:1531821137:=15,16c15,16%0a%3c * @@chrome/browser/renderer_host/pepper/pepper_*_host.*@@ -- ブラウザプロセスの新スタイルリソースのバックエンド("host")%0a%3c * @@chrome/renderer/pepper/pepper_*_host.*@@ -- レンダラプロセスの新スタイルのリソースのバックエンド ("host") %0a---%0a> * chrome/browser/renderer_host/pepper/pepper_*_host.* -- ブラウザプロセスの新スタイルリソースのバックエンド("host")%0a> * chrome/renderer/pepper/pepper_*_host.* -- レンダラプロセスの新スタイルのリソースのバックエンド ("host") %0a
host:1531821234=192.168.3.2
author:1531821137=
diff:1531821137:1531820643:=15,28c15%0a%3c * chrome/browser/renderer_host/pepper/pepper_*_host.* -- ブラウザプロセスの新スタイルリソースのバックエンド("host")%0a%3c * chrome/renderer/pepper/pepper_*_host.* -- レンダラプロセスの新スタイルのリソースのバックエンド ("host") %0a%3c * content/renderer/pepper/ppb_*_impl.* -- プロセス内リソースの古いスタイルのリソースとWebKitへの接続%0a%3c * content/browser/renderer_host/pepper/pepper_*_host.* -- コンテントブラウザプロセスの新スタイルのリソースのバックエンド("host")実装%0a%3c * content/renderer/pepper/pepper_*_host.* -- コンテントレンダラプロセスの新スタイルのリソースのバックエンド("host")実装* content/renderer/pepper/pepper_plugin_delegate_impl.* -- WebKitコードからブラウザへアクセスするデリゲートインタフェース。%0a%3c * content/renderer/render_view.cc -- プラグインの割当（createPlugin参照）。%0a%3c * chrome/test/ppapi/ -- テストコード（Chromeブラウザテストの一部）%0a%3c %0a%3c %0a%3c %0a%3c %0a%3c %0a%3c Implementation of the old-style in-process resources and their connection to WebKit.%0a%3c %0a---%0a> * %0a
host:1531821137=192.168.3.2
author:1531820643=
diff:1531820643:1531785791:=14,15c14%0a%3c ** shared_impl -- Pepperオブジェクトのための実装。プロキシ間（ppapi/proxy）とプロセス内（content/renderer/pepper）で共有したいと思っている。%0a%3c * %0a---%0a> ** shared_impl -- %0a
host:1531820643=192.168.3.2
author:1531785791=
diff:1531785791:1531783777:=1,15c1%0a%3c https://www.chromium.org/developers/design-documents/pepper-plugin-implementation%0a%3c %0a%3c !重要なコードの場所早見表%0a%3c %0a%3c * ppapi -- Root PPAPIコード%0a%3c ** api -- IDL インターフェス%0a%3c ** c -- 公開Cバイナリインタフェース（IDLから生成、treeにチェックインされた）%0a%3c ** cpp -- CインタフェースをC++で使うラッパ%0a%3c ** generators -- IDLからCへのコンパイラ%0a%3c ** host -- コンテントとブラウザがバックエンドを実装するために使う%0a%3c ** native_client -- NaCl 信頼プラグイン%0a%3c ** proxy -- ChromeのIPCベースのプロキシ%0a%3c ** tests -- ユニットテスト%0a%3c ** shared_impl -- %0a%3c %0a---%0a> https://www.chromium.org/developers/design-documents/pepper-plugin-implementation%0a\ No newline at end of file%0a
host:1531785791=192.168.3.2
author:1531783777=
diff:1531783777:1531783777:=1d0%0a%3c https://www.chromium.org/developers/design-documents/pepper-plugin-implementation%0a\ No newline at end of file%0a
host:1531783777=192.168.3.2
